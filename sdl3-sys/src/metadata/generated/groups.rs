use super::*;

/// Metadata for groups in this crate
pub static GROUPS: &[Group] = &[
    Group {
        module: "assert",
        kind: GroupKind::Enum,
        name: "SDL_AssertState",
        short_name: "AssertState",
        doc: Some("Possible outcomes from a triggered assertion.\n\nWhen an enabled assertion triggers, it may call the assertion handler\n(possibly one provided by the app via [`SDL_SetAssertionHandler`]), which will\nreturn one of these values, possibly after asking the user.\n\nThen SDL will respond based on this outcome (loop around to retry the\ncondition, try to break in a debugger, kill the program, or ignore the\nproblem).\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_ASSERTION_RETRY",
                short_name: "RETRY",
                doc: Some("Retry the assert immediately.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_ASSERTION_BREAK",
                short_name: "BREAK",
                doc: Some("Make the debugger trigger a breakpoint.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_ASSERTION_ABORT",
                short_name: "ABORT",
                doc: Some("Terminate the program.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_ASSERTION_IGNORE",
                short_name: "IGNORE",
                doc: Some("Ignore the assert.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_ASSERTION_ALWAYS_IGNORE",
                short_name: "ALWAYS_IGNORE",
                doc: Some("Ignore the assert from now on.\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "asyncio",
        kind: GroupKind::Enum,
        name: "SDL_AsyncIOTaskType",
        short_name: "AsyncIOTaskType",
        doc: Some("Types of asynchronous I/O tasks.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_ASYNCIO_TASK_READ",
                short_name: "READ",
                doc: Some("A read operation.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_ASYNCIO_TASK_WRITE",
                short_name: "WRITE",
                doc: Some("A write operation.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_ASYNCIO_TASK_CLOSE",
                short_name: "CLOSE",
                doc: Some("A close operation.\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "asyncio",
        kind: GroupKind::Enum,
        name: "SDL_AsyncIOResult",
        short_name: "AsyncIOResult",
        doc: Some("Possible outcomes of an asynchronous I/O task.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_ASYNCIO_COMPLETE",
                short_name: "COMPLETE",
                doc: Some("request was completed without error\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_ASYNCIO_FAILURE",
                short_name: "FAILURE",
                doc: Some("request failed for some reason; check [`SDL_GetError()`]!\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_ASYNCIO_CANCELED",
                short_name: "CANCELED",
                doc: Some("request was canceled before completing.\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "atomic",
        kind: GroupKind::Lock,
        name: "SDL_SpinLock",
        short_name: "SpinLock",
        doc: Some("An atomic spinlock.\n\nThe atomic locks are efficient spinlocks using CPU instructions, but are\nvulnerable to starvation and can spin forever if a thread holding a lock\nhas been terminated. For this reason you should minimize the code executed\ninside an atomic lock and never do expensive things like API or system\ncalls while holding them.\n\nThey are also vulnerable to starvation if the thread holding the lock is\nlower priority than other threads and doesn't get scheduled. In general you\nshould use mutexes instead, since they have better performance and\ncontention behavior.\n\nThe atomic locks are not safe to lock recursively.\n\nPorting Note: The spin lock functions and type are required and can not be\nemulated because they are used in the atomic emulation code.\n"),
        available_since: None,
        values: &[
        ],
    },
    Group {
        module: "audio",
        kind: GroupKind::Enum,
        name: "SDL_AudioFormat",
        short_name: "AudioFormat",
        doc: Some("Audio format.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_AUDIO_BITSIZE`]\n- [`SDL_AUDIO_BYTESIZE`]\n- [`SDL_AUDIO_ISINT`]\n- [`SDL_AUDIO_ISFLOAT`]\n- [`SDL_AUDIO_ISBIGENDIAN`]\n- [`SDL_AUDIO_ISLITTLEENDIAN`]\n- [`SDL_AUDIO_ISSIGNED`]\n- [`SDL_AUDIO_ISUNSIGNED`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_AUDIO_UNKNOWN",
                short_name: "UNKNOWN",
                doc: Some("Unspecified audio format\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_AUDIO_U8",
                short_name: "U8",
                doc: Some("Unsigned 8-bit samples\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_AUDIO_S8",
                short_name: "S8",
                doc: Some("Signed 8-bit samples\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_AUDIO_S16LE",
                short_name: "S16LE",
                doc: Some("Signed 16-bit samples\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_AUDIO_S16BE",
                short_name: "S16BE",
                doc: Some("As above, but big-endian byte order\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_AUDIO_S32LE",
                short_name: "S32LE",
                doc: Some("32-bit integer samples\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_AUDIO_S32BE",
                short_name: "S32BE",
                doc: Some("As above, but big-endian byte order\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_AUDIO_F32LE",
                short_name: "F32LE",
                doc: Some("32-bit floating point samples\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_AUDIO_F32BE",
                short_name: "F32BE",
                doc: Some("As above, but big-endian byte order\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_AUDIO_S16",
                short_name: "S16",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_AUDIO_S32",
                short_name: "S32",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_AUDIO_F32",
                short_name: "F32",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_AUDIO_S16",
                short_name: "S16",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_AUDIO_S32",
                short_name: "S32",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_AUDIO_F32",
                short_name: "F32",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "audio",
        kind: GroupKind::Id,
        name: "SDL_AudioDeviceID",
        short_name: "AudioDeviceID",
        doc: Some("SDL Audio Device instance IDs.\n\nZero is used to signify an invalid/null device.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_AUDIO_DEVICE_DEFAULT_PLAYBACK",
                short_name: "DEFAULT_PLAYBACK",
                doc: Some("A value used to request a default playback audio device.\n\nSeveral functions that require an [`SDL_AudioDeviceID`] will accept this value\nto signify the app just wants the system to choose a default device instead\nof the app providing a specific one.\n\n## Availability\nThis macro is available since SDL 3.2.0.\n"),
                available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
            },
            GroupValue {
                name: "SDL_AUDIO_DEVICE_DEFAULT_RECORDING",
                short_name: "DEFAULT_RECORDING",
                doc: Some("A value used to request a default recording audio device.\n\nSeveral functions that require an [`SDL_AudioDeviceID`] will accept this value\nto signify the app just wants the system to choose a default device instead\nof the app providing a specific one.\n\n## Availability\nThis macro is available since SDL 3.2.0.\n"),
                available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
            },
        ],
    },
    Group {
        module: "blendmode",
        kind: GroupKind::Flags,
        name: "SDL_BlendMode",
        short_name: "BlendMode",
        doc: Some("A set of blend modes used in drawing operations.\n\nThese predefined blend modes are supported everywhere.\n\nAdditional values may be obtained from [`SDL_ComposeCustomBlendMode`].\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n\n## See also\n- [`SDL_ComposeCustomBlendMode`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_BLENDMODE_NONE",
                short_name: "NONE",
                doc: Some("no blending: dstRGBA = srcRGBA\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_BLENDMODE_BLEND",
                short_name: "BLEND",
                doc: Some("alpha blending: dstRGB = (srcRGB * srcA) + (dstRGB * (1-srcA)), dstA = srcA + (dstA * (1-srcA))\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_BLENDMODE_BLEND_PREMULTIPLIED",
                short_name: "BLEND_PREMULTIPLIED",
                doc: Some("pre-multiplied alpha blending: dstRGBA = srcRGBA + (dstRGBA * (1-srcA))\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_BLENDMODE_ADD",
                short_name: "ADD",
                doc: Some("additive blending: dstRGB = (srcRGB * srcA) + dstRGB, dstA = dstA\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_BLENDMODE_ADD_PREMULTIPLIED",
                short_name: "ADD_PREMULTIPLIED",
                doc: Some("pre-multiplied additive blending: dstRGB = srcRGB + dstRGB, dstA = dstA\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_BLENDMODE_MOD",
                short_name: "MOD",
                doc: Some("color modulate: dstRGB = srcRGB * dstRGB, dstA = dstA\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_BLENDMODE_MUL",
                short_name: "MUL",
                doc: Some("color multiply: dstRGB = (srcRGB * dstRGB) + (dstRGB * (1-srcA)), dstA = dstA\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_BLENDMODE_INVALID",
                short_name: "INVALID",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "blendmode",
        kind: GroupKind::Enum,
        name: "SDL_BlendOperation",
        short_name: "BlendOperation",
        doc: Some("The blend operation used when combining source and destination pixel\ncomponents.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_BLENDOPERATION_ADD",
                short_name: "ADD",
                doc: Some("dst + src: supported by all renderers\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_BLENDOPERATION_SUBTRACT",
                short_name: "SUBTRACT",
                doc: Some("src - dst : supported by D3D, OpenGL, OpenGLES, and Vulkan\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_BLENDOPERATION_REV_SUBTRACT",
                short_name: "REV_SUBTRACT",
                doc: Some("dst - src : supported by D3D, OpenGL, OpenGLES, and Vulkan\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_BLENDOPERATION_MINIMUM",
                short_name: "MINIMUM",
                doc: Some("min(dst, src) : supported by D3D, OpenGL, OpenGLES, and Vulkan\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_BLENDOPERATION_MAXIMUM",
                short_name: "MAXIMUM",
                doc: Some("max(dst, src) : supported by D3D, OpenGL, OpenGLES, and Vulkan\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "blendmode",
        kind: GroupKind::Enum,
        name: "SDL_BlendFactor",
        short_name: "BlendFactor",
        doc: Some("The normalized factor used to multiply pixel components.\n\nThe blend factors are multiplied with the pixels from a drawing operation\n(src) and the pixels from the render target (dst) before the blend\noperation. The comma-separated factors listed above are always applied in\nthe component order red, green, blue, and alpha.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_BLENDFACTOR_ZERO",
                short_name: "ZERO",
                doc: Some("0, 0, 0, 0\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_BLENDFACTOR_ONE",
                short_name: "ONE",
                doc: Some("1, 1, 1, 1\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_BLENDFACTOR_SRC_COLOR",
                short_name: "SRC_COLOR",
                doc: Some("srcR, srcG, srcB, srcA\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR",
                short_name: "ONE_MINUS_SRC_COLOR",
                doc: Some("1-srcR, 1-srcG, 1-srcB, 1-srcA\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_BLENDFACTOR_SRC_ALPHA",
                short_name: "SRC_ALPHA",
                doc: Some("srcA, srcA, srcA, srcA\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA",
                short_name: "ONE_MINUS_SRC_ALPHA",
                doc: Some("1-srcA, 1-srcA, 1-srcA, 1-srcA\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_BLENDFACTOR_DST_COLOR",
                short_name: "DST_COLOR",
                doc: Some("dstR, dstG, dstB, dstA\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR",
                short_name: "ONE_MINUS_DST_COLOR",
                doc: Some("1-dstR, 1-dstG, 1-dstB, 1-dstA\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_BLENDFACTOR_DST_ALPHA",
                short_name: "DST_ALPHA",
                doc: Some("dstA, dstA, dstA, dstA\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA",
                short_name: "ONE_MINUS_DST_ALPHA",
                doc: Some("1-dstA, 1-dstA, 1-dstA, 1-dstA\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "camera",
        kind: GroupKind::Id,
        name: "SDL_CameraID",
        short_name: "CameraID",
        doc: Some("This is a unique ID for a camera device for the time it is connected to the\nsystem, and is never reused for the lifetime of the application.\n\nIf the device is disconnected and reconnected, it will get a new ID.\n\nThe value 0 is an invalid ID.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n\n## See also\n- [`SDL_GetCameras`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
        ],
    },
    Group {
        module: "camera",
        kind: GroupKind::Enum,
        name: "SDL_CameraPosition",
        short_name: "CameraPosition",
        doc: Some("The position of camera in relation to system device.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_GetCameraPosition`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_CAMERA_POSITION_UNKNOWN",
                short_name: "UNKNOWN",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_CAMERA_POSITION_FRONT_FACING",
                short_name: "FRONT_FACING",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_CAMERA_POSITION_BACK_FACING",
                short_name: "BACK_FACING",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "dialog",
        kind: GroupKind::Enum,
        name: "SDL_FileDialogType",
        short_name: "FileDialogType",
        doc: Some("Various types of file dialogs.\n\nThis is used by [`SDL_ShowFileDialogWithProperties()`] to decide what kind of\ndialog to present to the user.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_ShowFileDialogWithProperties`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_FILEDIALOG_OPENFILE",
                short_name: "OPENFILE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_FILEDIALOG_SAVEFILE",
                short_name: "SAVEFILE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_FILEDIALOG_OPENFOLDER",
                short_name: "OPENFOLDER",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "events",
        kind: GroupKind::Enum,
        name: "SDL_EventType",
        short_name: "EventType",
        doc: Some("The types of events that can be delivered.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_EVENT_FIRST",
                short_name: "FIRST",
                doc: Some("Unused (do not remove)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_QUIT",
                short_name: "QUIT",
                doc: Some("User-requested quit\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_TERMINATING",
                short_name: "TERMINATING",
                doc: Some("The application is being terminated by the OS. This event must be handled in a callback set with [`SDL_AddEventWatch()`].\nCalled on iOS in applicationWillTerminate()\nCalled on Android in onDestroy()\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_LOW_MEMORY",
                short_name: "LOW_MEMORY",
                doc: Some("The application is low on memory, free memory if possible. This event must be handled in a callback set with [`SDL_AddEventWatch()`].\nCalled on iOS in applicationDidReceiveMemoryWarning()\nCalled on Android in onTrimMemory()\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WILL_ENTER_BACKGROUND",
                short_name: "WILL_ENTER_BACKGROUND",
                doc: Some("The application is about to enter the background. This event must be handled in a callback set with [`SDL_AddEventWatch()`].\nCalled on iOS in applicationWillResignActive()\nCalled on Android in onPause()\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_DID_ENTER_BACKGROUND",
                short_name: "DID_ENTER_BACKGROUND",
                doc: Some("The application did enter the background and may not get CPU for some time. This event must be handled in a callback set with [`SDL_AddEventWatch()`].\nCalled on iOS in applicationDidEnterBackground()\nCalled on Android in onPause()\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WILL_ENTER_FOREGROUND",
                short_name: "WILL_ENTER_FOREGROUND",
                doc: Some("The application is about to enter the foreground. This event must be handled in a callback set with [`SDL_AddEventWatch()`].\nCalled on iOS in applicationWillEnterForeground()\nCalled on Android in onResume()\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_DID_ENTER_FOREGROUND",
                short_name: "DID_ENTER_FOREGROUND",
                doc: Some("The application is now interactive. This event must be handled in a callback set with [`SDL_AddEventWatch()`].\nCalled on iOS in applicationDidBecomeActive()\nCalled on Android in onResume()\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_LOCALE_CHANGED",
                short_name: "LOCALE_CHANGED",
                doc: Some("The user's locale preferences have changed.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_SYSTEM_THEME_CHANGED",
                short_name: "SYSTEM_THEME_CHANGED",
                doc: Some("The system theme changed\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_DISPLAY_ORIENTATION",
                short_name: "DISPLAY_ORIENTATION",
                doc: Some("Display orientation has changed to data1\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_DISPLAY_ADDED",
                short_name: "DISPLAY_ADDED",
                doc: Some("Display has been added to the system\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_DISPLAY_REMOVED",
                short_name: "DISPLAY_REMOVED",
                doc: Some("Display has been removed from the system\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_DISPLAY_MOVED",
                short_name: "DISPLAY_MOVED",
                doc: Some("Display has changed position\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_DISPLAY_DESKTOP_MODE_CHANGED",
                short_name: "DISPLAY_DESKTOP_MODE_CHANGED",
                doc: Some("Display has changed desktop mode\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_DISPLAY_CURRENT_MODE_CHANGED",
                short_name: "DISPLAY_CURRENT_MODE_CHANGED",
                doc: Some("Display has changed current mode\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_DISPLAY_CONTENT_SCALE_CHANGED",
                short_name: "DISPLAY_CONTENT_SCALE_CHANGED",
                doc: Some("Display has changed content scale\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_DISPLAY_FIRST",
                short_name: "DISPLAY_FIRST",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_DISPLAY_LAST",
                short_name: "DISPLAY_LAST",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_SHOWN",
                short_name: "WINDOW_SHOWN",
                doc: Some("Window has been shown\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_HIDDEN",
                short_name: "WINDOW_HIDDEN",
                doc: Some("Window has been hidden\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_EXPOSED",
                short_name: "WINDOW_EXPOSED",
                doc: Some("Window has been exposed and should be redrawn, and can be redrawn directly from event watchers for this event\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_MOVED",
                short_name: "WINDOW_MOVED",
                doc: Some("Window has been moved to data1, data2\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_RESIZED",
                short_name: "WINDOW_RESIZED",
                doc: Some("Window has been resized to data1xdata2\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED",
                short_name: "WINDOW_PIXEL_SIZE_CHANGED",
                doc: Some("The pixel size of the window has changed to data1xdata2\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_METAL_VIEW_RESIZED",
                short_name: "WINDOW_METAL_VIEW_RESIZED",
                doc: Some("The pixel size of a Metal view associated with the window has changed\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_MINIMIZED",
                short_name: "WINDOW_MINIMIZED",
                doc: Some("Window has been minimized\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_MAXIMIZED",
                short_name: "WINDOW_MAXIMIZED",
                doc: Some("Window has been maximized\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_RESTORED",
                short_name: "WINDOW_RESTORED",
                doc: Some("Window has been restored to normal size and position\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_MOUSE_ENTER",
                short_name: "WINDOW_MOUSE_ENTER",
                doc: Some("Window has gained mouse focus\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_MOUSE_LEAVE",
                short_name: "WINDOW_MOUSE_LEAVE",
                doc: Some("Window has lost mouse focus\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_FOCUS_GAINED",
                short_name: "WINDOW_FOCUS_GAINED",
                doc: Some("Window has gained keyboard focus\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_FOCUS_LOST",
                short_name: "WINDOW_FOCUS_LOST",
                doc: Some("Window has lost keyboard focus\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_CLOSE_REQUESTED",
                short_name: "WINDOW_CLOSE_REQUESTED",
                doc: Some("The window manager requests that the window be closed\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_HIT_TEST",
                short_name: "WINDOW_HIT_TEST",
                doc: Some("Window had a hit test that wasn't [`SDL_HITTEST_NORMAL`]\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_ICCPROF_CHANGED",
                short_name: "WINDOW_ICCPROF_CHANGED",
                doc: Some("The ICC profile of the window's display has changed\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_DISPLAY_CHANGED",
                short_name: "WINDOW_DISPLAY_CHANGED",
                doc: Some("Window has been moved to display data1\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_DISPLAY_SCALE_CHANGED",
                short_name: "WINDOW_DISPLAY_SCALE_CHANGED",
                doc: Some("Window display scale has been changed\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_SAFE_AREA_CHANGED",
                short_name: "WINDOW_SAFE_AREA_CHANGED",
                doc: Some("The window safe area has been changed\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_OCCLUDED",
                short_name: "WINDOW_OCCLUDED",
                doc: Some("The window has been occluded\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_ENTER_FULLSCREEN",
                short_name: "WINDOW_ENTER_FULLSCREEN",
                doc: Some("The window has entered fullscreen mode\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_LEAVE_FULLSCREEN",
                short_name: "WINDOW_LEAVE_FULLSCREEN",
                doc: Some("The window has left fullscreen mode\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_DESTROYED",
                short_name: "WINDOW_DESTROYED",
                doc: Some("The window with the associated ID is being or has been destroyed. If this message is being handled\nin an event watcher, the window handle is still valid and can still be used to retrieve any properties\nassociated with the window. Otherwise, the handle has already been destroyed and all resources\nassociated with it are invalid\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_HDR_STATE_CHANGED",
                short_name: "WINDOW_HDR_STATE_CHANGED",
                doc: Some("Window HDR properties have changed\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_FIRST",
                short_name: "WINDOW_FIRST",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_LAST",
                short_name: "WINDOW_LAST",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_KEY_DOWN",
                short_name: "KEY_DOWN",
                doc: Some("Key pressed\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_KEY_UP",
                short_name: "KEY_UP",
                doc: Some("Key released\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_TEXT_EDITING",
                short_name: "TEXT_EDITING",
                doc: Some("Keyboard text editing (composition)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_TEXT_INPUT",
                short_name: "TEXT_INPUT",
                doc: Some("Keyboard text input\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_KEYMAP_CHANGED",
                short_name: "KEYMAP_CHANGED",
                doc: Some("Keymap changed due to a system event such as an\ninput language or keyboard layout change.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_KEYBOARD_ADDED",
                short_name: "KEYBOARD_ADDED",
                doc: Some("A new keyboard has been inserted into the system\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_KEYBOARD_REMOVED",
                short_name: "KEYBOARD_REMOVED",
                doc: Some("A keyboard has been removed\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_TEXT_EDITING_CANDIDATES",
                short_name: "TEXT_EDITING_CANDIDATES",
                doc: Some("Keyboard text editing candidates\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_MOUSE_MOTION",
                short_name: "MOUSE_MOTION",
                doc: Some("Mouse moved\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_MOUSE_BUTTON_DOWN",
                short_name: "MOUSE_BUTTON_DOWN",
                doc: Some("Mouse button pressed\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_MOUSE_BUTTON_UP",
                short_name: "MOUSE_BUTTON_UP",
                doc: Some("Mouse button released\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_MOUSE_WHEEL",
                short_name: "MOUSE_WHEEL",
                doc: Some("Mouse wheel motion\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_MOUSE_ADDED",
                short_name: "MOUSE_ADDED",
                doc: Some("A new mouse has been inserted into the system\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_MOUSE_REMOVED",
                short_name: "MOUSE_REMOVED",
                doc: Some("A mouse has been removed\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_JOYSTICK_AXIS_MOTION",
                short_name: "JOYSTICK_AXIS_MOTION",
                doc: Some("Joystick axis motion\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_JOYSTICK_BALL_MOTION",
                short_name: "JOYSTICK_BALL_MOTION",
                doc: Some("Joystick trackball motion\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_JOYSTICK_HAT_MOTION",
                short_name: "JOYSTICK_HAT_MOTION",
                doc: Some("Joystick hat position change\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_JOYSTICK_BUTTON_DOWN",
                short_name: "JOYSTICK_BUTTON_DOWN",
                doc: Some("Joystick button pressed\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_JOYSTICK_BUTTON_UP",
                short_name: "JOYSTICK_BUTTON_UP",
                doc: Some("Joystick button released\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_JOYSTICK_ADDED",
                short_name: "JOYSTICK_ADDED",
                doc: Some("A new joystick has been inserted into the system\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_JOYSTICK_REMOVED",
                short_name: "JOYSTICK_REMOVED",
                doc: Some("An opened joystick has been removed\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_JOYSTICK_BATTERY_UPDATED",
                short_name: "JOYSTICK_BATTERY_UPDATED",
                doc: Some("Joystick battery level change\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_JOYSTICK_UPDATE_COMPLETE",
                short_name: "JOYSTICK_UPDATE_COMPLETE",
                doc: Some("Joystick update is complete\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_GAMEPAD_AXIS_MOTION",
                short_name: "GAMEPAD_AXIS_MOTION",
                doc: Some("Gamepad axis motion\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_GAMEPAD_BUTTON_DOWN",
                short_name: "GAMEPAD_BUTTON_DOWN",
                doc: Some("Gamepad button pressed\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_GAMEPAD_BUTTON_UP",
                short_name: "GAMEPAD_BUTTON_UP",
                doc: Some("Gamepad button released\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_GAMEPAD_ADDED",
                short_name: "GAMEPAD_ADDED",
                doc: Some("A new gamepad has been inserted into the system\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_GAMEPAD_REMOVED",
                short_name: "GAMEPAD_REMOVED",
                doc: Some("A gamepad has been removed\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_GAMEPAD_REMAPPED",
                short_name: "GAMEPAD_REMAPPED",
                doc: Some("The gamepad mapping was updated\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_GAMEPAD_TOUCHPAD_DOWN",
                short_name: "GAMEPAD_TOUCHPAD_DOWN",
                doc: Some("Gamepad touchpad was touched\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_GAMEPAD_TOUCHPAD_MOTION",
                short_name: "GAMEPAD_TOUCHPAD_MOTION",
                doc: Some("Gamepad touchpad finger was moved\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_GAMEPAD_TOUCHPAD_UP",
                short_name: "GAMEPAD_TOUCHPAD_UP",
                doc: Some("Gamepad touchpad finger was lifted\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_GAMEPAD_SENSOR_UPDATE",
                short_name: "GAMEPAD_SENSOR_UPDATE",
                doc: Some("Gamepad sensor was updated\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_GAMEPAD_UPDATE_COMPLETE",
                short_name: "GAMEPAD_UPDATE_COMPLETE",
                doc: Some("Gamepad update is complete\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_GAMEPAD_STEAM_HANDLE_UPDATED",
                short_name: "GAMEPAD_STEAM_HANDLE_UPDATED",
                doc: Some("Gamepad Steam handle has changed\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_FINGER_DOWN",
                short_name: "FINGER_DOWN",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_FINGER_UP",
                short_name: "FINGER_UP",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_FINGER_MOTION",
                short_name: "FINGER_MOTION",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_FINGER_CANCELED",
                short_name: "FINGER_CANCELED",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_CLIPBOARD_UPDATE",
                short_name: "CLIPBOARD_UPDATE",
                doc: Some("The clipboard or primary selection changed\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_DROP_FILE",
                short_name: "DROP_FILE",
                doc: Some("The system requests a file open\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_DROP_TEXT",
                short_name: "DROP_TEXT",
                doc: Some("text/plain drag-and-drop event\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_DROP_BEGIN",
                short_name: "DROP_BEGIN",
                doc: Some("A new set of drops is beginning (NULL filename)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_DROP_COMPLETE",
                short_name: "DROP_COMPLETE",
                doc: Some("Current set of drops is now complete (NULL filename)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_DROP_POSITION",
                short_name: "DROP_POSITION",
                doc: Some("Position while moving over the window\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_AUDIO_DEVICE_ADDED",
                short_name: "AUDIO_DEVICE_ADDED",
                doc: Some("A new audio device is available\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_AUDIO_DEVICE_REMOVED",
                short_name: "AUDIO_DEVICE_REMOVED",
                doc: Some("An audio device has been removed.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_AUDIO_DEVICE_FORMAT_CHANGED",
                short_name: "AUDIO_DEVICE_FORMAT_CHANGED",
                doc: Some("An audio device's format has been changed by the system.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_SENSOR_UPDATE",
                short_name: "SENSOR_UPDATE",
                doc: Some("A sensor was updated\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_PEN_PROXIMITY_IN",
                short_name: "PEN_PROXIMITY_IN",
                doc: Some("Pressure-sensitive pen has become available\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_PEN_PROXIMITY_OUT",
                short_name: "PEN_PROXIMITY_OUT",
                doc: Some("Pressure-sensitive pen has become unavailable\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_PEN_DOWN",
                short_name: "PEN_DOWN",
                doc: Some("Pressure-sensitive pen touched drawing surface\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_PEN_UP",
                short_name: "PEN_UP",
                doc: Some("Pressure-sensitive pen stopped touching drawing surface\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_PEN_BUTTON_DOWN",
                short_name: "PEN_BUTTON_DOWN",
                doc: Some("Pressure-sensitive pen button pressed\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_PEN_BUTTON_UP",
                short_name: "PEN_BUTTON_UP",
                doc: Some("Pressure-sensitive pen button released\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_PEN_MOTION",
                short_name: "PEN_MOTION",
                doc: Some("Pressure-sensitive pen is moving on the tablet\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_PEN_AXIS",
                short_name: "PEN_AXIS",
                doc: Some("Pressure-sensitive pen angle/pressure/etc changed\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_CAMERA_DEVICE_ADDED",
                short_name: "CAMERA_DEVICE_ADDED",
                doc: Some("A new camera device is available\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_CAMERA_DEVICE_REMOVED",
                short_name: "CAMERA_DEVICE_REMOVED",
                doc: Some("A camera device has been removed.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_CAMERA_DEVICE_APPROVED",
                short_name: "CAMERA_DEVICE_APPROVED",
                doc: Some("A camera device has been approved for use by the user.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_CAMERA_DEVICE_DENIED",
                short_name: "CAMERA_DEVICE_DENIED",
                doc: Some("A camera device has been denied for use by the user.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_RENDER_TARGETS_RESET",
                short_name: "RENDER_TARGETS_RESET",
                doc: Some("The render targets have been reset and their contents need to be updated\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_RENDER_DEVICE_RESET",
                short_name: "RENDER_DEVICE_RESET",
                doc: Some("The device has been reset and all textures need to be recreated\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_RENDER_DEVICE_LOST",
                short_name: "RENDER_DEVICE_LOST",
                doc: Some("The device has been lost and can't be recovered.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_PRIVATE0",
                short_name: "PRIVATE0",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_PRIVATE1",
                short_name: "PRIVATE1",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_PRIVATE2",
                short_name: "PRIVATE2",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_PRIVATE3",
                short_name: "PRIVATE3",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_POLL_SENTINEL",
                short_name: "POLL_SENTINEL",
                doc: Some("Signals the end of an event poll cycle\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_USER",
                short_name: "USER",
                doc: Some("Events [`SDL_EVENT_USER`] through [`SDL_EVENT_LAST`] are for your use,\nand should be allocated with [`SDL_RegisterEvents()`]\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_LAST",
                short_name: "LAST",
                doc: Some("*  This last event is only for bounding internal arrays\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_ENUM_PADDING",
                short_name: "ENUM_PADDING",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "events",
        kind: GroupKind::Enum,
        name: "SDL_EventAction",
        short_name: "EventAction",
        doc: Some("The type of action to request from [`SDL_PeepEvents()`].\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_ADDEVENT",
                short_name: "ADDEVENT",
                doc: Some("Add events to the back of the queue.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PEEKEVENT",
                short_name: "PEEKEVENT",
                doc: Some("Check but don't remove events from the queue front.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GETEVENT",
                short_name: "GETEVENT",
                doc: Some("Retrieve/remove events from the front of the queue.\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "filesystem",
        kind: GroupKind::Enum,
        name: "SDL_Folder",
        short_name: "Folder",
        doc: Some("The type of the OS-provided default folder for a specific purpose.\n\nNote that the Trash folder isn't included here, because trashing files\nusually involves extra OS-specific functionality to remember the file's\noriginal location.\n\nThe folders supported per platform are:\n\n|             | Windows | macOS/iOS | tvOS | Unix (XDG) | Haiku | Emscripten |\n| ----------- | ------- | --------- | ---- | ---------- | ----- | ---------- |\n| HOME        | X       | X         |      | X          | X     | X          |\n| DESKTOP     | X       | X         |      | X          | X     |            |\n| DOCUMENTS   | X       | X         |      | X          |       |            |\n| DOWNLOADS   | Vista+  | X         |      | X          |       |            |\n| MUSIC       | X       | X         |      | X          |       |            |\n| PICTURES    | X       | X         |      | X          |       |            |\n| PUBLICSHARE |         | X         |      | X          |       |            |\n| SAVEDGAMES  | Vista+  |           |      |            |       |            |\n| SCREENSHOTS | Vista+  |           |      |            |       |            |\n| TEMPLATES   | X       | X         |      | X          |       |            |\n| VIDEOS      | X       | X*        |      | X          |       |            |\n\nNote that on macOS/iOS, the Videos folder is called \"Movies\".\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_GetUserFolder`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_FOLDER_HOME",
                short_name: "HOME",
                doc: Some("The folder which contains all of the current user's data, preferences, and documents. It usually contains most of the other folders. If a requested folder does not exist, the home folder can be considered a safe fallback to store a user's documents.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_FOLDER_DESKTOP",
                short_name: "DESKTOP",
                doc: Some("The folder of files that are displayed on the desktop. Note that the existence of a desktop folder does not guarantee that the system does show icons on its desktop; certain GNU/Linux distros with a graphical environment may not have desktop icons.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_FOLDER_DOCUMENTS",
                short_name: "DOCUMENTS",
                doc: Some("User document files, possibly application-specific. This is a good place to save a user's projects.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_FOLDER_DOWNLOADS",
                short_name: "DOWNLOADS",
                doc: Some("Standard folder for user files downloaded from the internet.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_FOLDER_MUSIC",
                short_name: "MUSIC",
                doc: Some("Music files that can be played using a standard music player (mp3, ogg...).\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_FOLDER_PICTURES",
                short_name: "PICTURES",
                doc: Some("Image files that can be displayed using a standard viewer (png, jpg...).\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_FOLDER_PUBLICSHARE",
                short_name: "PUBLICSHARE",
                doc: Some("Files that are meant to be shared with other users on the same computer.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_FOLDER_SAVEDGAMES",
                short_name: "SAVEDGAMES",
                doc: Some("Save files for games.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_FOLDER_SCREENSHOTS",
                short_name: "SCREENSHOTS",
                doc: Some("Application screenshots.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_FOLDER_TEMPLATES",
                short_name: "TEMPLATES",
                doc: Some("Template files to be used when the user requests the desktop environment to create a new file in a certain folder, such as \"New Text File.txt\".  Any file in the Templates folder can be used as a starting point for a new file.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_FOLDER_VIDEOS",
                short_name: "VIDEOS",
                doc: Some("Video files that can be played using a standard video player (mp4, webm...).\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_FOLDER_COUNT",
                short_name: "COUNT",
                doc: Some("Total number of types in this enum, not a folder type by itself.\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "filesystem",
        kind: GroupKind::Enum,
        name: "SDL_PathType",
        short_name: "PathType",
        doc: Some("Types of filesystem entries.\n\nNote that there may be other sorts of items on a filesystem: devices,\nsymlinks, named pipes, etc. They are currently reported as\n[`SDL_PATHTYPE_OTHER`].\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_PathInfo`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_PATHTYPE_NONE",
                short_name: "NONE",
                doc: Some("path does not exist\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PATHTYPE_FILE",
                short_name: "FILE",
                doc: Some("a normal file\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PATHTYPE_DIRECTORY",
                short_name: "DIRECTORY",
                doc: Some("a directory\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PATHTYPE_OTHER",
                short_name: "OTHER",
                doc: Some("something completely different like a device node (not a symlink, those are always followed)\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "filesystem",
        kind: GroupKind::Flags,
        name: "SDL_GlobFlags",
        short_name: "GlobFlags",
        doc: Some("Flags for path matching.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n\n## See also\n- [`SDL_GlobDirectory`]\n- [`SDL_GlobStorageDirectory`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GLOB_CASEINSENSITIVE",
                short_name: "CASEINSENSITIVE",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "filesystem",
        kind: GroupKind::Enum,
        name: "SDL_EnumerationResult",
        short_name: "EnumerationResult",
        doc: Some("Possible results from an enumeration callback.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_EnumerateDirectoryCallback`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_ENUM_CONTINUE",
                short_name: "CONTINUE",
                doc: Some("Value that requests that enumeration continue.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_ENUM_SUCCESS",
                short_name: "SUCCESS",
                doc: Some("Value that requests that enumeration stop, successfully.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_ENUM_FAILURE",
                short_name: "FAILURE",
                doc: Some("Value that requests that enumeration stop, as a failure.\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "gamepad",
        kind: GroupKind::Enum,
        name: "SDL_GamepadType",
        short_name: "GamepadType",
        doc: Some("Standard gamepad types.\n\nThis type does not necessarily map to first-party controllers from\nMicrosoft/Sony/Nintendo; in many cases, third-party controllers can report\nas these, either because they were designed for a specific console, or they\nsimply most closely match that console's controllers (does it have A/B/X/Y\nbuttons or X/O/Square/Triangle? Does it have a touchpad? etc).\n"),
        available_since: None,
        values: &[
            GroupValue {
                name: "SDL_GAMEPAD_TYPE_UNKNOWN",
                short_name: "UNKNOWN",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_TYPE_STANDARD",
                short_name: "STANDARD",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_TYPE_XBOX360",
                short_name: "XBOX360",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_TYPE_XBOXONE",
                short_name: "XBOXONE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_TYPE_PS3",
                short_name: "PS3",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_TYPE_PS4",
                short_name: "PS4",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_TYPE_PS5",
                short_name: "PS5",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_PRO",
                short_name: "NINTENDO_SWITCH_PRO",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_LEFT",
                short_name: "NINTENDO_SWITCH_JOYCON_LEFT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT",
                short_name: "NINTENDO_SWITCH_JOYCON_RIGHT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_PAIR",
                short_name: "NINTENDO_SWITCH_JOYCON_PAIR",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_TYPE_COUNT",
                short_name: "COUNT",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "gamepad",
        kind: GroupKind::Enum,
        name: "SDL_GamepadButton",
        short_name: "GamepadButton",
        doc: Some("The list of buttons available on a gamepad\n\nFor controllers that use a diamond pattern for the face buttons, the\nsouth/east/west/north buttons below correspond to the locations in the\ndiamond pattern. For Xbox controllers, this would be A/B/X/Y, for Nintendo\nSwitch controllers, this would be B/A/Y/X, for PlayStation controllers this\nwould be Cross/Circle/Square/Triangle.\n\nFor controllers that don't use a diamond pattern for the face buttons, the\nsouth/east/west/north buttons indicate the buttons labeled A, B, C, D, or\n1, 2, 3, 4, or for controllers that aren't labeled, they are the primary,\nsecondary, etc. buttons.\n\nThe activate action is often the south button and the cancel action is\noften the east button, but in some regions this is reversed, so your game\nshould allow remapping actions based on user preferences.\n\nYou can query the labels for the face buttons using\n[`SDL_GetGamepadButtonLabel()`]\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_INVALID",
                short_name: "INVALID",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_SOUTH",
                short_name: "SOUTH",
                doc: Some("Bottom face button (e.g. Xbox A button)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_EAST",
                short_name: "EAST",
                doc: Some("Right face button (e.g. Xbox B button)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_WEST",
                short_name: "WEST",
                doc: Some("Left face button (e.g. Xbox X button)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_NORTH",
                short_name: "NORTH",
                doc: Some("Top face button (e.g. Xbox Y button)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_BACK",
                short_name: "BACK",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_GUIDE",
                short_name: "GUIDE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_START",
                short_name: "START",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_LEFT_STICK",
                short_name: "LEFT_STICK",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_RIGHT_STICK",
                short_name: "RIGHT_STICK",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_LEFT_SHOULDER",
                short_name: "LEFT_SHOULDER",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_RIGHT_SHOULDER",
                short_name: "RIGHT_SHOULDER",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_DPAD_UP",
                short_name: "DPAD_UP",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_DPAD_DOWN",
                short_name: "DPAD_DOWN",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_DPAD_LEFT",
                short_name: "DPAD_LEFT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_DPAD_RIGHT",
                short_name: "DPAD_RIGHT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_MISC1",
                short_name: "MISC1",
                doc: Some("Additional button (e.g. Xbox Series X share button, PS5 microphone button, Nintendo Switch Pro capture button, Amazon Luna microphone button, Google Stadia capture button)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_RIGHT_PADDLE1",
                short_name: "RIGHT_PADDLE1",
                doc: Some("Upper or primary paddle, under your right hand (e.g. Xbox Elite paddle P1)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_LEFT_PADDLE1",
                short_name: "LEFT_PADDLE1",
                doc: Some("Upper or primary paddle, under your left hand (e.g. Xbox Elite paddle P3)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_RIGHT_PADDLE2",
                short_name: "RIGHT_PADDLE2",
                doc: Some("Lower or secondary paddle, under your right hand (e.g. Xbox Elite paddle P2)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_LEFT_PADDLE2",
                short_name: "LEFT_PADDLE2",
                doc: Some("Lower or secondary paddle, under your left hand (e.g. Xbox Elite paddle P4)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_TOUCHPAD",
                short_name: "TOUCHPAD",
                doc: Some("PS4/PS5 touchpad button\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_MISC2",
                short_name: "MISC2",
                doc: Some("Additional button\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_MISC3",
                short_name: "MISC3",
                doc: Some("Additional button\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_MISC4",
                short_name: "MISC4",
                doc: Some("Additional button\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_MISC5",
                short_name: "MISC5",
                doc: Some("Additional button\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_MISC6",
                short_name: "MISC6",
                doc: Some("Additional button\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_COUNT",
                short_name: "COUNT",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "gamepad",
        kind: GroupKind::Enum,
        name: "SDL_GamepadButtonLabel",
        short_name: "GamepadButtonLabel",
        doc: Some("The set of gamepad button labels\n\nThis isn't a complete set, just the face buttons to make it easy to show\nbutton prompts.\n\nFor a complete set, you should look at the button and gamepad type and have\na set of symbols that work well with your art style.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_LABEL_UNKNOWN",
                short_name: "UNKNOWN",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_LABEL_A",
                short_name: "A",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_LABEL_B",
                short_name: "B",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_LABEL_X",
                short_name: "X",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_LABEL_Y",
                short_name: "Y",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_LABEL_CROSS",
                short_name: "CROSS",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_LABEL_CIRCLE",
                short_name: "CIRCLE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_LABEL_SQUARE",
                short_name: "SQUARE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_LABEL_TRIANGLE",
                short_name: "TRIANGLE",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "gamepad",
        kind: GroupKind::Enum,
        name: "SDL_GamepadAxis",
        short_name: "GamepadAxis",
        doc: Some("The list of axes available on a gamepad\n\nThumbstick axis values range from [`SDL_JOYSTICK_AXIS_MIN`] to\n[`SDL_JOYSTICK_AXIS_MAX`], and are centered within ~8000 of zero, though\nadvanced UI will allow users to set or autodetect the dead zone, which\nvaries between gamepads.\n\nTrigger axis values range from 0 (released) to [`SDL_JOYSTICK_AXIS_MAX`] (fully\npressed) when reported by [`SDL_GetGamepadAxis()`]. Note that this is not the\nsame range that will be reported by the lower-level [`SDL_GetJoystickAxis()`].\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GAMEPAD_AXIS_INVALID",
                short_name: "INVALID",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_AXIS_LEFTX",
                short_name: "LEFTX",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_AXIS_LEFTY",
                short_name: "LEFTY",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_AXIS_RIGHTX",
                short_name: "RIGHTX",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_AXIS_RIGHTY",
                short_name: "RIGHTY",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_AXIS_LEFT_TRIGGER",
                short_name: "LEFT_TRIGGER",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_AXIS_RIGHT_TRIGGER",
                short_name: "RIGHT_TRIGGER",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_AXIS_COUNT",
                short_name: "COUNT",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "gamepad",
        kind: GroupKind::Enum,
        name: "SDL_GamepadBindingType",
        short_name: "GamepadBindingType",
        doc: Some("Types of gamepad control bindings.\n\nA gamepad is a collection of bindings that map arbitrary joystick buttons,\naxes and hat switches to specific positions on a generic console-style\ngamepad. This enum is used as part of [`SDL_GamepadBinding`] to specify those\nmappings.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GAMEPAD_BINDTYPE_NONE",
                short_name: "NONE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BINDTYPE_BUTTON",
                short_name: "BUTTON",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BINDTYPE_AXIS",
                short_name: "AXIS",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BINDTYPE_HAT",
                short_name: "HAT",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Enum,
        name: "SDL_GPUPrimitiveType",
        short_name: "GPUPrimitiveType",
        doc: Some("Specifies the primitive topology of a graphics pipeline.\n\nIf you are using POINTLIST you must include a point size output in the\nvertex shader.\n\n- For HLSL compiling to SPIRV you must decorate a float output with\n\\[\\[vk::builtin(\"PointSize\")\\]\\].\n- For GLSL you must set the gl_PointSize builtin.\n- For MSL you must include a float output with the \\[\\[point_size\\]\\]\ndecorator.\n\nNote that sized point topology is totally unsupported on D3D12. Any size\nother than 1 will be ignored. In general, you should avoid using point\ntopology for both compatibility and performance reasons. You WILL regret\nusing it.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_CreateGPUGraphicsPipeline`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_PRIMITIVETYPE_TRIANGLELIST",
                short_name: "TRIANGLELIST",
                doc: Some("A series of separate triangles.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_PRIMITIVETYPE_TRIANGLESTRIP",
                short_name: "TRIANGLESTRIP",
                doc: Some("A series of connected triangles.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_PRIMITIVETYPE_LINELIST",
                short_name: "LINELIST",
                doc: Some("A series of separate lines.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_PRIMITIVETYPE_LINESTRIP",
                short_name: "LINESTRIP",
                doc: Some("A series of connected lines.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_PRIMITIVETYPE_POINTLIST",
                short_name: "POINTLIST",
                doc: Some("A series of separate points.\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Enum,
        name: "SDL_GPULoadOp",
        short_name: "GPULoadOp",
        doc: Some("Specifies how the contents of a texture attached to a render pass are\ntreated at the beginning of the render pass.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_BeginGPURenderPass`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_LOADOP_LOAD",
                short_name: "LOAD",
                doc: Some("The previous contents of the texture will be preserved.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_LOADOP_CLEAR",
                short_name: "CLEAR",
                doc: Some("The contents of the texture will be cleared to a color.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_LOADOP_DONT_CARE",
                short_name: "DONT_CARE",
                doc: Some("The previous contents of the texture need not be preserved. The contents will be undefined.\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Enum,
        name: "SDL_GPUStoreOp",
        short_name: "GPUStoreOp",
        doc: Some("Specifies how the contents of a texture attached to a render pass are\ntreated at the end of the render pass.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_BeginGPURenderPass`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_STOREOP_STORE",
                short_name: "STORE",
                doc: Some("The contents generated during the render pass will be written to memory.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_STOREOP_DONT_CARE",
                short_name: "DONT_CARE",
                doc: Some("The contents generated during the render pass are not needed and may be discarded. The contents will be undefined.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_STOREOP_RESOLVE",
                short_name: "RESOLVE",
                doc: Some("The multisample contents generated during the render pass will be resolved to a non-multisample texture. The contents in the multisample texture may then be discarded and will be undefined.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_STOREOP_RESOLVE_AND_STORE",
                short_name: "RESOLVE_AND_STORE",
                doc: Some("The multisample contents generated during the render pass will be resolved to a non-multisample texture. The contents in the multisample texture will be written to memory.\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Enum,
        name: "SDL_GPUIndexElementSize",
        short_name: "GPUIndexElementSize",
        doc: Some("Specifies the size of elements in an index buffer.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_CreateGPUGraphicsPipeline`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_INDEXELEMENTSIZE_16BIT",
                short_name: "_16BIT",
                doc: Some("The index elements are 16-bit.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_INDEXELEMENTSIZE_32BIT",
                short_name: "_32BIT",
                doc: Some("The index elements are 32-bit.\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Enum,
        name: "SDL_GPUTextureFormat",
        short_name: "GPUTextureFormat",
        doc: Some("Specifies the pixel format of a texture.\n\nTexture format support varies depending on driver, hardware, and usage\nflags. In general, you should use [`SDL_GPUTextureSupportsFormat`] to query if\na format is supported before using it. However, there are a few guaranteed\nformats.\n\nFIXME: Check universal support for 32-bit component formats FIXME: Check\nuniversal support for SIMULTANEOUS_READ_WRITE\n\nFor SAMPLER usage, the following formats are universally supported:\n\n- R8G8B8A8_UNORM\n- B8G8R8A8_UNORM\n- R8_UNORM\n- R8_SNORM\n- R8G8_UNORM\n- R8G8_SNORM\n- R8G8B8A8_SNORM\n- R16_FLOAT\n- R16G16_FLOAT\n- R16G16B16A16_FLOAT\n- R32_FLOAT\n- R32G32_FLOAT\n- R32G32B32A32_FLOAT\n- R11G11B10_UFLOAT\n- R8G8B8A8_UNORM_SRGB\n- B8G8R8A8_UNORM_SRGB\n- D16_UNORM\n\nFor COLOR_TARGET usage, the following formats are universally supported:\n\n- R8G8B8A8_UNORM\n- B8G8R8A8_UNORM\n- R8_UNORM\n- R16_FLOAT\n- R16G16_FLOAT\n- R16G16B16A16_FLOAT\n- R32_FLOAT\n- R32G32_FLOAT\n- R32G32B32A32_FLOAT\n- R8_UINT\n- R8G8_UINT\n- R8G8B8A8_UINT\n- R16_UINT\n- R16G16_UINT\n- R16G16B16A16_UINT\n- R8_INT\n- R8G8_INT\n- R8G8B8A8_INT\n- R16_INT\n- R16G16_INT\n- R16G16B16A16_INT\n- R8G8B8A8_UNORM_SRGB\n- B8G8R8A8_UNORM_SRGB\n\nFor STORAGE usages, the following formats are universally supported:\n\n- R8G8B8A8_UNORM\n- R8G8B8A8_SNORM\n- R16G16B16A16_FLOAT\n- R32_FLOAT\n- R32G32_FLOAT\n- R32G32B32A32_FLOAT\n- R8G8B8A8_UINT\n- R16G16B16A16_UINT\n- R8G8B8A8_INT\n- R16G16B16A16_INT\n\nFor DEPTH_STENCIL_TARGET usage, the following formats are universally\nsupported:\n\n- D16_UNORM\n- Either (but not necessarily both!) D24_UNORM or D32_FLOAT\n- Either (but not necessarily both!) D24_UNORM_S8_UINT or D32_FLOAT_S8_UINT\n\nUnless D16_UNORM is sufficient for your purposes, always check which of\nD24/D32 is supported before creating a depth-stencil texture!\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_CreateGPUTexture`]\n- [`SDL_GPUTextureSupportsFormat`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_INVALID",
                short_name: "INVALID",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_A8_UNORM",
                short_name: "A8_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R8_UNORM",
                short_name: "R8_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R8G8_UNORM",
                short_name: "R8G8_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UNORM",
                short_name: "R8G8B8A8_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R16_UNORM",
                short_name: "R16_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R16G16_UNORM",
                short_name: "R16G16_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R16G16B16A16_UNORM",
                short_name: "R16G16B16A16_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R10G10B10A2_UNORM",
                short_name: "R10G10B10A2_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_B5G6R5_UNORM",
                short_name: "B5G6R5_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_B5G5R5A1_UNORM",
                short_name: "B5G5R5A1_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_B4G4R4A4_UNORM",
                short_name: "B4G4R4A4_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_B8G8R8A8_UNORM",
                short_name: "B8G8R8A8_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_BC1_RGBA_UNORM",
                short_name: "BC1_RGBA_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_BC2_RGBA_UNORM",
                short_name: "BC2_RGBA_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_BC3_RGBA_UNORM",
                short_name: "BC3_RGBA_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_BC4_R_UNORM",
                short_name: "BC4_R_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_BC5_RG_UNORM",
                short_name: "BC5_RG_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_BC7_RGBA_UNORM",
                short_name: "BC7_RGBA_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_BC6H_RGB_FLOAT",
                short_name: "BC6H_RGB_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_BC6H_RGB_UFLOAT",
                short_name: "BC6H_RGB_UFLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R8_SNORM",
                short_name: "R8_SNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R8G8_SNORM",
                short_name: "R8G8_SNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R8G8B8A8_SNORM",
                short_name: "R8G8B8A8_SNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R16_SNORM",
                short_name: "R16_SNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R16G16_SNORM",
                short_name: "R16G16_SNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R16G16B16A16_SNORM",
                short_name: "R16G16B16A16_SNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R16_FLOAT",
                short_name: "R16_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R16G16_FLOAT",
                short_name: "R16G16_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R16G16B16A16_FLOAT",
                short_name: "R16G16B16A16_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R32_FLOAT",
                short_name: "R32_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R32G32_FLOAT",
                short_name: "R32G32_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R32G32B32A32_FLOAT",
                short_name: "R32G32B32A32_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R11G11B10_UFLOAT",
                short_name: "R11G11B10_UFLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R8_UINT",
                short_name: "R8_UINT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R8G8_UINT",
                short_name: "R8G8_UINT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UINT",
                short_name: "R8G8B8A8_UINT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R16_UINT",
                short_name: "R16_UINT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R16G16_UINT",
                short_name: "R16G16_UINT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R16G16B16A16_UINT",
                short_name: "R16G16B16A16_UINT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R32_UINT",
                short_name: "R32_UINT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R32G32_UINT",
                short_name: "R32G32_UINT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R32G32B32A32_UINT",
                short_name: "R32G32B32A32_UINT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R8_INT",
                short_name: "R8_INT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R8G8_INT",
                short_name: "R8G8_INT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R8G8B8A8_INT",
                short_name: "R8G8B8A8_INT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R16_INT",
                short_name: "R16_INT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R16G16_INT",
                short_name: "R16G16_INT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R16G16B16A16_INT",
                short_name: "R16G16B16A16_INT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R32_INT",
                short_name: "R32_INT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R32G32_INT",
                short_name: "R32G32_INT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R32G32B32A32_INT",
                short_name: "R32G32B32A32_INT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UNORM_SRGB",
                short_name: "R8G8B8A8_UNORM_SRGB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_B8G8R8A8_UNORM_SRGB",
                short_name: "B8G8R8A8_UNORM_SRGB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_BC1_RGBA_UNORM_SRGB",
                short_name: "BC1_RGBA_UNORM_SRGB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_BC2_RGBA_UNORM_SRGB",
                short_name: "BC2_RGBA_UNORM_SRGB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_BC3_RGBA_UNORM_SRGB",
                short_name: "BC3_RGBA_UNORM_SRGB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_BC7_RGBA_UNORM_SRGB",
                short_name: "BC7_RGBA_UNORM_SRGB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_D16_UNORM",
                short_name: "D16_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_D24_UNORM",
                short_name: "D24_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_D32_FLOAT",
                short_name: "D32_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_D24_UNORM_S8_UINT",
                short_name: "D24_UNORM_S8_UINT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_D32_FLOAT_S8_UINT",
                short_name: "D32_FLOAT_S8_UINT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_4x4_UNORM",
                short_name: "ASTC_4x4_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_5x4_UNORM",
                short_name: "ASTC_5x4_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_5x5_UNORM",
                short_name: "ASTC_5x5_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_6x5_UNORM",
                short_name: "ASTC_6x5_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_6x6_UNORM",
                short_name: "ASTC_6x6_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_8x5_UNORM",
                short_name: "ASTC_8x5_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_8x6_UNORM",
                short_name: "ASTC_8x6_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_8x8_UNORM",
                short_name: "ASTC_8x8_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_10x5_UNORM",
                short_name: "ASTC_10x5_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_10x6_UNORM",
                short_name: "ASTC_10x6_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_10x8_UNORM",
                short_name: "ASTC_10x8_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_10x10_UNORM",
                short_name: "ASTC_10x10_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_12x10_UNORM",
                short_name: "ASTC_12x10_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_12x12_UNORM",
                short_name: "ASTC_12x12_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_4x4_UNORM_SRGB",
                short_name: "ASTC_4x4_UNORM_SRGB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_5x4_UNORM_SRGB",
                short_name: "ASTC_5x4_UNORM_SRGB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_5x5_UNORM_SRGB",
                short_name: "ASTC_5x5_UNORM_SRGB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_6x5_UNORM_SRGB",
                short_name: "ASTC_6x5_UNORM_SRGB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_6x6_UNORM_SRGB",
                short_name: "ASTC_6x6_UNORM_SRGB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_8x5_UNORM_SRGB",
                short_name: "ASTC_8x5_UNORM_SRGB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_8x6_UNORM_SRGB",
                short_name: "ASTC_8x6_UNORM_SRGB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_8x8_UNORM_SRGB",
                short_name: "ASTC_8x8_UNORM_SRGB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_10x5_UNORM_SRGB",
                short_name: "ASTC_10x5_UNORM_SRGB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_10x6_UNORM_SRGB",
                short_name: "ASTC_10x6_UNORM_SRGB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_10x8_UNORM_SRGB",
                short_name: "ASTC_10x8_UNORM_SRGB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_10x10_UNORM_SRGB",
                short_name: "ASTC_10x10_UNORM_SRGB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_12x10_UNORM_SRGB",
                short_name: "ASTC_12x10_UNORM_SRGB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_12x12_UNORM_SRGB",
                short_name: "ASTC_12x12_UNORM_SRGB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_4x4_FLOAT",
                short_name: "ASTC_4x4_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_5x4_FLOAT",
                short_name: "ASTC_5x4_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_5x5_FLOAT",
                short_name: "ASTC_5x5_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_6x5_FLOAT",
                short_name: "ASTC_6x5_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_6x6_FLOAT",
                short_name: "ASTC_6x6_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_8x5_FLOAT",
                short_name: "ASTC_8x5_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_8x6_FLOAT",
                short_name: "ASTC_8x6_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_8x8_FLOAT",
                short_name: "ASTC_8x8_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_10x5_FLOAT",
                short_name: "ASTC_10x5_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_10x6_FLOAT",
                short_name: "ASTC_10x6_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_10x8_FLOAT",
                short_name: "ASTC_10x8_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_10x10_FLOAT",
                short_name: "ASTC_10x10_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_12x10_FLOAT",
                short_name: "ASTC_12x10_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_12x12_FLOAT",
                short_name: "ASTC_12x12_FLOAT",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Flags,
        name: "SDL_GPUTextureUsageFlags",
        short_name: "GPUTextureUsageFlags",
        doc: Some("Specifies how a texture is intended to be used by the client.\n\nA texture must have at least one usage flag. Note that some usage flag\ncombinations are invalid.\n\nWith regards to compute storage usage, READ | WRITE means that you can have\nshader A that only writes into the texture and shader B that only reads\nfrom the texture and bind the same texture to either shader respectively.\nSIMULTANEOUS means that you can do reads and writes within the same shader\nor compute pass. It also implies that atomic ops can be used, since those\nare read-modify-write operations. If you use SIMULTANEOUS, you are\nresponsible for avoiding data races, as there is no data synchronization\nwithin a compute pass. Note that SIMULTANEOUS usage is only supported by a\nlimited number of texture formats.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n\n## See also\n- [`SDL_CreateGPUTexture`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_TEXTUREUSAGE_SAMPLER",
                short_name: "SAMPLER",
                doc: Some("Texture supports sampling.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREUSAGE_COLOR_TARGET",
                short_name: "COLOR_TARGET",
                doc: Some("Texture is a color render target.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREUSAGE_DEPTH_STENCIL_TARGET",
                short_name: "DEPTH_STENCIL_TARGET",
                doc: Some("Texture is a depth stencil target.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREUSAGE_GRAPHICS_STORAGE_READ",
                short_name: "GRAPHICS_STORAGE_READ",
                doc: Some("Texture supports storage reads in graphics stages.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREUSAGE_COMPUTE_STORAGE_READ",
                short_name: "COMPUTE_STORAGE_READ",
                doc: Some("Texture supports storage reads in the compute stage.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREUSAGE_COMPUTE_STORAGE_WRITE",
                short_name: "COMPUTE_STORAGE_WRITE",
                doc: Some("Texture supports storage writes in the compute stage.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREUSAGE_COMPUTE_STORAGE_SIMULTANEOUS_READ_WRITE",
                short_name: "COMPUTE_STORAGE_SIMULTANEOUS_READ_WRITE",
                doc: Some("Texture supports reads and writes in the same compute shader. This is NOT equivalent to READ | WRITE.\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Enum,
        name: "SDL_GPUTextureType",
        short_name: "GPUTextureType",
        doc: Some("Specifies the type of a texture.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_CreateGPUTexture`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_TEXTURETYPE_2D",
                short_name: "_2D",
                doc: Some("The texture is a 2-dimensional image.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTURETYPE_2D_ARRAY",
                short_name: "_2D_ARRAY",
                doc: Some("The texture is a 2-dimensional array image.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTURETYPE_3D",
                short_name: "_3D",
                doc: Some("The texture is a 3-dimensional image.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTURETYPE_CUBE",
                short_name: "CUBE",
                doc: Some("The texture is a cube image.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTURETYPE_CUBE_ARRAY",
                short_name: "CUBE_ARRAY",
                doc: Some("The texture is a cube array image.\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Enum,
        name: "SDL_GPUSampleCount",
        short_name: "GPUSampleCount",
        doc: Some("Specifies the sample count of a texture.\n\nUsed in multisampling. Note that this value only applies when the texture\nis used as a render target.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_CreateGPUTexture`]\n- [`SDL_GPUTextureSupportsSampleCount`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_SAMPLECOUNT_1",
                short_name: "_1",
                doc: Some("No multisampling.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_SAMPLECOUNT_2",
                short_name: "_2",
                doc: Some("MSAA 2x\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_SAMPLECOUNT_4",
                short_name: "_4",
                doc: Some("MSAA 4x\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_SAMPLECOUNT_8",
                short_name: "_8",
                doc: Some("MSAA 8x\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Enum,
        name: "SDL_GPUCubeMapFace",
        short_name: "GPUCubeMapFace",
        doc: Some("Specifies the face of a cube map.\n\nCan be passed in as the layer field in texture-related structs.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_CUBEMAPFACE_POSITIVEX",
                short_name: "POSITIVEX",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_CUBEMAPFACE_NEGATIVEX",
                short_name: "NEGATIVEX",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_CUBEMAPFACE_POSITIVEY",
                short_name: "POSITIVEY",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_CUBEMAPFACE_NEGATIVEY",
                short_name: "NEGATIVEY",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_CUBEMAPFACE_POSITIVEZ",
                short_name: "POSITIVEZ",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_CUBEMAPFACE_NEGATIVEZ",
                short_name: "NEGATIVEZ",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Flags,
        name: "SDL_GPUBufferUsageFlags",
        short_name: "GPUBufferUsageFlags",
        doc: Some("Specifies how a buffer is intended to be used by the client.\n\nA buffer must have at least one usage flag. Note that some usage flag\ncombinations are invalid.\n\nUnlike textures, READ | WRITE can be used for simultaneous read-write\nusage. The same data synchronization concerns as textures apply.\n\nIf you use a STORAGE flag, the data in the buffer must respect std140\nlayout conventions. In practical terms this means you must ensure that vec3\nand vec4 fields are 16-byte aligned.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n\n## See also\n- [`SDL_CreateGPUBuffer`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_BUFFERUSAGE_VERTEX",
                short_name: "VERTEX",
                doc: Some("Buffer is a vertex buffer.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_BUFFERUSAGE_INDEX",
                short_name: "INDEX",
                doc: Some("Buffer is an index buffer.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_BUFFERUSAGE_INDIRECT",
                short_name: "INDIRECT",
                doc: Some("Buffer is an indirect buffer.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_BUFFERUSAGE_GRAPHICS_STORAGE_READ",
                short_name: "GRAPHICS_STORAGE_READ",
                doc: Some("Buffer supports storage reads in graphics stages.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_BUFFERUSAGE_COMPUTE_STORAGE_READ",
                short_name: "COMPUTE_STORAGE_READ",
                doc: Some("Buffer supports storage reads in the compute stage.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_BUFFERUSAGE_COMPUTE_STORAGE_WRITE",
                short_name: "COMPUTE_STORAGE_WRITE",
                doc: Some("Buffer supports storage writes in the compute stage.\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Enum,
        name: "SDL_GPUTransferBufferUsage",
        short_name: "GPUTransferBufferUsage",
        doc: Some("Specifies how a transfer buffer is intended to be used by the client.\n\nNote that mapping and copying FROM an upload transfer buffer or TO a\ndownload transfer buffer is undefined behavior.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_CreateGPUTransferBuffer`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_TRANSFERBUFFERUSAGE_UPLOAD",
                short_name: "UPLOAD",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TRANSFERBUFFERUSAGE_DOWNLOAD",
                short_name: "DOWNLOAD",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Enum,
        name: "SDL_GPUShaderStage",
        short_name: "GPUShaderStage",
        doc: Some("Specifies which stage a shader program corresponds to.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_CreateGPUShader`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_SHADERSTAGE_VERTEX",
                short_name: "VERTEX",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_SHADERSTAGE_FRAGMENT",
                short_name: "FRAGMENT",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Flags,
        name: "SDL_GPUShaderFormat",
        short_name: "GPUShaderFormat",
        doc: Some("Specifies the format of shader code.\n\nEach format corresponds to a specific backend that accepts it.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n\n## See also\n- [`SDL_CreateGPUShader`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_SHADERFORMAT_INVALID",
                short_name: "INVALID",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_SHADERFORMAT_PRIVATE",
                short_name: "PRIVATE",
                doc: Some("Shaders for NDA'd platforms.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_SHADERFORMAT_SPIRV",
                short_name: "SPIRV",
                doc: Some("SPIR-V shaders for Vulkan.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_SHADERFORMAT_DXBC",
                short_name: "DXBC",
                doc: Some("DXBC SM5_1 shaders for D3D12.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_SHADERFORMAT_DXIL",
                short_name: "DXIL",
                doc: Some("DXIL SM6_0 shaders for D3D12.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_SHADERFORMAT_MSL",
                short_name: "MSL",
                doc: Some("MSL shaders for Metal.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_SHADERFORMAT_METALLIB",
                short_name: "METALLIB",
                doc: Some("Precompiled metallib shaders for Metal.\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Enum,
        name: "SDL_GPUVertexElementFormat",
        short_name: "GPUVertexElementFormat",
        doc: Some("Specifies the format of a vertex attribute.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_CreateGPUGraphicsPipeline`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_INVALID",
                short_name: "INVALID",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_INT",
                short_name: "INT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_INT2",
                short_name: "INT2",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_INT3",
                short_name: "INT3",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_INT4",
                short_name: "INT4",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_UINT",
                short_name: "UINT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_UINT2",
                short_name: "UINT2",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_UINT3",
                short_name: "UINT3",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_UINT4",
                short_name: "UINT4",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_FLOAT",
                short_name: "FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_FLOAT2",
                short_name: "FLOAT2",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_FLOAT3",
                short_name: "FLOAT3",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_FLOAT4",
                short_name: "FLOAT4",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_BYTE2",
                short_name: "BYTE2",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_BYTE4",
                short_name: "BYTE4",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_UBYTE2",
                short_name: "UBYTE2",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_UBYTE4",
                short_name: "UBYTE4",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_BYTE2_NORM",
                short_name: "BYTE2_NORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_BYTE4_NORM",
                short_name: "BYTE4_NORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_UBYTE2_NORM",
                short_name: "UBYTE2_NORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_UBYTE4_NORM",
                short_name: "UBYTE4_NORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_SHORT2",
                short_name: "SHORT2",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_SHORT4",
                short_name: "SHORT4",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_USHORT2",
                short_name: "USHORT2",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_USHORT4",
                short_name: "USHORT4",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_SHORT2_NORM",
                short_name: "SHORT2_NORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_SHORT4_NORM",
                short_name: "SHORT4_NORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_USHORT2_NORM",
                short_name: "USHORT2_NORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_USHORT4_NORM",
                short_name: "USHORT4_NORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_HALF2",
                short_name: "HALF2",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_HALF4",
                short_name: "HALF4",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Enum,
        name: "SDL_GPUVertexInputRate",
        short_name: "GPUVertexInputRate",
        doc: Some("Specifies the rate at which vertex attributes are pulled from buffers.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_CreateGPUGraphicsPipeline`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_VERTEXINPUTRATE_VERTEX",
                short_name: "VERTEX",
                doc: Some("Attribute addressing is a function of the vertex index.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXINPUTRATE_INSTANCE",
                short_name: "INSTANCE",
                doc: Some("Attribute addressing is a function of the instance index.\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Enum,
        name: "SDL_GPUFillMode",
        short_name: "GPUFillMode",
        doc: Some("Specifies the fill mode of the graphics pipeline.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_CreateGPUGraphicsPipeline`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_FILLMODE_FILL",
                short_name: "FILL",
                doc: Some("Polygons will be rendered via rasterization.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_FILLMODE_LINE",
                short_name: "LINE",
                doc: Some("Polygon edges will be drawn as line segments.\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Enum,
        name: "SDL_GPUCullMode",
        short_name: "GPUCullMode",
        doc: Some("Specifies the facing direction in which triangle faces will be culled.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_CreateGPUGraphicsPipeline`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_CULLMODE_NONE",
                short_name: "NONE",
                doc: Some("No triangles are culled.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_CULLMODE_FRONT",
                short_name: "FRONT",
                doc: Some("Front-facing triangles are culled.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_CULLMODE_BACK",
                short_name: "BACK",
                doc: Some("Back-facing triangles are culled.\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Enum,
        name: "SDL_GPUFrontFace",
        short_name: "GPUFrontFace",
        doc: Some("Specifies the vertex winding that will cause a triangle to be determined to\nbe front-facing.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_CreateGPUGraphicsPipeline`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_FRONTFACE_COUNTER_CLOCKWISE",
                short_name: "COUNTER_CLOCKWISE",
                doc: Some("A triangle with counter-clockwise vertex winding will be considered front-facing.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_FRONTFACE_CLOCKWISE",
                short_name: "CLOCKWISE",
                doc: Some("A triangle with clockwise vertex winding will be considered front-facing.\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Enum,
        name: "SDL_GPUCompareOp",
        short_name: "GPUCompareOp",
        doc: Some("Specifies a comparison operator for depth, stencil and sampler operations.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_CreateGPUGraphicsPipeline`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_COMPAREOP_INVALID",
                short_name: "INVALID",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_COMPAREOP_NEVER",
                short_name: "NEVER",
                doc: Some("The comparison always evaluates false.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_COMPAREOP_LESS",
                short_name: "LESS",
                doc: Some("The comparison evaluates reference < test.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_COMPAREOP_EQUAL",
                short_name: "EQUAL",
                doc: Some("The comparison evaluates reference == test.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_COMPAREOP_LESS_OR_EQUAL",
                short_name: "LESS_OR_EQUAL",
                doc: Some("The comparison evaluates reference <= test.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_COMPAREOP_GREATER",
                short_name: "GREATER",
                doc: Some("The comparison evaluates reference > test.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_COMPAREOP_NOT_EQUAL",
                short_name: "NOT_EQUAL",
                doc: Some("The comparison evaluates reference != test.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_COMPAREOP_GREATER_OR_EQUAL",
                short_name: "GREATER_OR_EQUAL",
                doc: Some("The comparison evalutes reference >= test.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_COMPAREOP_ALWAYS",
                short_name: "ALWAYS",
                doc: Some("The comparison always evaluates true.\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Enum,
        name: "SDL_GPUStencilOp",
        short_name: "GPUStencilOp",
        doc: Some("Specifies what happens to a stored stencil value if stencil tests fail or\npass.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_CreateGPUGraphicsPipeline`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_STENCILOP_INVALID",
                short_name: "INVALID",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_STENCILOP_KEEP",
                short_name: "KEEP",
                doc: Some("Keeps the current value.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_STENCILOP_ZERO",
                short_name: "ZERO",
                doc: Some("Sets the value to 0.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_STENCILOP_REPLACE",
                short_name: "REPLACE",
                doc: Some("Sets the value to reference.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_STENCILOP_INCREMENT_AND_CLAMP",
                short_name: "INCREMENT_AND_CLAMP",
                doc: Some("Increments the current value and clamps to the maximum value.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_STENCILOP_DECREMENT_AND_CLAMP",
                short_name: "DECREMENT_AND_CLAMP",
                doc: Some("Decrements the current value and clamps to 0.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_STENCILOP_INVERT",
                short_name: "INVERT",
                doc: Some("Bitwise-inverts the current value.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_STENCILOP_INCREMENT_AND_WRAP",
                short_name: "INCREMENT_AND_WRAP",
                doc: Some("Increments the current value and wraps back to 0.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_STENCILOP_DECREMENT_AND_WRAP",
                short_name: "DECREMENT_AND_WRAP",
                doc: Some("Decrements the current value and wraps to the maximum value.\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Enum,
        name: "SDL_GPUBlendOp",
        short_name: "GPUBlendOp",
        doc: Some("Specifies the operator to be used when pixels in a render target are\nblended with existing pixels in the texture.\n\nThe source color is the value written by the fragment shader. The\ndestination color is the value currently existing in the texture.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_CreateGPUGraphicsPipeline`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_BLENDOP_INVALID",
                short_name: "INVALID",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_BLENDOP_ADD",
                short_name: "ADD",
                doc: Some("(source * source_factor) + (destination * destination_factor)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_BLENDOP_SUBTRACT",
                short_name: "SUBTRACT",
                doc: Some("(source * source_factor) - (destination * destination_factor)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_BLENDOP_REVERSE_SUBTRACT",
                short_name: "REVERSE_SUBTRACT",
                doc: Some("(destination * destination_factor) - (source * source_factor)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_BLENDOP_MIN",
                short_name: "MIN",
                doc: Some("min(source, destination)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_BLENDOP_MAX",
                short_name: "MAX",
                doc: Some("max(source, destination)\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Enum,
        name: "SDL_GPUBlendFactor",
        short_name: "GPUBlendFactor",
        doc: Some("Specifies a blending factor to be used when pixels in a render target are\nblended with existing pixels in the texture.\n\nThe source color is the value written by the fragment shader. The\ndestination color is the value currently existing in the texture.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_CreateGPUGraphicsPipeline`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_BLENDFACTOR_INVALID",
                short_name: "INVALID",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_BLENDFACTOR_ZERO",
                short_name: "ZERO",
                doc: Some("0\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_BLENDFACTOR_ONE",
                short_name: "ONE",
                doc: Some("1\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_BLENDFACTOR_SRC_COLOR",
                short_name: "SRC_COLOR",
                doc: Some("source color\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_BLENDFACTOR_ONE_MINUS_SRC_COLOR",
                short_name: "ONE_MINUS_SRC_COLOR",
                doc: Some("1 - source color\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_BLENDFACTOR_DST_COLOR",
                short_name: "DST_COLOR",
                doc: Some("destination color\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_BLENDFACTOR_ONE_MINUS_DST_COLOR",
                short_name: "ONE_MINUS_DST_COLOR",
                doc: Some("1 - destination color\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_BLENDFACTOR_SRC_ALPHA",
                short_name: "SRC_ALPHA",
                doc: Some("source alpha\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_BLENDFACTOR_ONE_MINUS_SRC_ALPHA",
                short_name: "ONE_MINUS_SRC_ALPHA",
                doc: Some("1 - source alpha\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_BLENDFACTOR_DST_ALPHA",
                short_name: "DST_ALPHA",
                doc: Some("destination alpha\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_BLENDFACTOR_ONE_MINUS_DST_ALPHA",
                short_name: "ONE_MINUS_DST_ALPHA",
                doc: Some("1 - destination alpha\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_BLENDFACTOR_CONSTANT_COLOR",
                short_name: "CONSTANT_COLOR",
                doc: Some("blend constant\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_BLENDFACTOR_ONE_MINUS_CONSTANT_COLOR",
                short_name: "ONE_MINUS_CONSTANT_COLOR",
                doc: Some("1 - blend constant\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_BLENDFACTOR_SRC_ALPHA_SATURATE",
                short_name: "SRC_ALPHA_SATURATE",
                doc: Some("min(source alpha, 1 - destination alpha)\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Flags,
        name: "SDL_GPUColorComponentFlags",
        short_name: "GPUColorComponentFlags",
        doc: Some("Specifies which color components are written in a graphics pipeline.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n\n## See also\n- [`SDL_CreateGPUGraphicsPipeline`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_COLORCOMPONENT_R",
                short_name: "R",
                doc: Some("the red component\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_COLORCOMPONENT_G",
                short_name: "G",
                doc: Some("the green component\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_COLORCOMPONENT_B",
                short_name: "B",
                doc: Some("the blue component\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_COLORCOMPONENT_A",
                short_name: "A",
                doc: Some("the alpha component\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Enum,
        name: "SDL_GPUFilter",
        short_name: "GPUFilter",
        doc: Some("Specifies a filter operation used by a sampler.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_CreateGPUSampler`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_FILTER_NEAREST",
                short_name: "NEAREST",
                doc: Some("Point filtering.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_FILTER_LINEAR",
                short_name: "LINEAR",
                doc: Some("Linear filtering.\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Enum,
        name: "SDL_GPUSamplerMipmapMode",
        short_name: "GPUSamplerMipmapMode",
        doc: Some("Specifies a mipmap mode used by a sampler.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_CreateGPUSampler`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_SAMPLERMIPMAPMODE_NEAREST",
                short_name: "NEAREST",
                doc: Some("Point filtering.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_SAMPLERMIPMAPMODE_LINEAR",
                short_name: "LINEAR",
                doc: Some("Linear filtering.\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Enum,
        name: "SDL_GPUSamplerAddressMode",
        short_name: "GPUSamplerAddressMode",
        doc: Some("Specifies behavior of texture sampling when the coordinates exceed the 0-1\nrange.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_CreateGPUSampler`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_SAMPLERADDRESSMODE_REPEAT",
                short_name: "REPEAT",
                doc: Some("Specifies that the coordinates will wrap around.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_SAMPLERADDRESSMODE_MIRRORED_REPEAT",
                short_name: "MIRRORED_REPEAT",
                doc: Some("Specifies that the coordinates will wrap around mirrored.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_SAMPLERADDRESSMODE_CLAMP_TO_EDGE",
                short_name: "CLAMP_TO_EDGE",
                doc: Some("Specifies that the coordinates will clamp to the 0-1 range.\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Enum,
        name: "SDL_GPUPresentMode",
        short_name: "GPUPresentMode",
        doc: Some("Specifies the timing that will be used to present swapchain textures to the\nOS.\n\nVSYNC mode will always be supported. IMMEDIATE and MAILBOX modes may not be\nsupported on certain systems.\n\nIt is recommended to query [`SDL_WindowSupportsGPUPresentMode`] after claiming\nthe window if you wish to change the present mode to IMMEDIATE or MAILBOX.\n\n- VSYNC: Waits for vblank before presenting. No tearing is possible. If\nthere is a pending image to present, the new image is enqueued for\npresentation. Disallows tearing at the cost of visual latency.\n- IMMEDIATE: Immediately presents. Lowest latency option, but tearing may\noccur.\n- MAILBOX: Waits for vblank before presenting. No tearing is possible. If\nthere is a pending image to present, the pending image is replaced by the\nnew image. Similar to VSYNC, but with reduced visual latency.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_SetGPUSwapchainParameters`]\n- [`SDL_WindowSupportsGPUPresentMode`]\n- [`SDL_WaitAndAcquireGPUSwapchainTexture`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_PRESENTMODE_VSYNC",
                short_name: "VSYNC",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_PRESENTMODE_IMMEDIATE",
                short_name: "IMMEDIATE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_PRESENTMODE_MAILBOX",
                short_name: "MAILBOX",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Enum,
        name: "SDL_GPUSwapchainComposition",
        short_name: "GPUSwapchainComposition",
        doc: Some("Specifies the texture format and colorspace of the swapchain textures.\n\nSDR will always be supported. Other compositions may not be supported on\ncertain systems.\n\nIt is recommended to query [`SDL_WindowSupportsGPUSwapchainComposition`] after\nclaiming the window if you wish to change the swapchain composition from\nSDR.\n\n- SDR: B8G8R8A8 or R8G8B8A8 swapchain. Pixel values are in sRGB encoding.\n- SDR_LINEAR: B8G8R8A8_SRGB or R8G8B8A8_SRGB swapchain. Pixel values are\nstored in memory in sRGB encoding but accessed in shaders in \"linear\nsRGB\" encoding which is sRGB but with a linear transfer function.\n- HDR_EXTENDED_LINEAR: R16G16B16A16_FLOAT swapchain. Pixel values are in\nextended linear sRGB encoding and permits values outside of the \\[0, 1\\]\nrange.\n- HDR10_ST2084: A2R10G10B10 or A2B10G10R10 swapchain. Pixel values are in\nBT.2020 ST2084 (PQ) encoding.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_SetGPUSwapchainParameters`]\n- [`SDL_WindowSupportsGPUSwapchainComposition`]\n- [`SDL_WaitAndAcquireGPUSwapchainTexture`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_SWAPCHAINCOMPOSITION_SDR",
                short_name: "SDR",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_SWAPCHAINCOMPOSITION_SDR_LINEAR",
                short_name: "SDR_LINEAR",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_SWAPCHAINCOMPOSITION_HDR_EXTENDED_LINEAR",
                short_name: "HDR_EXTENDED_LINEAR",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_SWAPCHAINCOMPOSITION_HDR10_ST2084",
                short_name: "HDR10_ST2084",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "haptic",
        kind: GroupKind::Id,
        name: "SDL_HapticID",
        short_name: "HapticID",
        doc: Some("This is a unique ID for a haptic device for the time it is connected to the\nsystem, and is never reused for the lifetime of the application.\n\nIf the haptic device is disconnected and reconnected, it will get a new ID.\n\nThe value 0 is an invalid ID.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
        ],
    },
    Group {
        module: "hidapi",
        kind: GroupKind::Enum,
        name: "SDL_hid_bus_type",
        short_name: "hid_bus_type",
        doc: Some("HID underlying bus types.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_HID_API_BUS_UNKNOWN",
                short_name: "UNKNOWN",
                doc: Some("Unknown bus type\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_HID_API_BUS_USB",
                short_name: "USB",
                doc: Some("USB bus\nSpecifications:\n<https://usb.org/hid>\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_HID_API_BUS_BLUETOOTH",
                short_name: "BLUETOOTH",
                doc: Some("Bluetooth or Bluetooth LE bus\nSpecifications:\n<https://www.bluetooth.com/specifications/specs/human-interface-device-profile-1-1-1/>\n<https://www.bluetooth.com/specifications/specs/hid-service-1-0/>\n<https://www.bluetooth.com/specifications/specs/hid-over-gatt-profile-1-0/>\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_HID_API_BUS_I2C",
                short_name: "I2C",
                doc: Some("I2C bus\nSpecifications:\n<https://docs.microsoft.com/previous-versions/windows/hardware/design/dn642101(v=vs.85)>\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_HID_API_BUS_SPI",
                short_name: "SPI",
                doc: Some("SPI bus\nSpecifications:\n<https://www.microsoft.com/download/details.aspx?id=103325>\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "hints",
        kind: GroupKind::Enum,
        name: "SDL_HintPriority",
        short_name: "HintPriority",
        doc: Some("An enumeration of hint priorities.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_HINT_DEFAULT",
                short_name: "DEFAULT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_HINT_NORMAL",
                short_name: "NORMAL",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_HINT_OVERRIDE",
                short_name: "OVERRIDE",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "init",
        kind: GroupKind::Flags,
        name: "SDL_InitFlags",
        short_name: "InitFlags",
        doc: Some("Initialization flags for [`SDL_Init`] and/or [`SDL_InitSubSystem`]\n\nThese are the flags which may be passed to [`SDL_Init()`]. You should specify\nthe subsystems which you will be using in your application.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n\n## See also\n- [`SDL_Init`]\n- [`SDL_Quit`]\n- [`SDL_InitSubSystem`]\n- [`SDL_QuitSubSystem`]\n- [`SDL_WasInit`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_INIT_AUDIO",
                short_name: "AUDIO",
                doc: Some("[`SDL_INIT_AUDIO`] implies [`SDL_INIT_EVENTS`]\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_INIT_VIDEO",
                short_name: "VIDEO",
                doc: Some("[`SDL_INIT_VIDEO`] implies [`SDL_INIT_EVENTS`], should be initialized on the main thread\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_INIT_JOYSTICK",
                short_name: "JOYSTICK",
                doc: Some("[`SDL_INIT_JOYSTICK`] implies [`SDL_INIT_EVENTS`], should be initialized on the same thread as [`SDL_INIT_VIDEO`] on Windows if you don't set [`SDL_HINT_JOYSTICK_THREAD`]\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_INIT_HAPTIC",
                short_name: "HAPTIC",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_INIT_GAMEPAD",
                short_name: "GAMEPAD",
                doc: Some("[`SDL_INIT_GAMEPAD`] implies [`SDL_INIT_JOYSTICK`]\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_INIT_EVENTS",
                short_name: "EVENTS",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_INIT_SENSOR",
                short_name: "SENSOR",
                doc: Some("[`SDL_INIT_SENSOR`] implies [`SDL_INIT_EVENTS`]\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_INIT_CAMERA",
                short_name: "CAMERA",
                doc: Some("[`SDL_INIT_CAMERA`] implies [`SDL_INIT_EVENTS`]\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "init",
        kind: GroupKind::Enum,
        name: "SDL_AppResult",
        short_name: "AppResult",
        doc: Some("Return values for optional main callbacks.\n\nReturning [`SDL_APP_SUCCESS`] or [`SDL_APP_FAILURE`] from [`SDL_AppInit`],\n[`SDL_AppEvent`], or [`SDL_AppIterate`] will terminate the program and report\nsuccess/failure to the operating system. What that means is\nplatform-dependent. On Unix, for example, on success, the process error\ncode will be zero, and on failure it will be 1. This interface doesn't\nallow you to return specific exit codes, just whether there was an error\ngenerally or not.\n\nReturning [`SDL_APP_CONTINUE`] from these functions will let the app continue\nto run.\n\nSee\n[Main callbacks in SDL3](https://wiki.libsdl.org/SDL3/README/main-functions#main-callbacks-in-sdl3)\nfor complete details.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_APP_CONTINUE",
                short_name: "CONTINUE",
                doc: Some("Value that requests that the app continue from the main callbacks.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_APP_SUCCESS",
                short_name: "SUCCESS",
                doc: Some("Value that requests termination with success from the main callbacks.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_APP_FAILURE",
                short_name: "FAILURE",
                doc: Some("Value that requests termination with error from the main callbacks.\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "iostream",
        kind: GroupKind::Enum,
        name: "SDL_IOStatus",
        short_name: "IOStatus",
        doc: Some("[`SDL_IOStream`] status, set by a read or write operation.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_IO_STATUS_READY",
                short_name: "READY",
                doc: Some("Everything is ready (no errors and not EOF).\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_IO_STATUS_ERROR",
                short_name: "ERROR",
                doc: Some("Read or write I/O error\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_IO_STATUS_EOF",
                short_name: "EOF",
                doc: Some("End of file\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_IO_STATUS_NOT_READY",
                short_name: "NOT_READY",
                doc: Some("Non blocking I/O, not ready\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_IO_STATUS_READONLY",
                short_name: "READONLY",
                doc: Some("Tried to write a read-only buffer\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_IO_STATUS_WRITEONLY",
                short_name: "WRITEONLY",
                doc: Some("Tried to read a write-only buffer\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "iostream",
        kind: GroupKind::Enum,
        name: "SDL_IOWhence",
        short_name: "IOWhence",
        doc: Some("Possible `whence` values for [`SDL_IOStream`] seeking.\n\nThese map to the same \"whence\" concept that `fseek` or `lseek` use in the\nstandard C runtime.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_IO_SEEK_SET",
                short_name: "SET",
                doc: Some("Seek from the beginning of data\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_IO_SEEK_CUR",
                short_name: "CUR",
                doc: Some("Seek relative to current read point\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_IO_SEEK_END",
                short_name: "END",
                doc: Some("Seek relative to the end of data\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "joystick",
        kind: GroupKind::Id,
        name: "SDL_JoystickID",
        short_name: "JoystickID",
        doc: Some("This is a unique ID for a joystick for the time it is connected to the\nsystem, and is never reused for the lifetime of the application.\n\nIf the joystick is disconnected and reconnected, it will get a new ID.\n\nThe value 0 is an invalid ID.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
        ],
    },
    Group {
        module: "joystick",
        kind: GroupKind::Enum,
        name: "SDL_JoystickType",
        short_name: "JoystickType",
        doc: Some("An enum of some common joystick types.\n\nIn some cases, SDL can identify a low-level joystick as being a certain\ntype of device, and will report it through [`SDL_GetJoystickType`] (or\n[`SDL_GetJoystickTypeForID`]).\n\nThis is by no means a complete list of everything that can be plugged into\na computer.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_JOYSTICK_TYPE_UNKNOWN",
                short_name: "UNKNOWN",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_JOYSTICK_TYPE_GAMEPAD",
                short_name: "GAMEPAD",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_JOYSTICK_TYPE_WHEEL",
                short_name: "WHEEL",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_JOYSTICK_TYPE_ARCADE_STICK",
                short_name: "ARCADE_STICK",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_JOYSTICK_TYPE_FLIGHT_STICK",
                short_name: "FLIGHT_STICK",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_JOYSTICK_TYPE_DANCE_PAD",
                short_name: "DANCE_PAD",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_JOYSTICK_TYPE_GUITAR",
                short_name: "GUITAR",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_JOYSTICK_TYPE_DRUM_KIT",
                short_name: "DRUM_KIT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_JOYSTICK_TYPE_ARCADE_PAD",
                short_name: "ARCADE_PAD",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_JOYSTICK_TYPE_THROTTLE",
                short_name: "THROTTLE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_JOYSTICK_TYPE_COUNT",
                short_name: "COUNT",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "joystick",
        kind: GroupKind::Enum,
        name: "SDL_JoystickConnectionState",
        short_name: "JoystickConnectionState",
        doc: Some("Possible connection states for a joystick device.\n\nThis is used by [`SDL_GetJoystickConnectionState`] to report how a device is\nconnected to the system.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_JOYSTICK_CONNECTION_INVALID",
                short_name: "INVALID",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_JOYSTICK_CONNECTION_UNKNOWN",
                short_name: "UNKNOWN",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_JOYSTICK_CONNECTION_WIRED",
                short_name: "WIRED",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_JOYSTICK_CONNECTION_WIRELESS",
                short_name: "WIRELESS",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "keyboard",
        kind: GroupKind::Id,
        name: "SDL_KeyboardID",
        short_name: "KeyboardID",
        doc: Some("This is a unique ID for a keyboard for the time it is connected to the\nsystem, and is never reused for the lifetime of the application.\n\nIf the keyboard is disconnected and reconnected, it will get a new ID.\n\nThe value 0 is an invalid ID.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
        ],
    },
    Group {
        module: "keyboard",
        kind: GroupKind::Enum,
        name: "SDL_TextInputType",
        short_name: "TextInputType",
        doc: Some("Text input type.\n\nThese are the valid values for [`SDL_PROP_TEXTINPUT_TYPE_NUMBER`]. Not every\nvalue is valid on every platform, but where a value isn't supported, a\nreasonable fallback will be used.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_StartTextInputWithProperties`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_TEXTINPUT_TYPE_TEXT",
                short_name: "TEXT",
                doc: Some("The input is text\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TEXTINPUT_TYPE_TEXT_NAME",
                short_name: "TEXT_NAME",
                doc: Some("The input is a person's name\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TEXTINPUT_TYPE_TEXT_EMAIL",
                short_name: "TEXT_EMAIL",
                doc: Some("The input is an e-mail address\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TEXTINPUT_TYPE_TEXT_USERNAME",
                short_name: "TEXT_USERNAME",
                doc: Some("The input is a username\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TEXTINPUT_TYPE_TEXT_PASSWORD_HIDDEN",
                short_name: "TEXT_PASSWORD_HIDDEN",
                doc: Some("The input is a secure password that is hidden\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TEXTINPUT_TYPE_TEXT_PASSWORD_VISIBLE",
                short_name: "TEXT_PASSWORD_VISIBLE",
                doc: Some("The input is a secure password that is visible\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TEXTINPUT_TYPE_NUMBER",
                short_name: "NUMBER",
                doc: Some("The input is a number\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TEXTINPUT_TYPE_NUMBER_PASSWORD_HIDDEN",
                short_name: "NUMBER_PASSWORD_HIDDEN",
                doc: Some("The input is a secure PIN that is hidden\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TEXTINPUT_TYPE_NUMBER_PASSWORD_VISIBLE",
                short_name: "NUMBER_PASSWORD_VISIBLE",
                doc: Some("The input is a secure PIN that is visible\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "keyboard",
        kind: GroupKind::Enum,
        name: "SDL_Capitalization",
        short_name: "Capitalization",
        doc: Some("Auto capitalization type.\n\nThese are the valid values for [`SDL_PROP_TEXTINPUT_CAPITALIZATION_NUMBER`].\nNot every value is valid on every platform, but where a value isn't\nsupported, a reasonable fallback will be used.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_StartTextInputWithProperties`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_CAPITALIZE_NONE",
                short_name: "NONE",
                doc: Some("No auto-capitalization will be done\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_CAPITALIZE_SENTENCES",
                short_name: "SENTENCES",
                doc: Some("The first letter of sentences will be capitalized\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_CAPITALIZE_WORDS",
                short_name: "WORDS",
                doc: Some("The first letter of words will be capitalized\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_CAPITALIZE_LETTERS",
                short_name: "LETTERS",
                doc: Some("All letters will be capitalized\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "keycode",
        kind: GroupKind::Id,
        name: "SDL_Keycode",
        short_name: "Keycode",
        doc: Some("The SDL virtual key representation.\n\nValues of this type are used to represent keyboard keys using the current\nlayout of the keyboard. These values include Unicode values representing\nthe unmodified character that would be generated by pressing the key, or an\n`SDLK_*` constant for those keys that do not generate characters.\n\nA special exception is the number keys at the top of the keyboard which map\nto SDLK_0...SDLK_9 on AZERTY layouts.\n\nKeys with the `SDLK_EXTENDED_MASK` bit set do not map to a scancode or\nunicode code point.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDLK_EXTENDED_MASK",
                short_name: "EXTENDED_MASK",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDLK_SCANCODE_MASK",
                short_name: "SCANCODE_MASK",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDLK_UNKNOWN",
                short_name: "UNKNOWN",
                doc: Some("0\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_RETURN",
                short_name: "RETURN",
                doc: Some("'\\r'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_ESCAPE",
                short_name: "ESCAPE",
                doc: Some("'\\x1B'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_BACKSPACE",
                short_name: "BACKSPACE",
                doc: Some("'\\b'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_TAB",
                short_name: "TAB",
                doc: Some("'\\t'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_SPACE",
                short_name: "SPACE",
                doc: Some("' '\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_EXCLAIM",
                short_name: "EXCLAIM",
                doc: Some("'!'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_DBLAPOSTROPHE",
                short_name: "DBLAPOSTROPHE",
                doc: Some("'\"'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_HASH",
                short_name: "HASH",
                doc: Some("'#'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_DOLLAR",
                short_name: "DOLLAR",
                doc: Some("'$'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_PERCENT",
                short_name: "PERCENT",
                doc: Some("'%'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_AMPERSAND",
                short_name: "AMPERSAND",
                doc: Some("'&'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_APOSTROPHE",
                short_name: "APOSTROPHE",
                doc: Some("'\\''\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_LEFTPAREN",
                short_name: "LEFTPAREN",
                doc: Some("'('\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_RIGHTPAREN",
                short_name: "RIGHTPAREN",
                doc: Some("')'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_ASTERISK",
                short_name: "ASTERISK",
                doc: Some("'*'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_PLUS",
                short_name: "PLUS",
                doc: Some("'+'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_COMMA",
                short_name: "COMMA",
                doc: Some("','\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_MINUS",
                short_name: "MINUS",
                doc: Some("'-'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_PERIOD",
                short_name: "PERIOD",
                doc: Some("'.'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_SLASH",
                short_name: "SLASH",
                doc: Some("'/'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_0",
                short_name: "_0",
                doc: Some("'0'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_1",
                short_name: "_1",
                doc: Some("'1'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_2",
                short_name: "_2",
                doc: Some("'2'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_3",
                short_name: "_3",
                doc: Some("'3'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_4",
                short_name: "_4",
                doc: Some("'4'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_5",
                short_name: "_5",
                doc: Some("'5'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_6",
                short_name: "_6",
                doc: Some("'6'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_7",
                short_name: "_7",
                doc: Some("'7'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_8",
                short_name: "_8",
                doc: Some("'8'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_9",
                short_name: "_9",
                doc: Some("'9'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_COLON",
                short_name: "COLON",
                doc: Some("':'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_SEMICOLON",
                short_name: "SEMICOLON",
                doc: Some("';'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_LESS",
                short_name: "LESS",
                doc: Some("'<'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_EQUALS",
                short_name: "EQUALS",
                doc: Some("'='\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_GREATER",
                short_name: "GREATER",
                doc: Some("'>'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_QUESTION",
                short_name: "QUESTION",
                doc: Some("'?'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_AT",
                short_name: "AT",
                doc: Some("'@'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_LEFTBRACKET",
                short_name: "LEFTBRACKET",
                doc: Some("'['\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_BACKSLASH",
                short_name: "BACKSLASH",
                doc: Some("'\\\\'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_RIGHTBRACKET",
                short_name: "RIGHTBRACKET",
                doc: Some("']'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_CARET",
                short_name: "CARET",
                doc: Some("'^'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_UNDERSCORE",
                short_name: "UNDERSCORE",
                doc: Some("'_'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_GRAVE",
                short_name: "GRAVE",
                doc: Some("'`'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_A",
                short_name: "A",
                doc: Some("'a'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_B",
                short_name: "B",
                doc: Some("'b'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_C",
                short_name: "C",
                doc: Some("'c'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_D",
                short_name: "D",
                doc: Some("'d'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_E",
                short_name: "E",
                doc: Some("'e'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_F",
                short_name: "F",
                doc: Some("'f'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_G",
                short_name: "G",
                doc: Some("'g'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_H",
                short_name: "H",
                doc: Some("'h'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_I",
                short_name: "I",
                doc: Some("'i'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_J",
                short_name: "J",
                doc: Some("'j'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_K",
                short_name: "K",
                doc: Some("'k'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_L",
                short_name: "L",
                doc: Some("'l'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_M",
                short_name: "M",
                doc: Some("'m'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_N",
                short_name: "N",
                doc: Some("'n'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_O",
                short_name: "O",
                doc: Some("'o'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_P",
                short_name: "P",
                doc: Some("'p'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_Q",
                short_name: "Q",
                doc: Some("'q'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_R",
                short_name: "R",
                doc: Some("'r'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_S",
                short_name: "S",
                doc: Some("'s'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_T",
                short_name: "T",
                doc: Some("'t'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_U",
                short_name: "U",
                doc: Some("'u'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_V",
                short_name: "V",
                doc: Some("'v'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_W",
                short_name: "W",
                doc: Some("'w'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_X",
                short_name: "X",
                doc: Some("'x'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_Y",
                short_name: "Y",
                doc: Some("'y'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_Z",
                short_name: "Z",
                doc: Some("'z'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_LEFTBRACE",
                short_name: "LEFTBRACE",
                doc: Some("'{'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_PIPE",
                short_name: "PIPE",
                doc: Some("'|'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_RIGHTBRACE",
                short_name: "RIGHTBRACE",
                doc: Some("'}'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_TILDE",
                short_name: "TILDE",
                doc: Some("'~'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_DELETE",
                short_name: "DELETE",
                doc: Some("'\\x7F'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_PLUSMINUS",
                short_name: "PLUSMINUS",
                doc: Some("'\\xB1'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_CAPSLOCK",
                short_name: "CAPSLOCK",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CAPSLOCK`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_F1",
                short_name: "F1",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F1`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_F2",
                short_name: "F2",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F2`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_F3",
                short_name: "F3",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F3`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_F4",
                short_name: "F4",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F4`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_F5",
                short_name: "F5",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F5`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_F6",
                short_name: "F6",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F6`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_F7",
                short_name: "F7",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F7`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_F8",
                short_name: "F8",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F8`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_F9",
                short_name: "F9",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F9`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_F10",
                short_name: "F10",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F10`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_F11",
                short_name: "F11",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F11`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_F12",
                short_name: "F12",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F12`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_PRINTSCREEN",
                short_name: "PRINTSCREEN",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_PRINTSCREEN`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_SCROLLLOCK",
                short_name: "SCROLLLOCK",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_SCROLLLOCK`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_PAUSE",
                short_name: "PAUSE",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_PAUSE`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_INSERT",
                short_name: "INSERT",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_INSERT`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_HOME",
                short_name: "HOME",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_HOME`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_PAGEUP",
                short_name: "PAGEUP",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_PAGEUP`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_END",
                short_name: "END",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_END`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_PAGEDOWN",
                short_name: "PAGEDOWN",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_PAGEDOWN`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_RIGHT",
                short_name: "RIGHT",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_RIGHT`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_LEFT",
                short_name: "LEFT",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_LEFT`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_DOWN",
                short_name: "DOWN",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_DOWN`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_UP",
                short_name: "UP",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_UP`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_NUMLOCKCLEAR",
                short_name: "NUMLOCKCLEAR",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_NUMLOCKCLEAR`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_DIVIDE",
                short_name: "KP_DIVIDE",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_DIVIDE`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_MULTIPLY",
                short_name: "KP_MULTIPLY",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_MULTIPLY`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_MINUS",
                short_name: "KP_MINUS",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_MINUS`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_PLUS",
                short_name: "KP_PLUS",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_PLUS`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_ENTER",
                short_name: "KP_ENTER",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_ENTER`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_1",
                short_name: "KP_1",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_1`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_2",
                short_name: "KP_2",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_2`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_3",
                short_name: "KP_3",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_3`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_4",
                short_name: "KP_4",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_4`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_5",
                short_name: "KP_5",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_5`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_6",
                short_name: "KP_6",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_6`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_7",
                short_name: "KP_7",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_7`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_8",
                short_name: "KP_8",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_8`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_9",
                short_name: "KP_9",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_9`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_0",
                short_name: "KP_0",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_0`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_PERIOD",
                short_name: "KP_PERIOD",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_PERIOD`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_APPLICATION",
                short_name: "APPLICATION",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_APPLICATION`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_POWER",
                short_name: "POWER",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_POWER`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_EQUALS",
                short_name: "KP_EQUALS",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_EQUALS`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_F13",
                short_name: "F13",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F13`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_F14",
                short_name: "F14",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F14`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_F15",
                short_name: "F15",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F15`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_F16",
                short_name: "F16",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F16`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_F17",
                short_name: "F17",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F17`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_F18",
                short_name: "F18",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F18`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_F19",
                short_name: "F19",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F19`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_F20",
                short_name: "F20",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F20`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_F21",
                short_name: "F21",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F21`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_F22",
                short_name: "F22",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F22`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_F23",
                short_name: "F23",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F23`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_F24",
                short_name: "F24",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F24`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_EXECUTE",
                short_name: "EXECUTE",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_EXECUTE`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_HELP",
                short_name: "HELP",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_HELP`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_MENU",
                short_name: "MENU",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MENU`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_SELECT",
                short_name: "SELECT",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_SELECT`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_STOP",
                short_name: "STOP",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_STOP`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_AGAIN",
                short_name: "AGAIN",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AGAIN`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_UNDO",
                short_name: "UNDO",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_UNDO`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_CUT",
                short_name: "CUT",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CUT`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_COPY",
                short_name: "COPY",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_COPY`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_PASTE",
                short_name: "PASTE",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_PASTE`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_FIND",
                short_name: "FIND",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_FIND`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_MUTE",
                short_name: "MUTE",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MUTE`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_VOLUMEUP",
                short_name: "VOLUMEUP",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_VOLUMEUP`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_VOLUMEDOWN",
                short_name: "VOLUMEDOWN",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_VOLUMEDOWN`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_COMMA",
                short_name: "KP_COMMA",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_COMMA`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_EQUALSAS400",
                short_name: "KP_EQUALSAS400",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_EQUALSAS400`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_ALTERASE",
                short_name: "ALTERASE",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_ALTERASE`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_SYSREQ",
                short_name: "SYSREQ",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_SYSREQ`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_CANCEL",
                short_name: "CANCEL",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CANCEL`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_CLEAR",
                short_name: "CLEAR",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CLEAR`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_PRIOR",
                short_name: "PRIOR",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_PRIOR`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_RETURN2",
                short_name: "RETURN2",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_RETURN2`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_SEPARATOR",
                short_name: "SEPARATOR",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_SEPARATOR`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_OUT",
                short_name: "OUT",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_OUT`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_OPER",
                short_name: "OPER",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_OPER`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_CLEARAGAIN",
                short_name: "CLEARAGAIN",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CLEARAGAIN`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_CRSEL",
                short_name: "CRSEL",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CRSEL`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_EXSEL",
                short_name: "EXSEL",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_EXSEL`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_00",
                short_name: "KP_00",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_00`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_000",
                short_name: "KP_000",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_000`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_THOUSANDSSEPARATOR",
                short_name: "THOUSANDSSEPARATOR",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_THOUSANDSSEPARATOR`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_DECIMALSEPARATOR",
                short_name: "DECIMALSEPARATOR",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_DECIMALSEPARATOR`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_CURRENCYUNIT",
                short_name: "CURRENCYUNIT",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CURRENCYUNIT`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_CURRENCYSUBUNIT",
                short_name: "CURRENCYSUBUNIT",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CURRENCYSUBUNIT`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_LEFTPAREN",
                short_name: "KP_LEFTPAREN",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_LEFTPAREN`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_RIGHTPAREN",
                short_name: "KP_RIGHTPAREN",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_RIGHTPAREN`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_LEFTBRACE",
                short_name: "KP_LEFTBRACE",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_LEFTBRACE`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_RIGHTBRACE",
                short_name: "KP_RIGHTBRACE",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_RIGHTBRACE`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_TAB",
                short_name: "KP_TAB",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_TAB`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_BACKSPACE",
                short_name: "KP_BACKSPACE",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_BACKSPACE`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_A",
                short_name: "KP_A",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_A`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_B",
                short_name: "KP_B",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_B`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_C",
                short_name: "KP_C",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_C`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_D",
                short_name: "KP_D",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_D`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_E",
                short_name: "KP_E",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_E`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_F",
                short_name: "KP_F",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_F`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_XOR",
                short_name: "KP_XOR",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_XOR`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_POWER",
                short_name: "KP_POWER",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_POWER`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_PERCENT",
                short_name: "KP_PERCENT",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_PERCENT`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_LESS",
                short_name: "KP_LESS",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_LESS`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_GREATER",
                short_name: "KP_GREATER",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_GREATER`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_AMPERSAND",
                short_name: "KP_AMPERSAND",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_AMPERSAND`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_DBLAMPERSAND",
                short_name: "KP_DBLAMPERSAND",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_DBLAMPERSAND`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_VERTICALBAR",
                short_name: "KP_VERTICALBAR",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_VERTICALBAR`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_DBLVERTICALBAR",
                short_name: "KP_DBLVERTICALBAR",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_DBLVERTICALBAR`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_COLON",
                short_name: "KP_COLON",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_COLON`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_HASH",
                short_name: "KP_HASH",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_HASH`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_SPACE",
                short_name: "KP_SPACE",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_SPACE`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_AT",
                short_name: "KP_AT",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_AT`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_EXCLAM",
                short_name: "KP_EXCLAM",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_EXCLAM`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_MEMSTORE",
                short_name: "KP_MEMSTORE",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_MEMSTORE`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_MEMRECALL",
                short_name: "KP_MEMRECALL",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_MEMRECALL`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_MEMCLEAR",
                short_name: "KP_MEMCLEAR",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_MEMCLEAR`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_MEMADD",
                short_name: "KP_MEMADD",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_MEMADD`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_MEMSUBTRACT",
                short_name: "KP_MEMSUBTRACT",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_MEMSUBTRACT`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_MEMMULTIPLY",
                short_name: "KP_MEMMULTIPLY",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_MEMMULTIPLY`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_MEMDIVIDE",
                short_name: "KP_MEMDIVIDE",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_MEMDIVIDE`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_PLUSMINUS",
                short_name: "KP_PLUSMINUS",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_PLUSMINUS`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_CLEAR",
                short_name: "KP_CLEAR",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_CLEAR`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_CLEARENTRY",
                short_name: "KP_CLEARENTRY",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_CLEARENTRY`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_BINARY",
                short_name: "KP_BINARY",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_BINARY`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_OCTAL",
                short_name: "KP_OCTAL",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_OCTAL`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_DECIMAL",
                short_name: "KP_DECIMAL",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_DECIMAL`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_HEXADECIMAL",
                short_name: "KP_HEXADECIMAL",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_HEXADECIMAL`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_LCTRL",
                short_name: "LCTRL",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_LCTRL`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_LSHIFT",
                short_name: "LSHIFT",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_LSHIFT`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_LALT",
                short_name: "LALT",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_LALT`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_LGUI",
                short_name: "LGUI",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_LGUI`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_RCTRL",
                short_name: "RCTRL",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_RCTRL`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_RSHIFT",
                short_name: "RSHIFT",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_RSHIFT`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_RALT",
                short_name: "RALT",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_RALT`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_RGUI",
                short_name: "RGUI",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_RGUI`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_MODE",
                short_name: "MODE",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MODE`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_SLEEP",
                short_name: "SLEEP",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_SLEEP`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_WAKE",
                short_name: "WAKE",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_WAKE`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_CHANNEL_INCREMENT",
                short_name: "CHANNEL_INCREMENT",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CHANNEL_INCREMENT`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_CHANNEL_DECREMENT",
                short_name: "CHANNEL_DECREMENT",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CHANNEL_DECREMENT`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_MEDIA_PLAY",
                short_name: "MEDIA_PLAY",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_PLAY`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_MEDIA_PAUSE",
                short_name: "MEDIA_PAUSE",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_PAUSE`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_MEDIA_RECORD",
                short_name: "MEDIA_RECORD",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_RECORD`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_MEDIA_FAST_FORWARD",
                short_name: "MEDIA_FAST_FORWARD",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_FAST_FORWARD`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_MEDIA_REWIND",
                short_name: "MEDIA_REWIND",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_REWIND`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_MEDIA_NEXT_TRACK",
                short_name: "MEDIA_NEXT_TRACK",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_NEXT_TRACK`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_MEDIA_PREVIOUS_TRACK",
                short_name: "MEDIA_PREVIOUS_TRACK",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_PREVIOUS_TRACK`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_MEDIA_STOP",
                short_name: "MEDIA_STOP",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_STOP`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_MEDIA_EJECT",
                short_name: "MEDIA_EJECT",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_EJECT`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_MEDIA_PLAY_PAUSE",
                short_name: "MEDIA_PLAY_PAUSE",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_PLAY_PAUSE`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_MEDIA_SELECT",
                short_name: "MEDIA_SELECT",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_SELECT`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_AC_NEW",
                short_name: "AC_NEW",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_NEW`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_AC_OPEN",
                short_name: "AC_OPEN",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_OPEN`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_AC_CLOSE",
                short_name: "AC_CLOSE",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_CLOSE`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_AC_EXIT",
                short_name: "AC_EXIT",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_EXIT`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_AC_SAVE",
                short_name: "AC_SAVE",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_SAVE`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_AC_PRINT",
                short_name: "AC_PRINT",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_PRINT`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_AC_PROPERTIES",
                short_name: "AC_PROPERTIES",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_PROPERTIES`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_AC_SEARCH",
                short_name: "AC_SEARCH",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_SEARCH`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_AC_HOME",
                short_name: "AC_HOME",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_HOME`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_AC_BACK",
                short_name: "AC_BACK",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_BACK`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_AC_FORWARD",
                short_name: "AC_FORWARD",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_FORWARD`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_AC_STOP",
                short_name: "AC_STOP",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_STOP`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_AC_REFRESH",
                short_name: "AC_REFRESH",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_REFRESH`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_AC_BOOKMARKS",
                short_name: "AC_BOOKMARKS",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_BOOKMARKS`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_SOFTLEFT",
                short_name: "SOFTLEFT",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_SOFTLEFT`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_SOFTRIGHT",
                short_name: "SOFTRIGHT",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_SOFTRIGHT`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_CALL",
                short_name: "CALL",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CALL`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_ENDCALL",
                short_name: "ENDCALL",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_ENDCALL`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_LEFT_TAB",
                short_name: "LEFT_TAB",
                doc: Some("Extended key Left Tab\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_LEVEL5_SHIFT",
                short_name: "LEVEL5_SHIFT",
                doc: Some("Extended key Level 5 Shift\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_MULTI_KEY_COMPOSE",
                short_name: "MULTI_KEY_COMPOSE",
                doc: Some("Extended key Multi-key Compose\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_LMETA",
                short_name: "LMETA",
                doc: Some("Extended key Left Meta\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_RMETA",
                short_name: "RMETA",
                doc: Some("Extended key Right Meta\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_LHYPER",
                short_name: "LHYPER",
                doc: Some("Extended key Left Hyper\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_RHYPER",
                short_name: "RHYPER",
                doc: Some("Extended key Right Hyper\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "keycode",
        kind: GroupKind::Flags,
        name: "SDL_Keymod",
        short_name: "Keymod",
        doc: Some("Valid key modifiers (possibly OR'd together).\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_KMOD_NONE",
                short_name: "NONE",
                doc: Some("no modifier is applicable.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_KMOD_LSHIFT",
                short_name: "LSHIFT",
                doc: Some("the left Shift key is down.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_KMOD_RSHIFT",
                short_name: "RSHIFT",
                doc: Some("the right Shift key is down.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_KMOD_LEVEL5",
                short_name: "LEVEL5",
                doc: Some("the Level 5 Shift key is down.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_KMOD_LCTRL",
                short_name: "LCTRL",
                doc: Some("the left Ctrl (Control) key is down.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_KMOD_RCTRL",
                short_name: "RCTRL",
                doc: Some("the right Ctrl (Control) key is down.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_KMOD_LALT",
                short_name: "LALT",
                doc: Some("the left Alt key is down.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_KMOD_RALT",
                short_name: "RALT",
                doc: Some("the right Alt key is down.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_KMOD_LGUI",
                short_name: "LGUI",
                doc: Some("the left GUI key (often the Windows key) is down.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_KMOD_RGUI",
                short_name: "RGUI",
                doc: Some("the right GUI key (often the Windows key) is down.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_KMOD_NUM",
                short_name: "NUM",
                doc: Some("the Num Lock key (may be located on an extended keypad) is down.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_KMOD_CAPS",
                short_name: "CAPS",
                doc: Some("the Caps Lock key is down.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_KMOD_MODE",
                short_name: "MODE",
                doc: Some("the !AltGr key is down.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_KMOD_SCROLL",
                short_name: "SCROLL",
                doc: Some("the Scroll Lock key is down.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_KMOD_CTRL",
                short_name: "CTRL",
                doc: Some("Any Ctrl key is down.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_KMOD_SHIFT",
                short_name: "SHIFT",
                doc: Some("Any Shift key is down.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_KMOD_ALT",
                short_name: "ALT",
                doc: Some("Any Alt key is down.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_KMOD_GUI",
                short_name: "GUI",
                doc: Some("Any GUI key is down.\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "log",
        kind: GroupKind::Enum,
        name: "SDL_LogCategory",
        short_name: "LogCategory",
        doc: Some("The predefined log categories\n\nBy default the application and gpu categories are enabled at the INFO\nlevel, the assert category is enabled at the WARN level, test is enabled at\nthe VERBOSE level and all other categories are enabled at the ERROR level.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_LOG_CATEGORY_APPLICATION",
                short_name: "APPLICATION",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_CATEGORY_ERROR",
                short_name: "ERROR",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_CATEGORY_ASSERT",
                short_name: "ASSERT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_CATEGORY_SYSTEM",
                short_name: "SYSTEM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_CATEGORY_AUDIO",
                short_name: "AUDIO",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_CATEGORY_VIDEO",
                short_name: "VIDEO",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_CATEGORY_RENDER",
                short_name: "RENDER",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_CATEGORY_INPUT",
                short_name: "INPUT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_CATEGORY_TEST",
                short_name: "TEST",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_CATEGORY_GPU",
                short_name: "GPU",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_CATEGORY_RESERVED2",
                short_name: "RESERVED2",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_CATEGORY_RESERVED3",
                short_name: "RESERVED3",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_CATEGORY_RESERVED4",
                short_name: "RESERVED4",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_CATEGORY_RESERVED5",
                short_name: "RESERVED5",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_CATEGORY_RESERVED6",
                short_name: "RESERVED6",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_CATEGORY_RESERVED7",
                short_name: "RESERVED7",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_CATEGORY_RESERVED8",
                short_name: "RESERVED8",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_CATEGORY_RESERVED9",
                short_name: "RESERVED9",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_CATEGORY_RESERVED10",
                short_name: "RESERVED10",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_CATEGORY_CUSTOM",
                short_name: "CUSTOM",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "log",
        kind: GroupKind::Enum,
        name: "SDL_LogPriority",
        short_name: "LogPriority",
        doc: Some("The predefined log priorities\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_LOG_PRIORITY_INVALID",
                short_name: "INVALID",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_PRIORITY_TRACE",
                short_name: "TRACE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_PRIORITY_VERBOSE",
                short_name: "VERBOSE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_PRIORITY_DEBUG",
                short_name: "DEBUG",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_PRIORITY_INFO",
                short_name: "INFO",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_PRIORITY_WARN",
                short_name: "WARN",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_PRIORITY_ERROR",
                short_name: "ERROR",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_PRIORITY_CRITICAL",
                short_name: "CRITICAL",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_PRIORITY_COUNT",
                short_name: "COUNT",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "messagebox",
        kind: GroupKind::Flags,
        name: "SDL_MessageBoxFlags",
        short_name: "MessageBoxFlags",
        doc: Some("Message box flags.\n\nIf supported will display warning icon, etc.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_MESSAGEBOX_ERROR",
                short_name: "ERROR",
                doc: Some("error dialog\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_MESSAGEBOX_WARNING",
                short_name: "WARNING",
                doc: Some("warning dialog\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_MESSAGEBOX_INFORMATION",
                short_name: "INFORMATION",
                doc: Some("informational dialog\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_MESSAGEBOX_BUTTONS_LEFT_TO_RIGHT",
                short_name: "BUTTONS_LEFT_TO_RIGHT",
                doc: Some("buttons placed left to right\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_MESSAGEBOX_BUTTONS_RIGHT_TO_LEFT",
                short_name: "BUTTONS_RIGHT_TO_LEFT",
                doc: Some("buttons placed right to left\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "messagebox",
        kind: GroupKind::Flags,
        name: "SDL_MessageBoxButtonFlags",
        short_name: "MessageBoxButtonFlags",
        doc: Some("[`SDL_MessageBoxButtonData`] flags.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT",
                short_name: "RETURNKEY_DEFAULT",
                doc: Some("Marks the default button when return is hit\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT",
                short_name: "ESCAPEKEY_DEFAULT",
                doc: Some("Marks the default button when escape is hit\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "messagebox",
        kind: GroupKind::Enum,
        name: "SDL_MessageBoxColorType",
        short_name: "MessageBoxColorType",
        doc: Some("An enumeration of indices inside the colors array of\n[`SDL_MessageBoxColorScheme`].\n"),
        available_since: None,
        values: &[
            GroupValue {
                name: "SDL_MESSAGEBOX_COLOR_BACKGROUND",
                short_name: "BACKGROUND",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_MESSAGEBOX_COLOR_TEXT",
                short_name: "TEXT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_MESSAGEBOX_COLOR_BUTTON_BORDER",
                short_name: "BUTTON_BORDER",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND",
                short_name: "BUTTON_BACKGROUND",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED",
                short_name: "BUTTON_SELECTED",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_MESSAGEBOX_COLOR_COUNT",
                short_name: "COUNT",
                doc: Some("Size of the colors array of [`SDL_MessageBoxColorScheme`].\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "mouse",
        kind: GroupKind::Id,
        name: "SDL_MouseID",
        short_name: "MouseID",
        doc: Some("This is a unique ID for a mouse for the time it is connected to the system,\nand is never reused for the lifetime of the application.\n\nIf the mouse is disconnected and reconnected, it will get a new ID.\n\nThe value 0 is an invalid ID.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
        ],
    },
    Group {
        module: "mouse",
        kind: GroupKind::Enum,
        name: "SDL_SystemCursor",
        short_name: "SystemCursor",
        doc: Some("Cursor types for [`SDL_CreateSystemCursor()`].\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_SYSTEM_CURSOR_DEFAULT",
                short_name: "DEFAULT",
                doc: Some("Default cursor. Usually an arrow.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SYSTEM_CURSOR_TEXT",
                short_name: "TEXT",
                doc: Some("Text selection. Usually an I-beam.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SYSTEM_CURSOR_WAIT",
                short_name: "WAIT",
                doc: Some("Wait. Usually an hourglass or watch or spinning ball.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SYSTEM_CURSOR_CROSSHAIR",
                short_name: "CROSSHAIR",
                doc: Some("Crosshair.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SYSTEM_CURSOR_PROGRESS",
                short_name: "PROGRESS",
                doc: Some("Program is busy but still interactive. Usually it's WAIT with an arrow.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SYSTEM_CURSOR_NWSE_RESIZE",
                short_name: "NWSE_RESIZE",
                doc: Some("Double arrow pointing northwest and southeast.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SYSTEM_CURSOR_NESW_RESIZE",
                short_name: "NESW_RESIZE",
                doc: Some("Double arrow pointing northeast and southwest.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SYSTEM_CURSOR_EW_RESIZE",
                short_name: "EW_RESIZE",
                doc: Some("Double arrow pointing west and east.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SYSTEM_CURSOR_NS_RESIZE",
                short_name: "NS_RESIZE",
                doc: Some("Double arrow pointing north and south.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SYSTEM_CURSOR_MOVE",
                short_name: "MOVE",
                doc: Some("Four pointed arrow pointing north, south, east, and west.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SYSTEM_CURSOR_NOT_ALLOWED",
                short_name: "NOT_ALLOWED",
                doc: Some("Not permitted. Usually a slashed circle or crossbones.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SYSTEM_CURSOR_POINTER",
                short_name: "POINTER",
                doc: Some("Pointer that indicates a link. Usually a pointing hand.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SYSTEM_CURSOR_NW_RESIZE",
                short_name: "NW_RESIZE",
                doc: Some("Window resize top-left. This may be a single arrow or a double arrow like NWSE_RESIZE.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SYSTEM_CURSOR_N_RESIZE",
                short_name: "N_RESIZE",
                doc: Some("Window resize top. May be NS_RESIZE.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SYSTEM_CURSOR_NE_RESIZE",
                short_name: "NE_RESIZE",
                doc: Some("Window resize top-right. May be NESW_RESIZE.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SYSTEM_CURSOR_E_RESIZE",
                short_name: "E_RESIZE",
                doc: Some("Window resize right. May be EW_RESIZE.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SYSTEM_CURSOR_SE_RESIZE",
                short_name: "SE_RESIZE",
                doc: Some("Window resize bottom-right. May be NWSE_RESIZE.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SYSTEM_CURSOR_S_RESIZE",
                short_name: "S_RESIZE",
                doc: Some("Window resize bottom. May be NS_RESIZE.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SYSTEM_CURSOR_SW_RESIZE",
                short_name: "SW_RESIZE",
                doc: Some("Window resize bottom-left. May be NESW_RESIZE.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SYSTEM_CURSOR_W_RESIZE",
                short_name: "W_RESIZE",
                doc: Some("Window resize left. May be EW_RESIZE.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SYSTEM_CURSOR_COUNT",
                short_name: "COUNT",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "mouse",
        kind: GroupKind::Enum,
        name: "SDL_MouseWheelDirection",
        short_name: "MouseWheelDirection",
        doc: Some("Scroll direction types for the Scroll event\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_MOUSEWHEEL_NORMAL",
                short_name: "NORMAL",
                doc: Some("The scroll direction is normal\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_MOUSEWHEEL_FLIPPED",
                short_name: "FLIPPED",
                doc: Some("The scroll direction is flipped / natural\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "mouse",
        kind: GroupKind::Flags,
        name: "SDL_MouseButtonFlags",
        short_name: "MouseButtonFlags",
        doc: Some("A bitmask of pressed mouse buttons, as reported by [`SDL_GetMouseState`], etc.\n\n- Button 1: Left mouse button\n- Button 2: Middle mouse button\n- Button 3: Right mouse button\n- Button 4: Side mouse button 1\n- Button 5: Side mouse button 2\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n\n## See also\n- [`SDL_GetMouseState`]\n- [`SDL_GetGlobalMouseState`]\n- [`SDL_GetRelativeMouseState`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_BUTTON_LMASK",
                short_name: "LMASK",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_BUTTON_MMASK",
                short_name: "MMASK",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_BUTTON_RMASK",
                short_name: "RMASK",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_BUTTON_X1MASK",
                short_name: "X1MASK",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_BUTTON_X2MASK",
                short_name: "X2MASK",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "mutex",
        kind: GroupKind::Enum,
        name: "SDL_InitStatus",
        short_name: "InitStatus",
        doc: Some("The current status of an [`SDL_InitState`] structure.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_INIT_STATUS_UNINITIALIZED",
                short_name: "UNINITIALIZED",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_INIT_STATUS_INITIALIZING",
                short_name: "INITIALIZING",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_INIT_STATUS_INITIALIZED",
                short_name: "INITIALIZED",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_INIT_STATUS_UNINITIALIZING",
                short_name: "UNINITIALIZING",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "pen",
        kind: GroupKind::Id,
        name: "SDL_PenID",
        short_name: "PenID",
        doc: Some("SDL pen instance IDs.\n\nZero is used to signify an invalid/null device.\n\nThese show up in pen events when SDL sees input from them. They remain\nconsistent as long as SDL can recognize a tool to be the same pen; but if a\npen physically leaves the area and returns, it might get a new ID.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
        ],
    },
    Group {
        module: "pen",
        kind: GroupKind::Flags,
        name: "SDL_PenInputFlags",
        short_name: "PenInputFlags",
        doc: Some("Pen input flags, as reported by various pen events' `pen_state` field.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_PEN_INPUT_DOWN",
                short_name: "DOWN",
                doc: Some("pen is pressed down\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PEN_INPUT_BUTTON_1",
                short_name: "BUTTON_1",
                doc: Some("button 1 is pressed\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PEN_INPUT_BUTTON_2",
                short_name: "BUTTON_2",
                doc: Some("button 2 is pressed\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PEN_INPUT_BUTTON_3",
                short_name: "BUTTON_3",
                doc: Some("button 3 is pressed\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PEN_INPUT_BUTTON_4",
                short_name: "BUTTON_4",
                doc: Some("button 4 is pressed\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PEN_INPUT_BUTTON_5",
                short_name: "BUTTON_5",
                doc: Some("button 5 is pressed\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PEN_INPUT_ERASER_TIP",
                short_name: "ERASER_TIP",
                doc: Some("eraser tip is used\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "pen",
        kind: GroupKind::Enum,
        name: "SDL_PenAxis",
        short_name: "PenAxis",
        doc: Some("Pen axis indices.\n\nThese are the valid values for the `axis` field in [`SDL_PenAxisEvent`]. All\naxes are either normalised to 0..1 or report a (positive or negative) angle\nin degrees, with 0.0 representing the centre. Not all pens/backends support\nall axes: unsupported axes are always zero.\n\nTo convert angles for tilt and rotation into vector representation, use\n[`SDL_sinf`] on the XTILT, YTILT, or ROTATION component, for example:\n\n`SDL_sinf(xtilt * SDL_PI_F / 180.0)`.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_PEN_AXIS_PRESSURE",
                short_name: "PRESSURE",
                doc: Some("Pen pressure.  Unidirectional: 0 to 1.0\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PEN_AXIS_XTILT",
                short_name: "XTILT",
                doc: Some("Pen horizontal tilt angle.  Bidirectional: -90.0 to 90.0 (left-to-right).\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PEN_AXIS_YTILT",
                short_name: "YTILT",
                doc: Some("Pen vertical tilt angle.  Bidirectional: -90.0 to 90.0 (top-to-down).\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PEN_AXIS_DISTANCE",
                short_name: "DISTANCE",
                doc: Some("Pen distance to drawing surface.  Unidirectional: 0.0 to 1.0\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PEN_AXIS_ROTATION",
                short_name: "ROTATION",
                doc: Some("Pen barrel rotation.  Bidirectional: -180 to 179.9 (clockwise, 0 is facing up, -180.0 is facing down).\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PEN_AXIS_SLIDER",
                short_name: "SLIDER",
                doc: Some("Pen finger wheel or slider (e.g., Airbrush Pen).  Unidirectional: 0 to 1.0\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PEN_AXIS_TANGENTIAL_PRESSURE",
                short_name: "TANGENTIAL_PRESSURE",
                doc: Some("Pressure from squeezing the pen (\"barrel pressure\").\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PEN_AXIS_COUNT",
                short_name: "COUNT",
                doc: Some("Total known pen axis types in this version of SDL. This number may grow in future releases!\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "pixels",
        kind: GroupKind::Enum,
        name: "SDL_PixelType",
        short_name: "PixelType",
        doc: Some("Pixel type.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_PIXELTYPE_UNKNOWN",
                short_name: "UNKNOWN",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELTYPE_INDEX1",
                short_name: "INDEX1",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELTYPE_INDEX4",
                short_name: "INDEX4",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELTYPE_INDEX8",
                short_name: "INDEX8",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELTYPE_PACKED8",
                short_name: "PACKED8",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELTYPE_PACKED16",
                short_name: "PACKED16",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELTYPE_PACKED32",
                short_name: "PACKED32",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELTYPE_ARRAYU8",
                short_name: "ARRAYU8",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELTYPE_ARRAYU16",
                short_name: "ARRAYU16",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELTYPE_ARRAYU32",
                short_name: "ARRAYU32",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELTYPE_ARRAYF16",
                short_name: "ARRAYF16",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELTYPE_ARRAYF32",
                short_name: "ARRAYF32",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELTYPE_INDEX2",
                short_name: "INDEX2",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "pixels",
        kind: GroupKind::Enum,
        name: "SDL_BitmapOrder",
        short_name: "BitmapOrder",
        doc: Some("Bitmap pixel order, high bit -> low bit.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_BITMAPORDER_NONE",
                short_name: "NONE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_BITMAPORDER_4321",
                short_name: "_4321",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_BITMAPORDER_1234",
                short_name: "_1234",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "pixels",
        kind: GroupKind::Enum,
        name: "SDL_PackedOrder",
        short_name: "PackedOrder",
        doc: Some("Packed component order, high bit -> low bit.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_PACKEDORDER_NONE",
                short_name: "NONE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PACKEDORDER_XRGB",
                short_name: "XRGB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PACKEDORDER_RGBX",
                short_name: "RGBX",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PACKEDORDER_ARGB",
                short_name: "ARGB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PACKEDORDER_RGBA",
                short_name: "RGBA",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PACKEDORDER_XBGR",
                short_name: "XBGR",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PACKEDORDER_BGRX",
                short_name: "BGRX",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PACKEDORDER_ABGR",
                short_name: "ABGR",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PACKEDORDER_BGRA",
                short_name: "BGRA",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "pixels",
        kind: GroupKind::Enum,
        name: "SDL_ArrayOrder",
        short_name: "ArrayOrder",
        doc: Some("Array component order, low byte -> high byte.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_ARRAYORDER_NONE",
                short_name: "NONE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_ARRAYORDER_RGB",
                short_name: "RGB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_ARRAYORDER_RGBA",
                short_name: "RGBA",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_ARRAYORDER_ARGB",
                short_name: "ARGB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_ARRAYORDER_BGR",
                short_name: "BGR",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_ARRAYORDER_BGRA",
                short_name: "BGRA",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_ARRAYORDER_ABGR",
                short_name: "ABGR",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "pixels",
        kind: GroupKind::Enum,
        name: "SDL_PackedLayout",
        short_name: "PackedLayout",
        doc: Some("Packed component layout.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_PACKEDLAYOUT_NONE",
                short_name: "NONE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PACKEDLAYOUT_332",
                short_name: "_332",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PACKEDLAYOUT_4444",
                short_name: "_4444",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PACKEDLAYOUT_1555",
                short_name: "_1555",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PACKEDLAYOUT_5551",
                short_name: "_5551",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PACKEDLAYOUT_565",
                short_name: "_565",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PACKEDLAYOUT_8888",
                short_name: "_8888",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PACKEDLAYOUT_2101010",
                short_name: "_2101010",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PACKEDLAYOUT_1010102",
                short_name: "_1010102",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "pixels",
        kind: GroupKind::Enum,
        name: "SDL_PixelFormat",
        short_name: "PixelFormat",
        doc: Some("Pixel format.\n\nSDL's pixel formats have the following naming convention:\n\n- Names with a list of components and a single bit count, such as RGB24 and\nABGR32, define a platform-independent encoding into bytes in the order\nspecified. For example, in RGB24 data, each pixel is encoded in 3 bytes\n(red, green, blue) in that order, and in ABGR32 data, each pixel is\nencoded in 4 bytes alpha, blue, green, red) in that order. Use these\nnames if the property of a format that is important to you is the order\nof the bytes in memory or on disk.\n- Names with a bit count per component, such as ARGB8888 and XRGB1555, are\n\"packed\" into an appropriately-sized integer in the platform's native\nendianness. For example, ARGB8888 is a sequence of 32-bit integers; in\neach integer, the most significant bits are alpha, and the least\nsignificant bits are blue. On a little-endian CPU such as x86, the least\nsignificant bits of each integer are arranged first in memory, but on a\nbig-endian CPU such as s390x, the most significant bits are arranged\nfirst. Use these names if the property of a format that is important to\nyou is the meaning of each bit position within a native-endianness\ninteger.\n- In indexed formats such as INDEX4LSB, each pixel is represented by\nencoding an index into the palette into the indicated number of bits,\nwith multiple pixels packed into each byte if appropriate. In LSB\nformats, the first (leftmost) pixel is stored in the least-significant\nbits of the byte; in MSB formats, it's stored in the most-significant\nbits. INDEX8 does not need LSB/MSB variants, because each pixel exactly\nfills one byte.\n\nThe 32-bit byte-array encodings such as RGBA32 are aliases for the\nappropriate 8888 encoding for the current platform. For example, RGBA32 is\nan alias for ABGR8888 on little-endian CPUs like x86, or an alias for\nRGBA8888 on big-endian CPUs.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_PIXELFORMAT_UNKNOWN",
                short_name: "UNKNOWN",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_INDEX1LSB",
                short_name: "INDEX1LSB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_INDEX1MSB",
                short_name: "INDEX1MSB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_INDEX2LSB",
                short_name: "INDEX2LSB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_INDEX2MSB",
                short_name: "INDEX2MSB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_INDEX4LSB",
                short_name: "INDEX4LSB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_INDEX4MSB",
                short_name: "INDEX4MSB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_INDEX8",
                short_name: "INDEX8",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_RGB332",
                short_name: "RGB332",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_XRGB4444",
                short_name: "XRGB4444",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_XBGR4444",
                short_name: "XBGR4444",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_XRGB1555",
                short_name: "XRGB1555",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_XBGR1555",
                short_name: "XBGR1555",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_ARGB4444",
                short_name: "ARGB4444",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_RGBA4444",
                short_name: "RGBA4444",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_ABGR4444",
                short_name: "ABGR4444",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_BGRA4444",
                short_name: "BGRA4444",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_ARGB1555",
                short_name: "ARGB1555",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_RGBA5551",
                short_name: "RGBA5551",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_ABGR1555",
                short_name: "ABGR1555",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_BGRA5551",
                short_name: "BGRA5551",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_RGB565",
                short_name: "RGB565",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_BGR565",
                short_name: "BGR565",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_RGB24",
                short_name: "RGB24",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_BGR24",
                short_name: "BGR24",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_XRGB8888",
                short_name: "XRGB8888",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_RGBX8888",
                short_name: "RGBX8888",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_XBGR8888",
                short_name: "XBGR8888",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_BGRX8888",
                short_name: "BGRX8888",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_ARGB8888",
                short_name: "ARGB8888",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_RGBA8888",
                short_name: "RGBA8888",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_ABGR8888",
                short_name: "ABGR8888",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_BGRA8888",
                short_name: "BGRA8888",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_XRGB2101010",
                short_name: "XRGB2101010",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_XBGR2101010",
                short_name: "XBGR2101010",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_ARGB2101010",
                short_name: "ARGB2101010",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_ABGR2101010",
                short_name: "ABGR2101010",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_RGB48",
                short_name: "RGB48",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_BGR48",
                short_name: "BGR48",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_RGBA64",
                short_name: "RGBA64",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_ARGB64",
                short_name: "ARGB64",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_BGRA64",
                short_name: "BGRA64",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_ABGR64",
                short_name: "ABGR64",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_RGB48_FLOAT",
                short_name: "RGB48_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_BGR48_FLOAT",
                short_name: "BGR48_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_RGBA64_FLOAT",
                short_name: "RGBA64_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_ARGB64_FLOAT",
                short_name: "ARGB64_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_BGRA64_FLOAT",
                short_name: "BGRA64_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_ABGR64_FLOAT",
                short_name: "ABGR64_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_RGB96_FLOAT",
                short_name: "RGB96_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_BGR96_FLOAT",
                short_name: "BGR96_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_RGBA128_FLOAT",
                short_name: "RGBA128_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_ARGB128_FLOAT",
                short_name: "ARGB128_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_BGRA128_FLOAT",
                short_name: "BGRA128_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_ABGR128_FLOAT",
                short_name: "ABGR128_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_YV12",
                short_name: "YV12",
                doc: Some("Planar mode: Y + V + U  (3 planes)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_IYUV",
                short_name: "IYUV",
                doc: Some("Planar mode: Y + U + V  (3 planes)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_YUY2",
                short_name: "YUY2",
                doc: Some("Packed mode: Y0+U0+Y1+V0 (1 plane)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_UYVY",
                short_name: "UYVY",
                doc: Some("Packed mode: U0+Y0+V0+Y1 (1 plane)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_YVYU",
                short_name: "YVYU",
                doc: Some("Packed mode: Y0+V0+Y1+U0 (1 plane)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_NV12",
                short_name: "NV12",
                doc: Some("Planar mode: Y + U/V interleaved  (2 planes)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_NV21",
                short_name: "NV21",
                doc: Some("Planar mode: Y + V/U interleaved  (2 planes)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_P010",
                short_name: "P010",
                doc: Some("Planar mode: Y + U/V interleaved  (2 planes)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_EXTERNAL_OES",
                short_name: "EXTERNAL_OES",
                doc: Some("Android video texture format\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_MJPG",
                short_name: "MJPG",
                doc: Some("Motion JPEG\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_RGBA32",
                short_name: "RGBA32",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_ARGB32",
                short_name: "ARGB32",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_BGRA32",
                short_name: "BGRA32",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_ABGR32",
                short_name: "ABGR32",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_RGBX32",
                short_name: "RGBX32",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_XRGB32",
                short_name: "XRGB32",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_BGRX32",
                short_name: "BGRX32",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_XBGR32",
                short_name: "XBGR32",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_RGBA32",
                short_name: "RGBA32",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_ARGB32",
                short_name: "ARGB32",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_BGRA32",
                short_name: "BGRA32",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_ABGR32",
                short_name: "ABGR32",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_RGBX32",
                short_name: "RGBX32",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_XRGB32",
                short_name: "XRGB32",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_BGRX32",
                short_name: "BGRX32",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_XBGR32",
                short_name: "XBGR32",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "pixels",
        kind: GroupKind::Enum,
        name: "SDL_ColorType",
        short_name: "ColorType",
        doc: Some("Colorspace color type.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_COLOR_TYPE_UNKNOWN",
                short_name: "UNKNOWN",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLOR_TYPE_RGB",
                short_name: "RGB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLOR_TYPE_YCBCR",
                short_name: "YCBCR",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "pixels",
        kind: GroupKind::Enum,
        name: "SDL_ColorRange",
        short_name: "ColorRange",
        doc: Some("Colorspace color range, as described by\n<https://www.itu.int/rec/R-REC-BT.2100-2-201807-I/en>\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_COLOR_RANGE_UNKNOWN",
                short_name: "UNKNOWN",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLOR_RANGE_LIMITED",
                short_name: "LIMITED",
                doc: Some("Narrow range, e.g. 16-235 for 8-bit RGB and luma, and 16-240 for 8-bit chroma\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLOR_RANGE_FULL",
                short_name: "FULL",
                doc: Some("Full range, e.g. 0-255 for 8-bit RGB and luma, and 1-255 for 8-bit chroma\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "pixels",
        kind: GroupKind::Enum,
        name: "SDL_ColorPrimaries",
        short_name: "ColorPrimaries",
        doc: Some("Colorspace color primaries, as described by\n<https://www.itu.int/rec/T-REC-H.273-201612-S/en>\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_COLOR_PRIMARIES_UNKNOWN",
                short_name: "UNKNOWN",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLOR_PRIMARIES_BT709",
                short_name: "BT709",
                doc: Some("ITU-R BT.709-6\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLOR_PRIMARIES_UNSPECIFIED",
                short_name: "UNSPECIFIED",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLOR_PRIMARIES_BT470M",
                short_name: "BT470M",
                doc: Some("ITU-R BT.470-6 System M\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLOR_PRIMARIES_BT470BG",
                short_name: "BT470BG",
                doc: Some("ITU-R BT.470-6 System B, G / ITU-R BT.601-7 625\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLOR_PRIMARIES_BT601",
                short_name: "BT601",
                doc: Some("ITU-R BT.601-7 525, SMPTE 170M\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLOR_PRIMARIES_SMPTE240",
                short_name: "SMPTE240",
                doc: Some("SMPTE 240M, functionally the same as [`SDL_COLOR_PRIMARIES_BT601`]\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLOR_PRIMARIES_GENERIC_FILM",
                short_name: "GENERIC_FILM",
                doc: Some("Generic film (color filters using Illuminant C)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLOR_PRIMARIES_BT2020",
                short_name: "BT2020",
                doc: Some("ITU-R BT.2020-2 / ITU-R BT.2100-0\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLOR_PRIMARIES_XYZ",
                short_name: "XYZ",
                doc: Some("SMPTE ST 428-1\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLOR_PRIMARIES_SMPTE431",
                short_name: "SMPTE431",
                doc: Some("SMPTE RP 431-2\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLOR_PRIMARIES_SMPTE432",
                short_name: "SMPTE432",
                doc: Some("SMPTE EG 432-1 / DCI P3\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLOR_PRIMARIES_EBU3213",
                short_name: "EBU3213",
                doc: Some("EBU Tech. 3213-E\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLOR_PRIMARIES_CUSTOM",
                short_name: "CUSTOM",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "pixels",
        kind: GroupKind::Enum,
        name: "SDL_TransferCharacteristics",
        short_name: "TransferCharacteristics",
        doc: Some("Colorspace transfer characteristics.\n\nThese are as described by <https://www.itu.int/rec/T-REC-H.273-201612-S/en>\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_TRANSFER_CHARACTERISTICS_UNKNOWN",
                short_name: "UNKNOWN",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_TRANSFER_CHARACTERISTICS_BT709",
                short_name: "BT709",
                doc: Some("Rec. ITU-R BT.709-6 / ITU-R BT1361\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TRANSFER_CHARACTERISTICS_UNSPECIFIED",
                short_name: "UNSPECIFIED",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_TRANSFER_CHARACTERISTICS_GAMMA22",
                short_name: "GAMMA22",
                doc: Some("ITU-R BT.470-6 System M / ITU-R BT1700 625 PAL & SECAM\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TRANSFER_CHARACTERISTICS_GAMMA28",
                short_name: "GAMMA28",
                doc: Some("ITU-R BT.470-6 System B, G\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TRANSFER_CHARACTERISTICS_BT601",
                short_name: "BT601",
                doc: Some("SMPTE ST 170M / ITU-R BT.601-7 525 or 625\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TRANSFER_CHARACTERISTICS_SMPTE240",
                short_name: "SMPTE240",
                doc: Some("SMPTE ST 240M\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TRANSFER_CHARACTERISTICS_LINEAR",
                short_name: "LINEAR",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_TRANSFER_CHARACTERISTICS_LOG100",
                short_name: "LOG100",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_TRANSFER_CHARACTERISTICS_LOG100_SQRT10",
                short_name: "LOG100_SQRT10",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_TRANSFER_CHARACTERISTICS_IEC61966",
                short_name: "IEC61966",
                doc: Some("IEC 61966-2-4\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TRANSFER_CHARACTERISTICS_BT1361",
                short_name: "BT1361",
                doc: Some("ITU-R BT1361 Extended Colour Gamut\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TRANSFER_CHARACTERISTICS_SRGB",
                short_name: "SRGB",
                doc: Some("IEC 61966-2-1 (sRGB or sYCC)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TRANSFER_CHARACTERISTICS_BT2020_10BIT",
                short_name: "BT2020_10BIT",
                doc: Some("ITU-R BT2020 for 10-bit system\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TRANSFER_CHARACTERISTICS_BT2020_12BIT",
                short_name: "BT2020_12BIT",
                doc: Some("ITU-R BT2020 for 12-bit system\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TRANSFER_CHARACTERISTICS_PQ",
                short_name: "PQ",
                doc: Some("SMPTE ST 2084 for 10-, 12-, 14- and 16-bit systems\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TRANSFER_CHARACTERISTICS_SMPTE428",
                short_name: "SMPTE428",
                doc: Some("SMPTE ST 428-1\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TRANSFER_CHARACTERISTICS_HLG",
                short_name: "HLG",
                doc: Some("ARIB STD-B67, known as \"hybrid log-gamma\" (HLG)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TRANSFER_CHARACTERISTICS_CUSTOM",
                short_name: "CUSTOM",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "pixels",
        kind: GroupKind::Enum,
        name: "SDL_MatrixCoefficients",
        short_name: "MatrixCoefficients",
        doc: Some("Colorspace matrix coefficients.\n\nThese are as described by <https://www.itu.int/rec/T-REC-H.273-201612-S/en>\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_MATRIX_COEFFICIENTS_IDENTITY",
                short_name: "IDENTITY",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_MATRIX_COEFFICIENTS_BT709",
                short_name: "BT709",
                doc: Some("ITU-R BT.709-6\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_MATRIX_COEFFICIENTS_UNSPECIFIED",
                short_name: "UNSPECIFIED",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_MATRIX_COEFFICIENTS_FCC",
                short_name: "FCC",
                doc: Some("US FCC Title 47\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_MATRIX_COEFFICIENTS_BT470BG",
                short_name: "BT470BG",
                doc: Some("ITU-R BT.470-6 System B, G / ITU-R BT.601-7 625, functionally the same as [`SDL_MATRIX_COEFFICIENTS_BT601`]\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_MATRIX_COEFFICIENTS_BT601",
                short_name: "BT601",
                doc: Some("ITU-R BT.601-7 525\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_MATRIX_COEFFICIENTS_SMPTE240",
                short_name: "SMPTE240",
                doc: Some("SMPTE 240M\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_MATRIX_COEFFICIENTS_YCGCO",
                short_name: "YCGCO",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_MATRIX_COEFFICIENTS_BT2020_NCL",
                short_name: "BT2020_NCL",
                doc: Some("ITU-R BT.2020-2 non-constant luminance\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_MATRIX_COEFFICIENTS_BT2020_CL",
                short_name: "BT2020_CL",
                doc: Some("ITU-R BT.2020-2 constant luminance\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_MATRIX_COEFFICIENTS_SMPTE2085",
                short_name: "SMPTE2085",
                doc: Some("SMPTE ST 2085\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_MATRIX_COEFFICIENTS_CHROMA_DERIVED_NCL",
                short_name: "CHROMA_DERIVED_NCL",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_MATRIX_COEFFICIENTS_CHROMA_DERIVED_CL",
                short_name: "CHROMA_DERIVED_CL",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_MATRIX_COEFFICIENTS_ICTCP",
                short_name: "ICTCP",
                doc: Some("ITU-R BT.2100-0 ICTCP\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_MATRIX_COEFFICIENTS_CUSTOM",
                short_name: "CUSTOM",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "pixels",
        kind: GroupKind::Enum,
        name: "SDL_ChromaLocation",
        short_name: "ChromaLocation",
        doc: Some("Colorspace chroma sample location.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_CHROMA_LOCATION_NONE",
                short_name: "NONE",
                doc: Some("RGB, no chroma sampling\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_CHROMA_LOCATION_LEFT",
                short_name: "LEFT",
                doc: Some("In MPEG-2, MPEG-4, and AVC, Cb and Cr are taken on midpoint of the left-edge of the 2x2 square. In other words, they have the same horizontal location as the top-left pixel, but is shifted one-half pixel down vertically.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_CHROMA_LOCATION_CENTER",
                short_name: "CENTER",
                doc: Some("In JPEG/JFIF, H.261, and MPEG-1, Cb and Cr are taken at the center of the 2x2 square. In other words, they are offset one-half pixel to the right and one-half pixel down compared to the top-left pixel.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_CHROMA_LOCATION_TOPLEFT",
                short_name: "TOPLEFT",
                doc: Some("In HEVC for BT.2020 and BT.2100 content (in particular on Blu-rays), Cb and Cr are sampled at the same location as the group's top-left Y pixel (\"co-sited\", \"co-located\").\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "pixels",
        kind: GroupKind::Enum,
        name: "SDL_Colorspace",
        short_name: "Colorspace",
        doc: Some("Colorspace definitions.\n\nSince similar colorspaces may vary in their details (matrix, transfer\nfunction, etc.), this is not an exhaustive list, but rather a\nrepresentative sample of the kinds of colorspaces supported in SDL.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_ColorPrimaries`]\n- [`SDL_ColorRange`]\n- [`SDL_ColorType`]\n- [`SDL_MatrixCoefficients`]\n- [`SDL_TransferCharacteristics`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_COLORSPACE_UNKNOWN",
                short_name: "UNKNOWN",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLORSPACE_SRGB",
                short_name: "SRGB",
                doc: Some("Equivalent to DXGI_COLOR_SPACE_RGB_FULL_G22_NONE_P709\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLORSPACE_SRGB_LINEAR",
                short_name: "SRGB_LINEAR",
                doc: Some("Equivalent to DXGI_COLOR_SPACE_RGB_FULL_G10_NONE_P709\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLORSPACE_HDR10",
                short_name: "HDR10",
                doc: Some("Equivalent to DXGI_COLOR_SPACE_RGB_FULL_G2084_NONE_P2020\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLORSPACE_JPEG",
                short_name: "JPEG",
                doc: Some("Equivalent to DXGI_COLOR_SPACE_YCBCR_FULL_G22_NONE_P709_X601\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLORSPACE_BT601_LIMITED",
                short_name: "BT601_LIMITED",
                doc: Some("Equivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P601\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLORSPACE_BT601_FULL",
                short_name: "BT601_FULL",
                doc: Some("Equivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P601\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLORSPACE_BT709_LIMITED",
                short_name: "BT709_LIMITED",
                doc: Some("Equivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P709\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLORSPACE_BT709_FULL",
                short_name: "BT709_FULL",
                doc: Some("Equivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P709\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLORSPACE_BT2020_LIMITED",
                short_name: "BT2020_LIMITED",
                doc: Some("Equivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P2020\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLORSPACE_BT2020_FULL",
                short_name: "BT2020_FULL",
                doc: Some("Equivalent to DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P2020\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLORSPACE_RGB_DEFAULT",
                short_name: "RGB_DEFAULT",
                doc: Some("The default colorspace for RGB surfaces if no colorspace is specified\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLORSPACE_YUV_DEFAULT",
                short_name: "YUV_DEFAULT",
                doc: Some("The default colorspace for YUV surfaces if no colorspace is specified\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "power",
        kind: GroupKind::Enum,
        name: "SDL_PowerState",
        short_name: "PowerState",
        doc: Some("The basic state for the system's power supply.\n\nThese are results returned by [`SDL_GetPowerInfo()`].\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_POWERSTATE_ERROR",
                short_name: "ERROR",
                doc: Some("error determining power status\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_POWERSTATE_UNKNOWN",
                short_name: "UNKNOWN",
                doc: Some("cannot determine power status\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_POWERSTATE_ON_BATTERY",
                short_name: "ON_BATTERY",
                doc: Some("Not plugged in, running on the battery\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_POWERSTATE_NO_BATTERY",
                short_name: "NO_BATTERY",
                doc: Some("Plugged in, no battery available\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_POWERSTATE_CHARGING",
                short_name: "CHARGING",
                doc: Some("Plugged in, charging battery\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_POWERSTATE_CHARGED",
                short_name: "CHARGED",
                doc: Some("Plugged in, battery charged\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "process",
        kind: GroupKind::Enum,
        name: "SDL_ProcessIO",
        short_name: "ProcessIO",
        doc: Some("Description of where standard I/O should be directed when creating a\nprocess.\n\nIf a standard I/O stream is set to [`SDL_PROCESS_STDIO_INHERITED`], it will go\nto the same place as the application's I/O stream. This is the default for\nstandard output and standard error.\n\nIf a standard I/O stream is set to [`SDL_PROCESS_STDIO_NULL`], it is connected\nto `NUL:` on Windows and `/dev/null` on POSIX systems. This is the default\nfor standard input.\n\nIf a standard I/O stream is set to [`SDL_PROCESS_STDIO_APP`], it is connected\nto a new [`SDL_IOStream`] that is available to the application. Standard input\nwill be available as [`SDL_PROP_PROCESS_STDIN_POINTER`] and allows\n[`SDL_GetProcessInput()`], standard output will be available as\n[`SDL_PROP_PROCESS_STDOUT_POINTER`] and allows [`SDL_ReadProcess()`] and\n[`SDL_GetProcessOutput()`], and standard error will be available as\n[`SDL_PROP_PROCESS_STDERR_POINTER`] in the properties for the created\nprocess.\n\nIf a standard I/O stream is set to [`SDL_PROCESS_STDIO_REDIRECT`], it is\nconnected to an existing [`SDL_IOStream`] provided by the application. Standard\ninput is provided using [`SDL_PROP_PROCESS_CREATE_STDIN_POINTER`], standard\noutput is provided using [`SDL_PROP_PROCESS_CREATE_STDOUT_POINTER`], and\nstandard error is provided using [`SDL_PROP_PROCESS_CREATE_STDERR_POINTER`]\nin the creation properties. These existing streams should be closed by the\napplication once the new process is created.\n\nIn order to use an [`SDL_IOStream`] with [`SDL_PROCESS_STDIO_REDIRECT`], it must\nhave [`SDL_PROP_IOSTREAM_WINDOWS_HANDLE_POINTER`] or\n[`SDL_PROP_IOSTREAM_FILE_DESCRIPTOR_NUMBER`] set. This is true for streams\nrepresenting files and process I/O.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_CreateProcessWithProperties`]\n- [`SDL_GetProcessProperties`]\n- [`SDL_ReadProcess`]\n- [`SDL_GetProcessInput`]\n- [`SDL_GetProcessOutput`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_PROCESS_STDIO_INHERITED",
                short_name: "INHERITED",
                doc: Some("The I/O stream is inherited from the application.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PROCESS_STDIO_NULL",
                short_name: "NULL",
                doc: Some("The I/O stream is ignored.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PROCESS_STDIO_APP",
                short_name: "APP",
                doc: Some("The I/O stream is connected to a new [`SDL_IOStream`] that the application can read or write\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PROCESS_STDIO_REDIRECT",
                short_name: "REDIRECT",
                doc: Some("The I/O stream is redirected to an existing [`SDL_IOStream`].\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "properties",
        kind: GroupKind::Id,
        name: "SDL_PropertiesID",
        short_name: "PropertiesID",
        doc: Some("SDL properties ID\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
        ],
    },
    Group {
        module: "properties",
        kind: GroupKind::Enum,
        name: "SDL_PropertyType",
        short_name: "PropertyType",
        doc: Some("SDL property type\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_PROPERTY_TYPE_INVALID",
                short_name: "INVALID",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PROPERTY_TYPE_POINTER",
                short_name: "POINTER",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PROPERTY_TYPE_STRING",
                short_name: "STRING",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PROPERTY_TYPE_NUMBER",
                short_name: "NUMBER",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PROPERTY_TYPE_FLOAT",
                short_name: "FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PROPERTY_TYPE_BOOLEAN",
                short_name: "BOOLEAN",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "render",
        kind: GroupKind::Enum,
        name: "SDL_TextureAccess",
        short_name: "TextureAccess",
        doc: Some("The access pattern allowed for a texture.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_TEXTUREACCESS_STATIC",
                short_name: "STATIC",
                doc: Some("Changes rarely, not lockable\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TEXTUREACCESS_STREAMING",
                short_name: "STREAMING",
                doc: Some("Changes frequently, lockable\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TEXTUREACCESS_TARGET",
                short_name: "TARGET",
                doc: Some("Texture can be used as a render target\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "render",
        kind: GroupKind::Enum,
        name: "SDL_RendererLogicalPresentation",
        short_name: "RendererLogicalPresentation",
        doc: Some("How the logical size is mapped to the output.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_LOGICAL_PRESENTATION_DISABLED",
                short_name: "DISABLED",
                doc: Some("There is no logical size in effect\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOGICAL_PRESENTATION_STRETCH",
                short_name: "STRETCH",
                doc: Some("The rendered content is stretched to the output resolution\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOGICAL_PRESENTATION_LETTERBOX",
                short_name: "LETTERBOX",
                doc: Some("The rendered content is fit to the largest dimension and the other dimension is letterboxed with black bars\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOGICAL_PRESENTATION_OVERSCAN",
                short_name: "OVERSCAN",
                doc: Some("The rendered content is fit to the smallest dimension and the other dimension extends beyond the output bounds\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOGICAL_PRESENTATION_INTEGER_SCALE",
                short_name: "INTEGER_SCALE",
                doc: Some("The rendered content is scaled up by integer multiples to fit the output resolution\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "scancode",
        kind: GroupKind::Enum,
        name: "SDL_Scancode",
        short_name: "Scancode",
        doc: Some("The SDL keyboard scancode representation.\n\nAn SDL scancode is the physical representation of a key on the keyboard,\nindependent of language and keyboard mapping.\n\nValues of this type are used to represent keyboard keys, among other places\nin the `scancode` field of the [`SDL_KeyboardEvent`] structure.\n\nThe values in this enumeration are based on the USB usage page standard:\n<https://usb.org/sites/default/files/hut1_5.pdf>\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_SCANCODE_UNKNOWN",
                short_name: "UNKNOWN",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_A",
                short_name: "A",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_B",
                short_name: "B",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_C",
                short_name: "C",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_D",
                short_name: "D",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_E",
                short_name: "E",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_F",
                short_name: "F",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_G",
                short_name: "G",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_H",
                short_name: "H",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_I",
                short_name: "I",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_J",
                short_name: "J",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_K",
                short_name: "K",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_L",
                short_name: "L",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_M",
                short_name: "M",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_N",
                short_name: "N",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_O",
                short_name: "O",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_P",
                short_name: "P",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_Q",
                short_name: "Q",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_R",
                short_name: "R",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_S",
                short_name: "S",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_T",
                short_name: "T",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_U",
                short_name: "U",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_V",
                short_name: "V",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_W",
                short_name: "W",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_X",
                short_name: "X",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_Y",
                short_name: "Y",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_Z",
                short_name: "Z",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_1",
                short_name: "_1",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_2",
                short_name: "_2",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_3",
                short_name: "_3",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_4",
                short_name: "_4",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_5",
                short_name: "_5",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_6",
                short_name: "_6",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_7",
                short_name: "_7",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_8",
                short_name: "_8",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_9",
                short_name: "_9",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_0",
                short_name: "_0",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_RETURN",
                short_name: "RETURN",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_ESCAPE",
                short_name: "ESCAPE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_BACKSPACE",
                short_name: "BACKSPACE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_TAB",
                short_name: "TAB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_SPACE",
                short_name: "SPACE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_MINUS",
                short_name: "MINUS",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_EQUALS",
                short_name: "EQUALS",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_LEFTBRACKET",
                short_name: "LEFTBRACKET",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_RIGHTBRACKET",
                short_name: "RIGHTBRACKET",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_BACKSLASH",
                short_name: "BACKSLASH",
                doc: Some("Located at the lower left of the return\nkey on ISO keyboards and at the right end\nof the QWERTY row on ANSI keyboards.\nProduces REVERSE SOLIDUS (backslash) and\nVERTICAL LINE in a US layout, REVERSE\nSOLIDUS and VERTICAL LINE in a UK Mac\nlayout, NUMBER SIGN and TILDE in a UK\nWindows layout, DOLLAR SIGN and POUND SIGN\nin a Swiss German layout, NUMBER SIGN and\nAPOSTROPHE in a German layout, GRAVE\nACCENT and POUND SIGN in a French Mac\nlayout, and ASTERISK and MICRO SIGN in a\nFrench Windows layout.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_NONUSHASH",
                short_name: "NONUSHASH",
                doc: Some("ISO USB keyboards actually use this code\ninstead of 49 for the same key, but all\nOSes I've seen treat the two codes\nidentically. So, as an implementor, unless\nyour keyboard generates both of those\ncodes and your OS treats them differently,\nyou should generate [`SDL_SCANCODE_BACKSLASH`]\ninstead of this code. As a user, you\nshould not rely on this code because SDL\nwill never generate it with most (all?)\nkeyboards.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_SEMICOLON",
                short_name: "SEMICOLON",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_APOSTROPHE",
                short_name: "APOSTROPHE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_GRAVE",
                short_name: "GRAVE",
                doc: Some("Located in the top left corner (on both ANSI\nand ISO keyboards). Produces GRAVE ACCENT and\nTILDE in a US Windows layout and in US and UK\nMac layouts on ANSI keyboards, GRAVE ACCENT\nand NOT SIGN in a UK Windows layout, SECTION\nSIGN and PLUS-MINUS SIGN in US and UK Mac\nlayouts on ISO keyboards, SECTION SIGN and\nDEGREE SIGN in a Swiss German layout (Mac:\nonly on ISO keyboards), CIRCUMFLEX ACCENT and\nDEGREE SIGN in a German layout (Mac: only on\nISO keyboards), SUPERSCRIPT TWO and TILDE in a\nFrench Windows layout, COMMERCIAL AT and\nNUMBER SIGN in a French Mac layout on ISO\nkeyboards, and LESS-THAN SIGN and GREATER-THAN\nSIGN in a Swiss German, German, or French Mac\nlayout on ANSI keyboards.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_COMMA",
                short_name: "COMMA",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_PERIOD",
                short_name: "PERIOD",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_SLASH",
                short_name: "SLASH",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_CAPSLOCK",
                short_name: "CAPSLOCK",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_F1",
                short_name: "F1",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_F2",
                short_name: "F2",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_F3",
                short_name: "F3",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_F4",
                short_name: "F4",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_F5",
                short_name: "F5",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_F6",
                short_name: "F6",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_F7",
                short_name: "F7",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_F8",
                short_name: "F8",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_F9",
                short_name: "F9",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_F10",
                short_name: "F10",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_F11",
                short_name: "F11",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_F12",
                short_name: "F12",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_PRINTSCREEN",
                short_name: "PRINTSCREEN",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_SCROLLLOCK",
                short_name: "SCROLLLOCK",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_PAUSE",
                short_name: "PAUSE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_INSERT",
                short_name: "INSERT",
                doc: Some("insert on PC, help on some Mac keyboards (but\ndoes send code 73, not 117)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_HOME",
                short_name: "HOME",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_PAGEUP",
                short_name: "PAGEUP",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_DELETE",
                short_name: "DELETE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_END",
                short_name: "END",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_PAGEDOWN",
                short_name: "PAGEDOWN",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_RIGHT",
                short_name: "RIGHT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_LEFT",
                short_name: "LEFT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_DOWN",
                short_name: "DOWN",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_UP",
                short_name: "UP",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_NUMLOCKCLEAR",
                short_name: "NUMLOCKCLEAR",
                doc: Some("num lock on PC, clear on Mac keyboards\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_DIVIDE",
                short_name: "KP_DIVIDE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_MULTIPLY",
                short_name: "KP_MULTIPLY",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_MINUS",
                short_name: "KP_MINUS",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_PLUS",
                short_name: "KP_PLUS",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_ENTER",
                short_name: "KP_ENTER",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_1",
                short_name: "KP_1",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_2",
                short_name: "KP_2",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_3",
                short_name: "KP_3",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_4",
                short_name: "KP_4",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_5",
                short_name: "KP_5",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_6",
                short_name: "KP_6",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_7",
                short_name: "KP_7",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_8",
                short_name: "KP_8",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_9",
                short_name: "KP_9",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_0",
                short_name: "KP_0",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_PERIOD",
                short_name: "KP_PERIOD",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_NONUSBACKSLASH",
                short_name: "NONUSBACKSLASH",
                doc: Some("This is the additional key that ISO\nkeyboards have over ANSI ones,\nlocated between left shift and Y.\nProduces GRAVE ACCENT and TILDE in a\nUS or UK Mac layout, REVERSE SOLIDUS\n(backslash) and VERTICAL LINE in a\nUS or UK Windows layout, and\nLESS-THAN SIGN and GREATER-THAN SIGN\nin a Swiss German, German, or French\nlayout.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_APPLICATION",
                short_name: "APPLICATION",
                doc: Some("windows contextual menu, compose\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_POWER",
                short_name: "POWER",
                doc: Some("The USB document says this is a status flag,\nnot a physical key - but some Mac keyboards\ndo have a power key.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_EQUALS",
                short_name: "KP_EQUALS",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_F13",
                short_name: "F13",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_F14",
                short_name: "F14",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_F15",
                short_name: "F15",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_F16",
                short_name: "F16",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_F17",
                short_name: "F17",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_F18",
                short_name: "F18",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_F19",
                short_name: "F19",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_F20",
                short_name: "F20",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_F21",
                short_name: "F21",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_F22",
                short_name: "F22",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_F23",
                short_name: "F23",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_F24",
                short_name: "F24",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_EXECUTE",
                short_name: "EXECUTE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_HELP",
                short_name: "HELP",
                doc: Some("AL Integrated Help Center\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_MENU",
                short_name: "MENU",
                doc: Some("Menu (show menu)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_SELECT",
                short_name: "SELECT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_STOP",
                short_name: "STOP",
                doc: Some("AC Stop\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_AGAIN",
                short_name: "AGAIN",
                doc: Some("AC Redo/Repeat\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_UNDO",
                short_name: "UNDO",
                doc: Some("AC Undo\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_CUT",
                short_name: "CUT",
                doc: Some("AC Cut\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_COPY",
                short_name: "COPY",
                doc: Some("AC Copy\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_PASTE",
                short_name: "PASTE",
                doc: Some("AC Paste\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_FIND",
                short_name: "FIND",
                doc: Some("AC Find\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_MUTE",
                short_name: "MUTE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_VOLUMEUP",
                short_name: "VOLUMEUP",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_VOLUMEDOWN",
                short_name: "VOLUMEDOWN",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_COMMA",
                short_name: "KP_COMMA",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_EQUALSAS400",
                short_name: "KP_EQUALSAS400",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_INTERNATIONAL1",
                short_name: "INTERNATIONAL1",
                doc: Some("used on Asian keyboards, see\nfootnotes in USB doc\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_INTERNATIONAL2",
                short_name: "INTERNATIONAL2",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_INTERNATIONAL3",
                short_name: "INTERNATIONAL3",
                doc: Some("Yen\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_INTERNATIONAL4",
                short_name: "INTERNATIONAL4",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_INTERNATIONAL5",
                short_name: "INTERNATIONAL5",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_INTERNATIONAL6",
                short_name: "INTERNATIONAL6",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_INTERNATIONAL7",
                short_name: "INTERNATIONAL7",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_INTERNATIONAL8",
                short_name: "INTERNATIONAL8",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_INTERNATIONAL9",
                short_name: "INTERNATIONAL9",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_LANG1",
                short_name: "LANG1",
                doc: Some("Hangul/English toggle\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_LANG2",
                short_name: "LANG2",
                doc: Some("Hanja conversion\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_LANG3",
                short_name: "LANG3",
                doc: Some("Katakana\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_LANG4",
                short_name: "LANG4",
                doc: Some("Hiragana\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_LANG5",
                short_name: "LANG5",
                doc: Some("Zenkaku/Hankaku\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_LANG6",
                short_name: "LANG6",
                doc: Some("reserved\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_LANG7",
                short_name: "LANG7",
                doc: Some("reserved\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_LANG8",
                short_name: "LANG8",
                doc: Some("reserved\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_LANG9",
                short_name: "LANG9",
                doc: Some("reserved\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_ALTERASE",
                short_name: "ALTERASE",
                doc: Some("Erase-Eaze\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_SYSREQ",
                short_name: "SYSREQ",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_CANCEL",
                short_name: "CANCEL",
                doc: Some("AC Cancel\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_CLEAR",
                short_name: "CLEAR",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_PRIOR",
                short_name: "PRIOR",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_RETURN2",
                short_name: "RETURN2",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_SEPARATOR",
                short_name: "SEPARATOR",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_OUT",
                short_name: "OUT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_OPER",
                short_name: "OPER",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_CLEARAGAIN",
                short_name: "CLEARAGAIN",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_CRSEL",
                short_name: "CRSEL",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_EXSEL",
                short_name: "EXSEL",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_00",
                short_name: "KP_00",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_000",
                short_name: "KP_000",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_THOUSANDSSEPARATOR",
                short_name: "THOUSANDSSEPARATOR",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_DECIMALSEPARATOR",
                short_name: "DECIMALSEPARATOR",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_CURRENCYUNIT",
                short_name: "CURRENCYUNIT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_CURRENCYSUBUNIT",
                short_name: "CURRENCYSUBUNIT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_LEFTPAREN",
                short_name: "KP_LEFTPAREN",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_RIGHTPAREN",
                short_name: "KP_RIGHTPAREN",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_LEFTBRACE",
                short_name: "KP_LEFTBRACE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_RIGHTBRACE",
                short_name: "KP_RIGHTBRACE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_TAB",
                short_name: "KP_TAB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_BACKSPACE",
                short_name: "KP_BACKSPACE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_A",
                short_name: "KP_A",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_B",
                short_name: "KP_B",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_C",
                short_name: "KP_C",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_D",
                short_name: "KP_D",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_E",
                short_name: "KP_E",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_F",
                short_name: "KP_F",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_XOR",
                short_name: "KP_XOR",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_POWER",
                short_name: "KP_POWER",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_PERCENT",
                short_name: "KP_PERCENT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_LESS",
                short_name: "KP_LESS",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_GREATER",
                short_name: "KP_GREATER",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_AMPERSAND",
                short_name: "KP_AMPERSAND",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_DBLAMPERSAND",
                short_name: "KP_DBLAMPERSAND",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_VERTICALBAR",
                short_name: "KP_VERTICALBAR",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_DBLVERTICALBAR",
                short_name: "KP_DBLVERTICALBAR",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_COLON",
                short_name: "KP_COLON",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_HASH",
                short_name: "KP_HASH",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_SPACE",
                short_name: "KP_SPACE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_AT",
                short_name: "KP_AT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_EXCLAM",
                short_name: "KP_EXCLAM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_MEMSTORE",
                short_name: "KP_MEMSTORE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_MEMRECALL",
                short_name: "KP_MEMRECALL",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_MEMCLEAR",
                short_name: "KP_MEMCLEAR",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_MEMADD",
                short_name: "KP_MEMADD",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_MEMSUBTRACT",
                short_name: "KP_MEMSUBTRACT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_MEMMULTIPLY",
                short_name: "KP_MEMMULTIPLY",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_MEMDIVIDE",
                short_name: "KP_MEMDIVIDE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_PLUSMINUS",
                short_name: "KP_PLUSMINUS",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_CLEAR",
                short_name: "KP_CLEAR",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_CLEARENTRY",
                short_name: "KP_CLEARENTRY",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_BINARY",
                short_name: "KP_BINARY",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_OCTAL",
                short_name: "KP_OCTAL",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_DECIMAL",
                short_name: "KP_DECIMAL",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_HEXADECIMAL",
                short_name: "KP_HEXADECIMAL",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_LCTRL",
                short_name: "LCTRL",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_LSHIFT",
                short_name: "LSHIFT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_LALT",
                short_name: "LALT",
                doc: Some("alt, option\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_LGUI",
                short_name: "LGUI",
                doc: Some("windows, command (apple), meta\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_RCTRL",
                short_name: "RCTRL",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_RSHIFT",
                short_name: "RSHIFT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_RALT",
                short_name: "RALT",
                doc: Some("alt gr, option\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_RGUI",
                short_name: "RGUI",
                doc: Some("windows, command (apple), meta\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_MODE",
                short_name: "MODE",
                doc: Some("I'm not sure if this is really not covered\nby any of the above, but since there's a\nspecial [`SDL_KMOD_MODE`] for it I'm adding it here\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_SLEEP",
                short_name: "SLEEP",
                doc: Some("Sleep\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_WAKE",
                short_name: "WAKE",
                doc: Some("Wake\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_CHANNEL_INCREMENT",
                short_name: "CHANNEL_INCREMENT",
                doc: Some("Channel Increment\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_CHANNEL_DECREMENT",
                short_name: "CHANNEL_DECREMENT",
                doc: Some("Channel Decrement\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_MEDIA_PLAY",
                short_name: "MEDIA_PLAY",
                doc: Some("Play\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_MEDIA_PAUSE",
                short_name: "MEDIA_PAUSE",
                doc: Some("Pause\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_MEDIA_RECORD",
                short_name: "MEDIA_RECORD",
                doc: Some("Record\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_MEDIA_FAST_FORWARD",
                short_name: "MEDIA_FAST_FORWARD",
                doc: Some("Fast Forward\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_MEDIA_REWIND",
                short_name: "MEDIA_REWIND",
                doc: Some("Rewind\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_MEDIA_NEXT_TRACK",
                short_name: "MEDIA_NEXT_TRACK",
                doc: Some("Next Track\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_MEDIA_PREVIOUS_TRACK",
                short_name: "MEDIA_PREVIOUS_TRACK",
                doc: Some("Previous Track\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_MEDIA_STOP",
                short_name: "MEDIA_STOP",
                doc: Some("Stop\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_MEDIA_EJECT",
                short_name: "MEDIA_EJECT",
                doc: Some("Eject\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_MEDIA_PLAY_PAUSE",
                short_name: "MEDIA_PLAY_PAUSE",
                doc: Some("Play / Pause\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_MEDIA_SELECT",
                short_name: "MEDIA_SELECT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_AC_NEW",
                short_name: "AC_NEW",
                doc: Some("AC New\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_AC_OPEN",
                short_name: "AC_OPEN",
                doc: Some("AC Open\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_AC_CLOSE",
                short_name: "AC_CLOSE",
                doc: Some("AC Close\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_AC_EXIT",
                short_name: "AC_EXIT",
                doc: Some("AC Exit\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_AC_SAVE",
                short_name: "AC_SAVE",
                doc: Some("AC Save\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_AC_PRINT",
                short_name: "AC_PRINT",
                doc: Some("AC Print\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_AC_PROPERTIES",
                short_name: "AC_PROPERTIES",
                doc: Some("AC Properties\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_AC_SEARCH",
                short_name: "AC_SEARCH",
                doc: Some("AC Search\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_AC_HOME",
                short_name: "AC_HOME",
                doc: Some("AC Home\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_AC_BACK",
                short_name: "AC_BACK",
                doc: Some("AC Back\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_AC_FORWARD",
                short_name: "AC_FORWARD",
                doc: Some("AC Forward\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_AC_STOP",
                short_name: "AC_STOP",
                doc: Some("AC Stop\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_AC_REFRESH",
                short_name: "AC_REFRESH",
                doc: Some("AC Refresh\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_AC_BOOKMARKS",
                short_name: "AC_BOOKMARKS",
                doc: Some("AC Bookmarks\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_SOFTLEFT",
                short_name: "SOFTLEFT",
                doc: Some("Usually situated below the display on phones and\nused as a multi-function feature key for selecting\na software defined function shown on the bottom left\nof the display.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_SOFTRIGHT",
                short_name: "SOFTRIGHT",
                doc: Some("Usually situated below the display on phones and\nused as a multi-function feature key for selecting\na software defined function shown on the bottom right\nof the display.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_CALL",
                short_name: "CALL",
                doc: Some("Used for accepting phone calls.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_ENDCALL",
                short_name: "ENDCALL",
                doc: Some("Used for rejecting phone calls.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_RESERVED",
                short_name: "RESERVED",
                doc: Some("400-500 reserved for dynamic keycodes\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_COUNT",
                short_name: "COUNT",
                doc: Some("not a key, just marks the number of scancodes for array bounds\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "sensor",
        kind: GroupKind::Id,
        name: "SDL_SensorID",
        short_name: "SensorID",
        doc: Some("This is a unique ID for a sensor for the time it is connected to the\nsystem, and is never reused for the lifetime of the application.\n\nThe value 0 is an invalid ID.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
        ],
    },
    Group {
        module: "sensor",
        kind: GroupKind::Enum,
        name: "SDL_SensorType",
        short_name: "SensorType",
        doc: Some("The different sensors defined by SDL.\n\nAdditional sensors may be available, using platform dependent semantics.\n\nHere are the additional Android sensors:\n\n<https://developer.android.com/reference/android/hardware/SensorEvent.html#values>\n\nAccelerometer sensor notes:\n\nThe accelerometer returns the current acceleration in SI meters per second\nsquared. This measurement includes the force of gravity, so a device at\nrest will have an value of [`SDL_STANDARD_GRAVITY`] away from the center of the\nearth, which is a positive Y value.\n\n- `values[0]`: Acceleration on the x axis\n- `values[1]`: Acceleration on the y axis\n- `values[2]`: Acceleration on the z axis\n\nFor phones and tablets held in natural orientation and game controllers\nheld in front of you, the axes are defined as follows:\n\n- -X ... +X : left ... right\n- -Y ... +Y : bottom ... top\n- -Z ... +Z : farther ... closer\n\nThe accelerometer axis data is not changed when the device is rotated.\n\nGyroscope sensor notes:\n\nThe gyroscope returns the current rate of rotation in radians per second.\nThe rotation is positive in the counter-clockwise direction. That is, an\nobserver looking from a positive location on one of the axes would see\npositive rotation on that axis when it appeared to be rotating\ncounter-clockwise.\n\n- `values[0]`: Angular speed around the x axis (pitch)\n- `values[1]`: Angular speed around the y axis (yaw)\n- `values[2]`: Angular speed around the z axis (roll)\n\nFor phones and tablets held in natural orientation and game controllers\nheld in front of you, the axes are defined as follows:\n\n- -X ... +X : left ... right\n- -Y ... +Y : bottom ... top\n- -Z ... +Z : farther ... closer\n\nThe gyroscope axis data is not changed when the device is rotated.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_GetCurrentDisplayOrientation`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_SENSOR_INVALID",
                short_name: "INVALID",
                doc: Some("Returned for an invalid sensor\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SENSOR_UNKNOWN",
                short_name: "UNKNOWN",
                doc: Some("Unknown sensor type\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SENSOR_ACCEL",
                short_name: "ACCEL",
                doc: Some("Accelerometer\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SENSOR_GYRO",
                short_name: "GYRO",
                doc: Some("Gyroscope\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SENSOR_ACCEL_L",
                short_name: "ACCEL_L",
                doc: Some("Accelerometer for left Joy-Con controller and Wii nunchuk\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SENSOR_GYRO_L",
                short_name: "GYRO_L",
                doc: Some("Gyroscope for left Joy-Con controller\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SENSOR_ACCEL_R",
                short_name: "ACCEL_R",
                doc: Some("Accelerometer for right Joy-Con controller\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SENSOR_GYRO_R",
                short_name: "GYRO_R",
                doc: Some("Gyroscope for right Joy-Con controller\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "surface",
        kind: GroupKind::Flags,
        name: "SDL_SurfaceFlags",
        short_name: "SurfaceFlags",
        doc: Some("The flags on an [`SDL_Surface`].\n\nThese are generally considered read-only.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_SURFACE_PREALLOCATED",
                short_name: "PREALLOCATED",
                doc: Some("Surface uses preallocated pixel memory\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SURFACE_LOCK_NEEDED",
                short_name: "LOCK_NEEDED",
                doc: Some("Surface needs to be locked to access pixels\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SURFACE_LOCKED",
                short_name: "LOCKED",
                doc: Some("Surface is currently locked\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SURFACE_SIMD_ALIGNED",
                short_name: "SIMD_ALIGNED",
                doc: Some("Surface uses pixel memory allocated with [`SDL_aligned_alloc()`]\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "surface",
        kind: GroupKind::Enum,
        name: "SDL_ScaleMode",
        short_name: "ScaleMode",
        doc: Some("The scaling mode.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_SCALEMODE_INVALID",
                short_name: "INVALID",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCALEMODE_NEAREST",
                short_name: "NEAREST",
                doc: Some("nearest pixel sampling\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCALEMODE_LINEAR",
                short_name: "LINEAR",
                doc: Some("linear filtering\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "surface",
        kind: GroupKind::Enum,
        name: "SDL_FlipMode",
        short_name: "FlipMode",
        doc: Some("The flip mode.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_FLIP_NONE",
                short_name: "NONE",
                doc: Some("Do not flip\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_FLIP_HORIZONTAL",
                short_name: "HORIZONTAL",
                doc: Some("flip horizontally\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_FLIP_VERTICAL",
                short_name: "VERTICAL",
                doc: Some("flip vertically\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "system",
        kind: GroupKind::Enum,
        name: "SDL_Sandbox",
        short_name: "Sandbox",
        doc: Some("Application sandbox environment.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_SANDBOX_NONE",
                short_name: "NONE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SANDBOX_UNKNOWN_CONTAINER",
                short_name: "UNKNOWN_CONTAINER",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SANDBOX_FLATPAK",
                short_name: "FLATPAK",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SANDBOX_SNAP",
                short_name: "SNAP",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SANDBOX_MACOS",
                short_name: "MACOS",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "thread",
        kind: GroupKind::Id,
        name: "SDL_ThreadID",
        short_name: "ThreadID",
        doc: Some("A unique numeric ID that identifies a thread.\n\nThese are different from [`SDL_Thread`] objects, which are generally what an\napplication will operate on, but having a way to uniquely identify a thread\ncan be useful at times.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n\n## See also\n- [`SDL_GetThreadID`]\n- [`SDL_GetCurrentThreadID`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
        ],
    },
    Group {
        module: "thread",
        kind: GroupKind::Id,
        name: "SDL_TLSID",
        short_name: "TLSID",
        doc: Some("Thread local storage ID.\n\n0 is the invalid ID. An app can create these and then set data for these\nIDs that is unique to each thread.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n\n## See also\n- [`SDL_GetTLS`]\n- [`SDL_SetTLS`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
        ],
    },
    Group {
        module: "thread",
        kind: GroupKind::Enum,
        name: "SDL_ThreadPriority",
        short_name: "ThreadPriority",
        doc: Some("The SDL thread priority.\n\nSDL will make system changes as necessary in order to apply the thread\npriority. Code which attempts to control thread state related to priority\nshould be aware that calling [`SDL_SetCurrentThreadPriority`] may alter such\nstate. [`SDL_HINT_THREAD_PRIORITY_POLICY`] can be used to control aspects of\nthis behavior.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_THREAD_PRIORITY_LOW",
                short_name: "LOW",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_THREAD_PRIORITY_NORMAL",
                short_name: "NORMAL",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_THREAD_PRIORITY_HIGH",
                short_name: "HIGH",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_THREAD_PRIORITY_TIME_CRITICAL",
                short_name: "TIME_CRITICAL",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "thread",
        kind: GroupKind::Enum,
        name: "SDL_ThreadState",
        short_name: "ThreadState",
        doc: Some("The SDL thread state.\n\nThe current state of a thread can be checked by calling [`SDL_GetThreadState`].\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_GetThreadState`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_THREAD_UNKNOWN",
                short_name: "UNKNOWN",
                doc: Some("The thread is not valid\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_THREAD_ALIVE",
                short_name: "ALIVE",
                doc: Some("The thread is currently running\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_THREAD_DETACHED",
                short_name: "DETACHED",
                doc: Some("The thread is detached and can't be waited on\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_THREAD_COMPLETE",
                short_name: "COMPLETE",
                doc: Some("The thread has finished and should be cleaned up with [`SDL_WaitThread()`]\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "time",
        kind: GroupKind::Enum,
        name: "SDL_DateFormat",
        short_name: "DateFormat",
        doc: Some("The preferred date format of the current system locale.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_GetDateTimeLocalePreferences`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_DATE_FORMAT_YYYYMMDD",
                short_name: "YYYYMMDD",
                doc: Some("Year/Month/Day\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_DATE_FORMAT_DDMMYYYY",
                short_name: "DDMMYYYY",
                doc: Some("Day/Month/Year\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_DATE_FORMAT_MMDDYYYY",
                short_name: "MMDDYYYY",
                doc: Some("Month/Day/Year\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "time",
        kind: GroupKind::Enum,
        name: "SDL_TimeFormat",
        short_name: "TimeFormat",
        doc: Some("The preferred time format of the current system locale.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_GetDateTimeLocalePreferences`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_TIME_FORMAT_24HR",
                short_name: "_24HR",
                doc: Some("24 hour time\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TIME_FORMAT_12HR",
                short_name: "_12HR",
                doc: Some("12 hour time\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "timer",
        kind: GroupKind::Id,
        name: "SDL_TimerID",
        short_name: "TimerID",
        doc: Some("Definition of the timer ID type.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
        ],
    },
    Group {
        module: "touch",
        kind: GroupKind::Id,
        name: "SDL_TouchID",
        short_name: "TouchID",
        doc: Some("A unique ID for a touch device.\n\nThis ID is valid for the time the device is connected to the system, and is\nnever reused for the lifetime of the application.\n\nThe value 0 is an invalid ID.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
        ],
    },
    Group {
        module: "touch",
        kind: GroupKind::Id,
        name: "SDL_FingerID",
        short_name: "FingerID",
        doc: Some("A unique ID for a single finger on a touch device.\n\nThis ID is valid for the time the finger (stylus, etc) is touching and will\nbe unique for all fingers currently in contact, so this ID tracks the\nlifetime of a single continuous touch. This value may represent an index, a\npointer, or some other unique ID, depending on the platform.\n\nThe value 0 is an invalid ID.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
        ],
    },
    Group {
        module: "touch",
        kind: GroupKind::Enum,
        name: "SDL_TouchDeviceType",
        short_name: "TouchDeviceType",
        doc: Some("An enum that describes the type of a touch device.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_TOUCH_DEVICE_INVALID",
                short_name: "INVALID",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_TOUCH_DEVICE_DIRECT",
                short_name: "DIRECT",
                doc: Some("touch screen with window-relative coordinates\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TOUCH_DEVICE_INDIRECT_ABSOLUTE",
                short_name: "INDIRECT_ABSOLUTE",
                doc: Some("trackpad with absolute device coordinates\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TOUCH_DEVICE_INDIRECT_RELATIVE",
                short_name: "INDIRECT_RELATIVE",
                doc: Some("trackpad with screen cursor-relative coordinates\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "tray",
        kind: GroupKind::Flags,
        name: "SDL_TrayEntryFlags",
        short_name: "TrayEntryFlags",
        doc: Some("Flags that control the creation of system tray entries.\n\nSome of these flags are required; exactly one of them must be specified at\nthe time a tray entry is created. Other flags are optional; zero or more of\nthose can be OR'ed together with the required flag.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n\n## See also\n- [`SDL_InsertTrayEntryAt`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_TRAYENTRY_BUTTON",
                short_name: "BUTTON",
                doc: Some("Make the entry a simple button. Required.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TRAYENTRY_CHECKBOX",
                short_name: "CHECKBOX",
                doc: Some("Make the entry a checkbox. Required.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TRAYENTRY_SUBMENU",
                short_name: "SUBMENU",
                doc: Some("Prepare the entry to have a submenu. Required\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TRAYENTRY_DISABLED",
                short_name: "DISABLED",
                doc: Some("Make the entry disabled. Optional.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TRAYENTRY_CHECKED",
                short_name: "CHECKED",
                doc: Some("Make the entry checked. This is valid only for checkboxes. Optional.\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "video",
        kind: GroupKind::Id,
        name: "SDL_DisplayID",
        short_name: "DisplayID",
        doc: Some("This is a unique ID for a display for the time it is connected to the\nsystem, and is never reused for the lifetime of the application.\n\nIf the display is disconnected and reconnected, it will get a new ID.\n\nThe value 0 is an invalid ID.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
        ],
    },
    Group {
        module: "video",
        kind: GroupKind::Id,
        name: "SDL_WindowID",
        short_name: "WindowID",
        doc: Some("This is a unique ID for a window.\n\nThe value 0 is an invalid ID.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
        ],
    },
    Group {
        module: "video",
        kind: GroupKind::Enum,
        name: "SDL_SystemTheme",
        short_name: "SystemTheme",
        doc: Some("System theme.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_SYSTEM_THEME_UNKNOWN",
                short_name: "UNKNOWN",
                doc: Some("Unknown system theme\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SYSTEM_THEME_LIGHT",
                short_name: "LIGHT",
                doc: Some("Light colored system theme\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SYSTEM_THEME_DARK",
                short_name: "DARK",
                doc: Some("Dark colored system theme\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "video",
        kind: GroupKind::Enum,
        name: "SDL_DisplayOrientation",
        short_name: "DisplayOrientation",
        doc: Some("Display orientation values; the way a display is rotated.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_ORIENTATION_UNKNOWN",
                short_name: "UNKNOWN",
                doc: Some("The display orientation can't be determined\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_ORIENTATION_LANDSCAPE",
                short_name: "LANDSCAPE",
                doc: Some("The display is in landscape mode, with the right side up, relative to portrait mode\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_ORIENTATION_LANDSCAPE_FLIPPED",
                short_name: "LANDSCAPE_FLIPPED",
                doc: Some("The display is in landscape mode, with the left side up, relative to portrait mode\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_ORIENTATION_PORTRAIT",
                short_name: "PORTRAIT",
                doc: Some("The display is in portrait mode\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_ORIENTATION_PORTRAIT_FLIPPED",
                short_name: "PORTRAIT_FLIPPED",
                doc: Some("The display is in portrait mode, upside down\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "video",
        kind: GroupKind::Flags,
        name: "SDL_WindowFlags",
        short_name: "WindowFlags",
        doc: Some("The flags on a window.\n\nThese cover a lot of true/false, or on/off, window state. Some of it is\nimmutable after being set through [`SDL_CreateWindow()`], some of it can be\nchanged on existing windows by the app, and some of it might be altered by\nthe user or system outside of the app's control.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n\n## See also\n- [`SDL_GetWindowFlags`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_WINDOW_FULLSCREEN",
                short_name: "FULLSCREEN",
                doc: Some("window is in fullscreen mode\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_WINDOW_OPENGL",
                short_name: "OPENGL",
                doc: Some("window usable with OpenGL context\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_WINDOW_OCCLUDED",
                short_name: "OCCLUDED",
                doc: Some("window is occluded\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_WINDOW_HIDDEN",
                short_name: "HIDDEN",
                doc: Some("window is neither mapped onto the desktop nor shown in the taskbar/dock/window list; [`SDL_ShowWindow()`] is required for it to become visible\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_WINDOW_BORDERLESS",
                short_name: "BORDERLESS",
                doc: Some("no window decoration\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_WINDOW_RESIZABLE",
                short_name: "RESIZABLE",
                doc: Some("window can be resized\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_WINDOW_MINIMIZED",
                short_name: "MINIMIZED",
                doc: Some("window is minimized\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_WINDOW_MAXIMIZED",
                short_name: "MAXIMIZED",
                doc: Some("window is maximized\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_WINDOW_MOUSE_GRABBED",
                short_name: "MOUSE_GRABBED",
                doc: Some("window has grabbed mouse input\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_WINDOW_INPUT_FOCUS",
                short_name: "INPUT_FOCUS",
                doc: Some("window has input focus\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_WINDOW_MOUSE_FOCUS",
                short_name: "MOUSE_FOCUS",
                doc: Some("window has mouse focus\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_WINDOW_EXTERNAL",
                short_name: "EXTERNAL",
                doc: Some("window not created by SDL\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_WINDOW_MODAL",
                short_name: "MODAL",
                doc: Some("window is modal\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_WINDOW_HIGH_PIXEL_DENSITY",
                short_name: "HIGH_PIXEL_DENSITY",
                doc: Some("window uses high pixel density back buffer if possible\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_WINDOW_MOUSE_CAPTURE",
                short_name: "MOUSE_CAPTURE",
                doc: Some("window has mouse captured (unrelated to MOUSE_GRABBED)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_WINDOW_MOUSE_RELATIVE_MODE",
                short_name: "MOUSE_RELATIVE_MODE",
                doc: Some("window has relative mode enabled\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_WINDOW_ALWAYS_ON_TOP",
                short_name: "ALWAYS_ON_TOP",
                doc: Some("window should always be above others\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_WINDOW_UTILITY",
                short_name: "UTILITY",
                doc: Some("window should be treated as a utility window, not showing in the task bar and window list\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_WINDOW_TOOLTIP",
                short_name: "TOOLTIP",
                doc: Some("window should be treated as a tooltip and does not get mouse or keyboard focus, requires a parent window\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_WINDOW_POPUP_MENU",
                short_name: "POPUP_MENU",
                doc: Some("window should be treated as a popup menu, requires a parent window\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_WINDOW_KEYBOARD_GRABBED",
                short_name: "KEYBOARD_GRABBED",
                doc: Some("window has grabbed keyboard input\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_WINDOW_VULKAN",
                short_name: "VULKAN",
                doc: Some("window usable for Vulkan surface\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_WINDOW_METAL",
                short_name: "METAL",
                doc: Some("window usable for Metal view\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_WINDOW_TRANSPARENT",
                short_name: "TRANSPARENT",
                doc: Some("window with transparent buffer\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_WINDOW_NOT_FOCUSABLE",
                short_name: "NOT_FOCUSABLE",
                doc: Some("window should not be focusable\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "video",
        kind: GroupKind::Enum,
        name: "SDL_FlashOperation",
        short_name: "FlashOperation",
        doc: Some("Window flash operation.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_FLASH_CANCEL",
                short_name: "CANCEL",
                doc: Some("Cancel any window flash state\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_FLASH_BRIEFLY",
                short_name: "BRIEFLY",
                doc: Some("Flash the window briefly to get attention\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_FLASH_UNTIL_FOCUSED",
                short_name: "UNTIL_FOCUSED",
                doc: Some("Flash the window until it gets focus\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "video",
        kind: GroupKind::Enum,
        name: "SDL_GLAttr",
        short_name: "GLAttr",
        doc: Some("An enumeration of OpenGL configuration attributes.\n\nWhile you can set most OpenGL attributes normally, the attributes listed\nabove must be known before SDL creates the window that will be used with\nthe OpenGL context. These attributes are set and read with\n[`SDL_GL_SetAttribute()`] and [`SDL_GL_GetAttribute()`].\n\nIn some cases, these attributes are minimum requests; the GL does not\npromise to give you exactly what you asked for. It's possible to ask for a\n16-bit depth buffer and get a 24-bit one instead, for example, or to ask\nfor no stencil buffer and still have one available. Context creation should\nfail if the GL can't provide your requested attributes at a minimum, but\nyou should check to see exactly what you got.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GL_RED_SIZE",
                short_name: "RED_SIZE",
                doc: Some("the minimum number of bits for the red channel of the color buffer; defaults to 3.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_GREEN_SIZE",
                short_name: "GREEN_SIZE",
                doc: Some("the minimum number of bits for the green channel of the color buffer; defaults to 3.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_BLUE_SIZE",
                short_name: "BLUE_SIZE",
                doc: Some("the minimum number of bits for the blue channel of the color buffer; defaults to 2.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_ALPHA_SIZE",
                short_name: "ALPHA_SIZE",
                doc: Some("the minimum number of bits for the alpha channel of the color buffer; defaults to 0.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_BUFFER_SIZE",
                short_name: "BUFFER_SIZE",
                doc: Some("the minimum number of bits for frame buffer size; defaults to 0.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_DOUBLEBUFFER",
                short_name: "DOUBLEBUFFER",
                doc: Some("whether the output is single or double buffered; defaults to double buffering on.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_DEPTH_SIZE",
                short_name: "DEPTH_SIZE",
                doc: Some("the minimum number of bits in the depth buffer; defaults to 16.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_STENCIL_SIZE",
                short_name: "STENCIL_SIZE",
                doc: Some("the minimum number of bits in the stencil buffer; defaults to 0.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_ACCUM_RED_SIZE",
                short_name: "ACCUM_RED_SIZE",
                doc: Some("the minimum number of bits for the red channel of the accumulation buffer; defaults to 0.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_ACCUM_GREEN_SIZE",
                short_name: "ACCUM_GREEN_SIZE",
                doc: Some("the minimum number of bits for the green channel of the accumulation buffer; defaults to 0.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_ACCUM_BLUE_SIZE",
                short_name: "ACCUM_BLUE_SIZE",
                doc: Some("the minimum number of bits for the blue channel of the accumulation buffer; defaults to 0.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_ACCUM_ALPHA_SIZE",
                short_name: "ACCUM_ALPHA_SIZE",
                doc: Some("the minimum number of bits for the alpha channel of the accumulation buffer; defaults to 0.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_STEREO",
                short_name: "STEREO",
                doc: Some("whether the output is stereo 3D; defaults to off.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_MULTISAMPLEBUFFERS",
                short_name: "MULTISAMPLEBUFFERS",
                doc: Some("the number of buffers used for multisample anti-aliasing; defaults to 0.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_MULTISAMPLESAMPLES",
                short_name: "MULTISAMPLESAMPLES",
                doc: Some("the number of samples used around the current pixel used for multisample anti-aliasing.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_ACCELERATED_VISUAL",
                short_name: "ACCELERATED_VISUAL",
                doc: Some("set to 1 to require hardware acceleration, set to 0 to force software rendering; defaults to allow either.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_RETAINED_BACKING",
                short_name: "RETAINED_BACKING",
                doc: Some("not used (deprecated).\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_CONTEXT_MAJOR_VERSION",
                short_name: "CONTEXT_MAJOR_VERSION",
                doc: Some("OpenGL context major version.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_CONTEXT_MINOR_VERSION",
                short_name: "CONTEXT_MINOR_VERSION",
                doc: Some("OpenGL context minor version.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_CONTEXT_FLAGS",
                short_name: "CONTEXT_FLAGS",
                doc: Some("some combination of 0 or more of elements of the [`SDL_GLContextFlag`] enumeration; defaults to 0.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_CONTEXT_PROFILE_MASK",
                short_name: "CONTEXT_PROFILE_MASK",
                doc: Some("type of GL context (Core, Compatibility, ES). See [`SDL_GLProfile`]; default value depends on platform.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_SHARE_WITH_CURRENT_CONTEXT",
                short_name: "SHARE_WITH_CURRENT_CONTEXT",
                doc: Some("OpenGL context sharing; defaults to 0.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_FRAMEBUFFER_SRGB_CAPABLE",
                short_name: "FRAMEBUFFER_SRGB_CAPABLE",
                doc: Some("requests sRGB capable visual; defaults to 0.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_CONTEXT_RELEASE_BEHAVIOR",
                short_name: "CONTEXT_RELEASE_BEHAVIOR",
                doc: Some("sets context the release behavior. See [`SDL_GLContextReleaseFlag`]; defaults to FLUSH.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_CONTEXT_RESET_NOTIFICATION",
                short_name: "CONTEXT_RESET_NOTIFICATION",
                doc: Some("set context reset notification. See [`SDL_GLContextResetNotification`]; defaults to NO_NOTIFICATION.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_CONTEXT_NO_ERROR",
                short_name: "CONTEXT_NO_ERROR",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_FLOATBUFFERS",
                short_name: "FLOATBUFFERS",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_EGL_PLATFORM",
                short_name: "EGL_PLATFORM",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "video",
        kind: GroupKind::Flags,
        name: "SDL_GLProfile",
        short_name: "GLProfile",
        doc: Some("Possible values to be set for the [`SDL_GL_CONTEXT_PROFILE_MASK`] attribute.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GL_CONTEXT_PROFILE_CORE",
                short_name: "CORE",
                doc: Some("OpenGL Core Profile context\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_CONTEXT_PROFILE_COMPATIBILITY",
                short_name: "COMPATIBILITY",
                doc: Some("OpenGL Compatibility Profile context\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_CONTEXT_PROFILE_ES",
                short_name: "ES",
                doc: Some("GLX_CONTEXT_ES2_PROFILE_BIT_EXT\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "video",
        kind: GroupKind::Flags,
        name: "SDL_GLContextFlag",
        short_name: "GLContextFlag",
        doc: Some("Possible flags to be set for the [`SDL_GL_CONTEXT_FLAGS`] attribute.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GL_CONTEXT_DEBUG_FLAG",
                short_name: "DEBUG_FLAG",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG",
                short_name: "FORWARD_COMPATIBLE_FLAG",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG",
                short_name: "ROBUST_ACCESS_FLAG",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_CONTEXT_RESET_ISOLATION_FLAG",
                short_name: "RESET_ISOLATION_FLAG",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "video",
        kind: GroupKind::Flags,
        name: "SDL_GLContextReleaseFlag",
        short_name: "GLContextReleaseFlag",
        doc: Some("Possible values to be set for the [`SDL_GL_CONTEXT_RELEASE_BEHAVIOR`]\nattribute.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE",
                short_name: "NONE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH",
                short_name: "FLUSH",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "video",
        kind: GroupKind::Flags,
        name: "SDL_GLContextResetNotification",
        short_name: "GLContextResetNotification",
        doc: Some("Possible values to be set [`SDL_GL_CONTEXT_RESET_NOTIFICATION`] attribute.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GL_CONTEXT_RESET_NO_NOTIFICATION",
                short_name: "NO_NOTIFICATION",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_CONTEXT_RESET_LOSE_CONTEXT",
                short_name: "LOSE_CONTEXT",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "video",
        kind: GroupKind::Enum,
        name: "SDL_HitTestResult",
        short_name: "HitTestResult",
        doc: Some("Possible return values from the [`SDL_HitTest`] callback.\n\n## Thread safety\nThis function should only be called on the main thread.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_HitTest`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_HITTEST_NORMAL",
                short_name: "NORMAL",
                doc: Some("Region is normal. No special properties.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_HITTEST_DRAGGABLE",
                short_name: "DRAGGABLE",
                doc: Some("Region can drag entire window.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_HITTEST_RESIZE_TOPLEFT",
                short_name: "RESIZE_TOPLEFT",
                doc: Some("Region is the resizable top-left corner border.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_HITTEST_RESIZE_TOP",
                short_name: "RESIZE_TOP",
                doc: Some("Region is the resizable top border.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_HITTEST_RESIZE_TOPRIGHT",
                short_name: "RESIZE_TOPRIGHT",
                doc: Some("Region is the resizable top-right corner border.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_HITTEST_RESIZE_RIGHT",
                short_name: "RESIZE_RIGHT",
                doc: Some("Region is the resizable right border.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_HITTEST_RESIZE_BOTTOMRIGHT",
                short_name: "RESIZE_BOTTOMRIGHT",
                doc: Some("Region is the resizable bottom-right corner border.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_HITTEST_RESIZE_BOTTOM",
                short_name: "RESIZE_BOTTOM",
                doc: Some("Region is the resizable bottom border.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_HITTEST_RESIZE_BOTTOMLEFT",
                short_name: "RESIZE_BOTTOMLEFT",
                doc: Some("Region is the resizable bottom-left corner border.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_HITTEST_RESIZE_LEFT",
                short_name: "RESIZE_LEFT",
                doc: Some("Region is the resizable left border.\n"),
                available_since: None,
            },
        ],
    },
];

pub(crate) const GROUP_OFFSET_assert: usize = 0;
pub(crate) const GROUP_OFFSET_asyncio: usize = 1;
pub(crate) const GROUP_OFFSET_atomic: usize = 3;
pub(crate) const GROUP_OFFSET_audio: usize = 4;
pub(crate) const GROUP_OFFSET_bits: usize = 6;
pub(crate) const GROUP_OFFSET_blendmode: usize = 6;
pub(crate) const GROUP_OFFSET_camera: usize = 9;
pub(crate) const GROUP_OFFSET_clipboard: usize = 11;
pub(crate) const GROUP_OFFSET_cpuinfo: usize = 11;
pub(crate) const GROUP_OFFSET_dialog: usize = 11;
pub(crate) const GROUP_OFFSET_error: usize = 12;
pub(crate) const GROUP_OFFSET_events: usize = 12;
pub(crate) const GROUP_OFFSET_filesystem: usize = 14;
pub(crate) const GROUP_OFFSET_gamepad: usize = 18;
pub(crate) const GROUP_OFFSET_gpu: usize = 23;
pub(crate) const GROUP_OFFSET_guid: usize = 51;
pub(crate) const GROUP_OFFSET_haptic: usize = 51;
pub(crate) const GROUP_OFFSET_hidapi: usize = 52;
pub(crate) const GROUP_OFFSET_hints: usize = 53;
pub(crate) const GROUP_OFFSET_init: usize = 54;
pub(crate) const GROUP_OFFSET_iostream: usize = 56;
pub(crate) const GROUP_OFFSET_joystick: usize = 58;
pub(crate) const GROUP_OFFSET_keyboard: usize = 61;
pub(crate) const GROUP_OFFSET_keycode: usize = 64;
pub(crate) const GROUP_OFFSET_loadso: usize = 66;
pub(crate) const GROUP_OFFSET_locale: usize = 66;
pub(crate) const GROUP_OFFSET_log: usize = 66;
pub(crate) const GROUP_OFFSET_main: usize = 68;
pub(crate) const GROUP_OFFSET_messagebox: usize = 68;
pub(crate) const GROUP_OFFSET_metal: usize = 71;
pub(crate) const GROUP_OFFSET_misc: usize = 71;
pub(crate) const GROUP_OFFSET_mouse: usize = 71;
pub(crate) const GROUP_OFFSET_mutex: usize = 75;
pub(crate) const GROUP_OFFSET_pen: usize = 76;
pub(crate) const GROUP_OFFSET_pixels: usize = 79;
pub(crate) const GROUP_OFFSET_platform: usize = 92;
pub(crate) const GROUP_OFFSET_power: usize = 92;
pub(crate) const GROUP_OFFSET_process: usize = 93;
pub(crate) const GROUP_OFFSET_properties: usize = 94;
pub(crate) const GROUP_OFFSET_rect: usize = 96;
pub(crate) const GROUP_OFFSET_render: usize = 96;
pub(crate) const GROUP_OFFSET_revision: usize = 98;
pub(crate) const GROUP_OFFSET_scancode: usize = 98;
pub(crate) const GROUP_OFFSET_sensor: usize = 99;
pub(crate) const GROUP_OFFSET_stdinc: usize = 101;
pub(crate) const GROUP_OFFSET_storage: usize = 101;
pub(crate) const GROUP_OFFSET_surface: usize = 101;
pub(crate) const GROUP_OFFSET_system: usize = 104;
pub(crate) const GROUP_OFFSET_thread: usize = 105;
pub(crate) const GROUP_OFFSET_time: usize = 109;
pub(crate) const GROUP_OFFSET_timer: usize = 111;
pub(crate) const GROUP_OFFSET_touch: usize = 112;
pub(crate) const GROUP_OFFSET_tray: usize = 115;
pub(crate) const GROUP_OFFSET_version: usize = 116;
pub(crate) const GROUP_OFFSET_video: usize = 116;
pub(crate) const GROUP_OFFSET_vulkan: usize = 128;
