//! Metadata for items in the `crate::events` module

use super::*;

pub static METADATA_SDL_EventType: Group = Group {
    module: "events",
    kind: GroupKind::Enum,
    name: "SDL_EventType",
    short_name: "EventType",
    doc: Some("The types of events that can be delivered.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
    available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    values: &[
        GroupValue {
            name: "SDL_EVENT_FIRST",
            short_name: "FIRST",
            doc: Some("Unused (do not remove)\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_QUIT",
            short_name: "QUIT",
            doc: Some("User-requested quit\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_TERMINATING",
            short_name: "TERMINATING",
            doc: Some("The application is being terminated by the OS. This event must be handled in a callback set with [`SDL_AddEventWatch()`].\nCalled on iOS in applicationWillTerminate()\nCalled on Android in onDestroy()\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_LOW_MEMORY",
            short_name: "LOW_MEMORY",
            doc: Some("The application is low on memory, free memory if possible. This event must be handled in a callback set with [`SDL_AddEventWatch()`].\nCalled on iOS in applicationDidReceiveMemoryWarning()\nCalled on Android in onTrimMemory()\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_WILL_ENTER_BACKGROUND",
            short_name: "WILL_ENTER_BACKGROUND",
            doc: Some("The application is about to enter the background. This event must be handled in a callback set with [`SDL_AddEventWatch()`].\nCalled on iOS in applicationWillResignActive()\nCalled on Android in onPause()\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_DID_ENTER_BACKGROUND",
            short_name: "DID_ENTER_BACKGROUND",
            doc: Some("The application did enter the background and may not get CPU for some time. This event must be handled in a callback set with [`SDL_AddEventWatch()`].\nCalled on iOS in applicationDidEnterBackground()\nCalled on Android in onPause()\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_WILL_ENTER_FOREGROUND",
            short_name: "WILL_ENTER_FOREGROUND",
            doc: Some("The application is about to enter the foreground. This event must be handled in a callback set with [`SDL_AddEventWatch()`].\nCalled on iOS in applicationWillEnterForeground()\nCalled on Android in onResume()\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_DID_ENTER_FOREGROUND",
            short_name: "DID_ENTER_FOREGROUND",
            doc: Some("The application is now interactive. This event must be handled in a callback set with [`SDL_AddEventWatch()`].\nCalled on iOS in applicationDidBecomeActive()\nCalled on Android in onResume()\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_LOCALE_CHANGED",
            short_name: "LOCALE_CHANGED",
            doc: Some("The user's locale preferences have changed.\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_SYSTEM_THEME_CHANGED",
            short_name: "SYSTEM_THEME_CHANGED",
            doc: Some("The system theme changed\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_DISPLAY_ORIENTATION",
            short_name: "DISPLAY_ORIENTATION",
            doc: Some("Display orientation has changed to data1\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_DISPLAY_ADDED",
            short_name: "DISPLAY_ADDED",
            doc: Some("Display has been added to the system\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_DISPLAY_REMOVED",
            short_name: "DISPLAY_REMOVED",
            doc: Some("Display has been removed from the system\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_DISPLAY_MOVED",
            short_name: "DISPLAY_MOVED",
            doc: Some("Display has changed position\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_DISPLAY_DESKTOP_MODE_CHANGED",
            short_name: "DISPLAY_DESKTOP_MODE_CHANGED",
            doc: Some("Display has changed desktop mode\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_DISPLAY_CURRENT_MODE_CHANGED",
            short_name: "DISPLAY_CURRENT_MODE_CHANGED",
            doc: Some("Display has changed current mode\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_DISPLAY_CONTENT_SCALE_CHANGED",
            short_name: "DISPLAY_CONTENT_SCALE_CHANGED",
            doc: Some("Display has changed content scale\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_DISPLAY_FIRST",
            short_name: "DISPLAY_FIRST",
            doc: None,
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_DISPLAY_LAST",
            short_name: "DISPLAY_LAST",
            doc: None,
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_WINDOW_SHOWN",
            short_name: "WINDOW_SHOWN",
            doc: Some("Window has been shown\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_WINDOW_HIDDEN",
            short_name: "WINDOW_HIDDEN",
            doc: Some("Window has been hidden\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_WINDOW_EXPOSED",
            short_name: "WINDOW_EXPOSED",
            doc: Some("Window has been exposed and should be redrawn, and can be redrawn directly from event watchers for this event\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_WINDOW_MOVED",
            short_name: "WINDOW_MOVED",
            doc: Some("Window has been moved to data1, data2\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_WINDOW_RESIZED",
            short_name: "WINDOW_RESIZED",
            doc: Some("Window has been resized to data1xdata2\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED",
            short_name: "WINDOW_PIXEL_SIZE_CHANGED",
            doc: Some("The pixel size of the window has changed to data1xdata2\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_WINDOW_METAL_VIEW_RESIZED",
            short_name: "WINDOW_METAL_VIEW_RESIZED",
            doc: Some("The pixel size of a Metal view associated with the window has changed\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_WINDOW_MINIMIZED",
            short_name: "WINDOW_MINIMIZED",
            doc: Some("Window has been minimized\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_WINDOW_MAXIMIZED",
            short_name: "WINDOW_MAXIMIZED",
            doc: Some("Window has been maximized\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_WINDOW_RESTORED",
            short_name: "WINDOW_RESTORED",
            doc: Some("Window has been restored to normal size and position\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_WINDOW_MOUSE_ENTER",
            short_name: "WINDOW_MOUSE_ENTER",
            doc: Some("Window has gained mouse focus\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_WINDOW_MOUSE_LEAVE",
            short_name: "WINDOW_MOUSE_LEAVE",
            doc: Some("Window has lost mouse focus\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_WINDOW_FOCUS_GAINED",
            short_name: "WINDOW_FOCUS_GAINED",
            doc: Some("Window has gained keyboard focus\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_WINDOW_FOCUS_LOST",
            short_name: "WINDOW_FOCUS_LOST",
            doc: Some("Window has lost keyboard focus\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_WINDOW_CLOSE_REQUESTED",
            short_name: "WINDOW_CLOSE_REQUESTED",
            doc: Some("The window manager requests that the window be closed\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_WINDOW_HIT_TEST",
            short_name: "WINDOW_HIT_TEST",
            doc: Some("Window had a hit test that wasn't [`SDL_HITTEST_NORMAL`]\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_WINDOW_ICCPROF_CHANGED",
            short_name: "WINDOW_ICCPROF_CHANGED",
            doc: Some("The ICC profile of the window's display has changed\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_WINDOW_DISPLAY_CHANGED",
            short_name: "WINDOW_DISPLAY_CHANGED",
            doc: Some("Window has been moved to display data1\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_WINDOW_DISPLAY_SCALE_CHANGED",
            short_name: "WINDOW_DISPLAY_SCALE_CHANGED",
            doc: Some("Window display scale has been changed\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_WINDOW_SAFE_AREA_CHANGED",
            short_name: "WINDOW_SAFE_AREA_CHANGED",
            doc: Some("The window safe area has been changed\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_WINDOW_OCCLUDED",
            short_name: "WINDOW_OCCLUDED",
            doc: Some("The window has been occluded\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_WINDOW_ENTER_FULLSCREEN",
            short_name: "WINDOW_ENTER_FULLSCREEN",
            doc: Some("The window has entered fullscreen mode\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_WINDOW_LEAVE_FULLSCREEN",
            short_name: "WINDOW_LEAVE_FULLSCREEN",
            doc: Some("The window has left fullscreen mode\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_WINDOW_DESTROYED",
            short_name: "WINDOW_DESTROYED",
            doc: Some("The window with the associated ID is being or has been destroyed. If this message is being handled\nin an event watcher, the window handle is still valid and can still be used to retrieve any properties\nassociated with the window. Otherwise, the handle has already been destroyed and all resources\nassociated with it are invalid\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_WINDOW_HDR_STATE_CHANGED",
            short_name: "WINDOW_HDR_STATE_CHANGED",
            doc: Some("Window HDR properties have changed\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_WINDOW_FIRST",
            short_name: "WINDOW_FIRST",
            doc: None,
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_WINDOW_LAST",
            short_name: "WINDOW_LAST",
            doc: None,
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_KEY_DOWN",
            short_name: "KEY_DOWN",
            doc: Some("Key pressed\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_KEY_UP",
            short_name: "KEY_UP",
            doc: Some("Key released\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_TEXT_EDITING",
            short_name: "TEXT_EDITING",
            doc: Some("Keyboard text editing (composition)\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_TEXT_INPUT",
            short_name: "TEXT_INPUT",
            doc: Some("Keyboard text input\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_KEYMAP_CHANGED",
            short_name: "KEYMAP_CHANGED",
            doc: Some("Keymap changed due to a system event such as an\ninput language or keyboard layout change.\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_KEYBOARD_ADDED",
            short_name: "KEYBOARD_ADDED",
            doc: Some("A new keyboard has been inserted into the system\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_KEYBOARD_REMOVED",
            short_name: "KEYBOARD_REMOVED",
            doc: Some("A keyboard has been removed\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_TEXT_EDITING_CANDIDATES",
            short_name: "TEXT_EDITING_CANDIDATES",
            doc: Some("Keyboard text editing candidates\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_MOUSE_MOTION",
            short_name: "MOUSE_MOTION",
            doc: Some("Mouse moved\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_MOUSE_BUTTON_DOWN",
            short_name: "MOUSE_BUTTON_DOWN",
            doc: Some("Mouse button pressed\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_MOUSE_BUTTON_UP",
            short_name: "MOUSE_BUTTON_UP",
            doc: Some("Mouse button released\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_MOUSE_WHEEL",
            short_name: "MOUSE_WHEEL",
            doc: Some("Mouse wheel motion\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_MOUSE_ADDED",
            short_name: "MOUSE_ADDED",
            doc: Some("A new mouse has been inserted into the system\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_MOUSE_REMOVED",
            short_name: "MOUSE_REMOVED",
            doc: Some("A mouse has been removed\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_JOYSTICK_AXIS_MOTION",
            short_name: "JOYSTICK_AXIS_MOTION",
            doc: Some("Joystick axis motion\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_JOYSTICK_BALL_MOTION",
            short_name: "JOYSTICK_BALL_MOTION",
            doc: Some("Joystick trackball motion\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_JOYSTICK_HAT_MOTION",
            short_name: "JOYSTICK_HAT_MOTION",
            doc: Some("Joystick hat position change\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_JOYSTICK_BUTTON_DOWN",
            short_name: "JOYSTICK_BUTTON_DOWN",
            doc: Some("Joystick button pressed\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_JOYSTICK_BUTTON_UP",
            short_name: "JOYSTICK_BUTTON_UP",
            doc: Some("Joystick button released\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_JOYSTICK_ADDED",
            short_name: "JOYSTICK_ADDED",
            doc: Some("A new joystick has been inserted into the system\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_JOYSTICK_REMOVED",
            short_name: "JOYSTICK_REMOVED",
            doc: Some("An opened joystick has been removed\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_JOYSTICK_BATTERY_UPDATED",
            short_name: "JOYSTICK_BATTERY_UPDATED",
            doc: Some("Joystick battery level change\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_JOYSTICK_UPDATE_COMPLETE",
            short_name: "JOYSTICK_UPDATE_COMPLETE",
            doc: Some("Joystick update is complete\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_GAMEPAD_AXIS_MOTION",
            short_name: "GAMEPAD_AXIS_MOTION",
            doc: Some("Gamepad axis motion\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_GAMEPAD_BUTTON_DOWN",
            short_name: "GAMEPAD_BUTTON_DOWN",
            doc: Some("Gamepad button pressed\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_GAMEPAD_BUTTON_UP",
            short_name: "GAMEPAD_BUTTON_UP",
            doc: Some("Gamepad button released\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_GAMEPAD_ADDED",
            short_name: "GAMEPAD_ADDED",
            doc: Some("A new gamepad has been inserted into the system\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_GAMEPAD_REMOVED",
            short_name: "GAMEPAD_REMOVED",
            doc: Some("A gamepad has been removed\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_GAMEPAD_REMAPPED",
            short_name: "GAMEPAD_REMAPPED",
            doc: Some("The gamepad mapping was updated\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_GAMEPAD_TOUCHPAD_DOWN",
            short_name: "GAMEPAD_TOUCHPAD_DOWN",
            doc: Some("Gamepad touchpad was touched\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_GAMEPAD_TOUCHPAD_MOTION",
            short_name: "GAMEPAD_TOUCHPAD_MOTION",
            doc: Some("Gamepad touchpad finger was moved\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_GAMEPAD_TOUCHPAD_UP",
            short_name: "GAMEPAD_TOUCHPAD_UP",
            doc: Some("Gamepad touchpad finger was lifted\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_GAMEPAD_SENSOR_UPDATE",
            short_name: "GAMEPAD_SENSOR_UPDATE",
            doc: Some("Gamepad sensor was updated\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_GAMEPAD_UPDATE_COMPLETE",
            short_name: "GAMEPAD_UPDATE_COMPLETE",
            doc: Some("Gamepad update is complete\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_GAMEPAD_STEAM_HANDLE_UPDATED",
            short_name: "GAMEPAD_STEAM_HANDLE_UPDATED",
            doc: Some("Gamepad Steam handle has changed\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_FINGER_DOWN",
            short_name: "FINGER_DOWN",
            doc: None,
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_FINGER_UP",
            short_name: "FINGER_UP",
            doc: None,
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_FINGER_MOTION",
            short_name: "FINGER_MOTION",
            doc: None,
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_FINGER_CANCELED",
            short_name: "FINGER_CANCELED",
            doc: None,
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_CLIPBOARD_UPDATE",
            short_name: "CLIPBOARD_UPDATE",
            doc: Some("The clipboard or primary selection changed\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_DROP_FILE",
            short_name: "DROP_FILE",
            doc: Some("The system requests a file open\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_DROP_TEXT",
            short_name: "DROP_TEXT",
            doc: Some("text/plain drag-and-drop event\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_DROP_BEGIN",
            short_name: "DROP_BEGIN",
            doc: Some("A new set of drops is beginning (NULL filename)\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_DROP_COMPLETE",
            short_name: "DROP_COMPLETE",
            doc: Some("Current set of drops is now complete (NULL filename)\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_DROP_POSITION",
            short_name: "DROP_POSITION",
            doc: Some("Position while moving over the window\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_AUDIO_DEVICE_ADDED",
            short_name: "AUDIO_DEVICE_ADDED",
            doc: Some("A new audio device is available\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_AUDIO_DEVICE_REMOVED",
            short_name: "AUDIO_DEVICE_REMOVED",
            doc: Some("An audio device has been removed.\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_AUDIO_DEVICE_FORMAT_CHANGED",
            short_name: "AUDIO_DEVICE_FORMAT_CHANGED",
            doc: Some("An audio device's format has been changed by the system.\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_SENSOR_UPDATE",
            short_name: "SENSOR_UPDATE",
            doc: Some("A sensor was updated\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_PEN_PROXIMITY_IN",
            short_name: "PEN_PROXIMITY_IN",
            doc: Some("Pressure-sensitive pen has become available\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_PEN_PROXIMITY_OUT",
            short_name: "PEN_PROXIMITY_OUT",
            doc: Some("Pressure-sensitive pen has become unavailable\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_PEN_DOWN",
            short_name: "PEN_DOWN",
            doc: Some("Pressure-sensitive pen touched drawing surface\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_PEN_UP",
            short_name: "PEN_UP",
            doc: Some("Pressure-sensitive pen stopped touching drawing surface\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_PEN_BUTTON_DOWN",
            short_name: "PEN_BUTTON_DOWN",
            doc: Some("Pressure-sensitive pen button pressed\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_PEN_BUTTON_UP",
            short_name: "PEN_BUTTON_UP",
            doc: Some("Pressure-sensitive pen button released\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_PEN_MOTION",
            short_name: "PEN_MOTION",
            doc: Some("Pressure-sensitive pen is moving on the tablet\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_PEN_AXIS",
            short_name: "PEN_AXIS",
            doc: Some("Pressure-sensitive pen angle/pressure/etc changed\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_CAMERA_DEVICE_ADDED",
            short_name: "CAMERA_DEVICE_ADDED",
            doc: Some("A new camera device is available\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_CAMERA_DEVICE_REMOVED",
            short_name: "CAMERA_DEVICE_REMOVED",
            doc: Some("A camera device has been removed.\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_CAMERA_DEVICE_APPROVED",
            short_name: "CAMERA_DEVICE_APPROVED",
            doc: Some("A camera device has been approved for use by the user.\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_CAMERA_DEVICE_DENIED",
            short_name: "CAMERA_DEVICE_DENIED",
            doc: Some("A camera device has been denied for use by the user.\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_RENDER_TARGETS_RESET",
            short_name: "RENDER_TARGETS_RESET",
            doc: Some("The render targets have been reset and their contents need to be updated\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_RENDER_DEVICE_RESET",
            short_name: "RENDER_DEVICE_RESET",
            doc: Some("The device has been reset and all textures need to be recreated\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_RENDER_DEVICE_LOST",
            short_name: "RENDER_DEVICE_LOST",
            doc: Some("The device has been lost and can't be recovered.\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_PRIVATE0",
            short_name: "PRIVATE0",
            doc: None,
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_PRIVATE1",
            short_name: "PRIVATE1",
            doc: None,
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_PRIVATE2",
            short_name: "PRIVATE2",
            doc: None,
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_PRIVATE3",
            short_name: "PRIVATE3",
            doc: None,
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_POLL_SENTINEL",
            short_name: "POLL_SENTINEL",
            doc: Some("Signals the end of an event poll cycle\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_USER",
            short_name: "USER",
            doc: Some("Events [`SDL_EVENT_USER`] through [`SDL_EVENT_LAST`] are for your use,\nand should be allocated with [`SDL_RegisterEvents()`]\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_LAST",
            short_name: "LAST",
            doc: Some("*  This last event is only for bounding internal arrays\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_EVENT_ENUM_PADDING",
            short_name: "ENUM_PADDING",
            doc: None,
            available_since: None,
        },
    ],
};
pub static METADATA_SDL_EventAction: Group = Group {
    module: "events",
    kind: GroupKind::Enum,
    name: "SDL_EventAction",
    short_name: "EventAction",
    doc: Some("The type of action to request from [`SDL_PeepEvents()`].\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
    available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    values: &[
        GroupValue {
            name: "SDL_ADDEVENT",
            short_name: "ADDEVENT",
            doc: Some("Add events to the back of the queue.\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_PEEKEVENT",
            short_name: "PEEKEVENT",
            doc: Some("Check but don't remove events from the queue front.\n"),
            available_since: None,
        },
        GroupValue {
            name: "SDL_GETEVENT",
            short_name: "GETEVENT",
            doc: Some("Retrieve/remove events from the front of the queue.\n"),
            available_since: None,
        },
    ],
};
