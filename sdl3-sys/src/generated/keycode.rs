//! Defines constants which identify keyboard keys and modifiers.
//!
//! Please refer to the Best Keyboard Practices document for details on what
//! this information means and how best to use it.
//!
//! <https://wiki.libsdl.org/SDL3/BestKeyboardPractices>

use super::stdinc::*;

use super::scancode::*;

/// The SDL virtual key representation.
///
/// Values of this type are used to represent keyboard keys using the current
/// layout of the keyboard. These values include Unicode values representing
/// the unmodified character that would be generated by pressing the key, or an
/// `SDLK_*` constant for those keys that do not generate characters.
///
/// A special exception is the number keys at the top of the keyboard which map
/// to SDLK_0...SDLK_9 on AZERTY layouts.
///
/// Keys with the `SDLK_EXTENDED_MASK` bit set do not map to a scancode or
/// unicode code point.
///
/// ## Availability
/// This datatype is available since SDL 3.2.0.
///
/// ## Known values (`sdl3-sys`)
/// | Associated constant | Global constant | Description |
/// | ------------------- | --------------- | ----------- |
/// | [`EXTENDED_MASK`](SDL_Keycode::EXTENDED_MASK) | [`SDLK_EXTENDED_MASK`] | |
/// | [`SCANCODE_MASK`](SDL_Keycode::SCANCODE_MASK) | [`SDLK_SCANCODE_MASK`] | |
/// | [`UNKNOWN`](SDL_Keycode::UNKNOWN) | [`SDLK_UNKNOWN`] | 0 |
/// | [`RETURN`](SDL_Keycode::RETURN) | [`SDLK_RETURN`] | '\r' |
/// | [`ESCAPE`](SDL_Keycode::ESCAPE) | [`SDLK_ESCAPE`] | '\x1B' |
/// | [`BACKSPACE`](SDL_Keycode::BACKSPACE) | [`SDLK_BACKSPACE`] | '\b' |
/// | [`TAB`](SDL_Keycode::TAB) | [`SDLK_TAB`] | '\t' |
/// | [`SPACE`](SDL_Keycode::SPACE) | [`SDLK_SPACE`] | ' ' |
/// | [`EXCLAIM`](SDL_Keycode::EXCLAIM) | [`SDLK_EXCLAIM`] | '!' |
/// | [`DBLAPOSTROPHE`](SDL_Keycode::DBLAPOSTROPHE) | [`SDLK_DBLAPOSTROPHE`] | '"' |
/// | [`HASH`](SDL_Keycode::HASH) | [`SDLK_HASH`] | '#' |
/// | [`DOLLAR`](SDL_Keycode::DOLLAR) | [`SDLK_DOLLAR`] | '$' |
/// | [`PERCENT`](SDL_Keycode::PERCENT) | [`SDLK_PERCENT`] | '%' |
/// | [`AMPERSAND`](SDL_Keycode::AMPERSAND) | [`SDLK_AMPERSAND`] | '&' |
/// | [`APOSTROPHE`](SDL_Keycode::APOSTROPHE) | [`SDLK_APOSTROPHE`] | '\'' |
/// | [`LEFTPAREN`](SDL_Keycode::LEFTPAREN) | [`SDLK_LEFTPAREN`] | '(' |
/// | [`RIGHTPAREN`](SDL_Keycode::RIGHTPAREN) | [`SDLK_RIGHTPAREN`] | ')' |
/// | [`ASTERISK`](SDL_Keycode::ASTERISK) | [`SDLK_ASTERISK`] | '*' |
/// | [`PLUS`](SDL_Keycode::PLUS) | [`SDLK_PLUS`] | '+' |
/// | [`COMMA`](SDL_Keycode::COMMA) | [`SDLK_COMMA`] | ',' |
/// | [`MINUS`](SDL_Keycode::MINUS) | [`SDLK_MINUS`] | '-' |
/// | [`PERIOD`](SDL_Keycode::PERIOD) | [`SDLK_PERIOD`] | '.' |
/// | [`SLASH`](SDL_Keycode::SLASH) | [`SDLK_SLASH`] | '/' |
/// | [`_0`](SDL_Keycode::_0) | [`SDLK_0`] | '0' |
/// | [`_1`](SDL_Keycode::_1) | [`SDLK_1`] | '1' |
/// | [`_2`](SDL_Keycode::_2) | [`SDLK_2`] | '2' |
/// | [`_3`](SDL_Keycode::_3) | [`SDLK_3`] | '3' |
/// | [`_4`](SDL_Keycode::_4) | [`SDLK_4`] | '4' |
/// | [`_5`](SDL_Keycode::_5) | [`SDLK_5`] | '5' |
/// | [`_6`](SDL_Keycode::_6) | [`SDLK_6`] | '6' |
/// | [`_7`](SDL_Keycode::_7) | [`SDLK_7`] | '7' |
/// | [`_8`](SDL_Keycode::_8) | [`SDLK_8`] | '8' |
/// | [`_9`](SDL_Keycode::_9) | [`SDLK_9`] | '9' |
/// | [`COLON`](SDL_Keycode::COLON) | [`SDLK_COLON`] | ':' |
/// | [`SEMICOLON`](SDL_Keycode::SEMICOLON) | [`SDLK_SEMICOLON`] | ';' |
/// | [`LESS`](SDL_Keycode::LESS) | [`SDLK_LESS`] | '<' |
/// | [`EQUALS`](SDL_Keycode::EQUALS) | [`SDLK_EQUALS`] | '=' |
/// | [`GREATER`](SDL_Keycode::GREATER) | [`SDLK_GREATER`] | '>' |
/// | [`QUESTION`](SDL_Keycode::QUESTION) | [`SDLK_QUESTION`] | '?' |
/// | [`AT`](SDL_Keycode::AT) | [`SDLK_AT`] | '@' |
/// | [`LEFTBRACKET`](SDL_Keycode::LEFTBRACKET) | [`SDLK_LEFTBRACKET`] | '[' |
/// | [`BACKSLASH`](SDL_Keycode::BACKSLASH) | [`SDLK_BACKSLASH`] | '\\' |
/// | [`RIGHTBRACKET`](SDL_Keycode::RIGHTBRACKET) | [`SDLK_RIGHTBRACKET`] | ']' |
/// | [`CARET`](SDL_Keycode::CARET) | [`SDLK_CARET`] | '^' |
/// | [`UNDERSCORE`](SDL_Keycode::UNDERSCORE) | [`SDLK_UNDERSCORE`] | '_' |
/// | [`GRAVE`](SDL_Keycode::GRAVE) | [`SDLK_GRAVE`] | '`' |
/// | [`A`](SDL_Keycode::A) | [`SDLK_A`] | 'a' |
/// | [`B`](SDL_Keycode::B) | [`SDLK_B`] | 'b' |
/// | [`C`](SDL_Keycode::C) | [`SDLK_C`] | 'c' |
/// | [`D`](SDL_Keycode::D) | [`SDLK_D`] | 'd' |
/// | [`E`](SDL_Keycode::E) | [`SDLK_E`] | 'e' |
/// | [`F`](SDL_Keycode::F) | [`SDLK_F`] | 'f' |
/// | [`G`](SDL_Keycode::G) | [`SDLK_G`] | 'g' |
/// | [`H`](SDL_Keycode::H) | [`SDLK_H`] | 'h' |
/// | [`I`](SDL_Keycode::I) | [`SDLK_I`] | 'i' |
/// | [`J`](SDL_Keycode::J) | [`SDLK_J`] | 'j' |
/// | [`K`](SDL_Keycode::K) | [`SDLK_K`] | 'k' |
/// | [`L`](SDL_Keycode::L) | [`SDLK_L`] | 'l' |
/// | [`M`](SDL_Keycode::M) | [`SDLK_M`] | 'm' |
/// | [`N`](SDL_Keycode::N) | [`SDLK_N`] | 'n' |
/// | [`O`](SDL_Keycode::O) | [`SDLK_O`] | 'o' |
/// | [`P`](SDL_Keycode::P) | [`SDLK_P`] | 'p' |
/// | [`Q`](SDL_Keycode::Q) | [`SDLK_Q`] | 'q' |
/// | [`R`](SDL_Keycode::R) | [`SDLK_R`] | 'r' |
/// | [`S`](SDL_Keycode::S) | [`SDLK_S`] | 's' |
/// | [`T`](SDL_Keycode::T) | [`SDLK_T`] | 't' |
/// | [`U`](SDL_Keycode::U) | [`SDLK_U`] | 'u' |
/// | [`V`](SDL_Keycode::V) | [`SDLK_V`] | 'v' |
/// | [`W`](SDL_Keycode::W) | [`SDLK_W`] | 'w' |
/// | [`X`](SDL_Keycode::X) | [`SDLK_X`] | 'x' |
/// | [`Y`](SDL_Keycode::Y) | [`SDLK_Y`] | 'y' |
/// | [`Z`](SDL_Keycode::Z) | [`SDLK_Z`] | 'z' |
/// | [`LEFTBRACE`](SDL_Keycode::LEFTBRACE) | [`SDLK_LEFTBRACE`] | '{' |
/// | [`PIPE`](SDL_Keycode::PIPE) | [`SDLK_PIPE`] | '|' |
/// | [`RIGHTBRACE`](SDL_Keycode::RIGHTBRACE) | [`SDLK_RIGHTBRACE`] | '}' |
/// | [`TILDE`](SDL_Keycode::TILDE) | [`SDLK_TILDE`] | '~' |
/// | [`DELETE`](SDL_Keycode::DELETE) | [`SDLK_DELETE`] | '\x7F' |
/// | [`PLUSMINUS`](SDL_Keycode::PLUSMINUS) | [`SDLK_PLUSMINUS`] | '\xB1' |
/// | [`CAPSLOCK`](SDL_Keycode::CAPSLOCK) | [`SDLK_CAPSLOCK`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CAPSLOCK`]) |
/// | [`F1`](SDL_Keycode::F1) | [`SDLK_F1`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F1`]) |
/// | [`F2`](SDL_Keycode::F2) | [`SDLK_F2`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F2`]) |
/// | [`F3`](SDL_Keycode::F3) | [`SDLK_F3`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F3`]) |
/// | [`F4`](SDL_Keycode::F4) | [`SDLK_F4`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F4`]) |
/// | [`F5`](SDL_Keycode::F5) | [`SDLK_F5`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F5`]) |
/// | [`F6`](SDL_Keycode::F6) | [`SDLK_F6`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F6`]) |
/// | [`F7`](SDL_Keycode::F7) | [`SDLK_F7`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F7`]) |
/// | [`F8`](SDL_Keycode::F8) | [`SDLK_F8`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F8`]) |
/// | [`F9`](SDL_Keycode::F9) | [`SDLK_F9`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F9`]) |
/// | [`F10`](SDL_Keycode::F10) | [`SDLK_F10`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F10`]) |
/// | [`F11`](SDL_Keycode::F11) | [`SDLK_F11`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F11`]) |
/// | [`F12`](SDL_Keycode::F12) | [`SDLK_F12`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F12`]) |
/// | [`PRINTSCREEN`](SDL_Keycode::PRINTSCREEN) | [`SDLK_PRINTSCREEN`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_PRINTSCREEN`]) |
/// | [`SCROLLLOCK`](SDL_Keycode::SCROLLLOCK) | [`SDLK_SCROLLLOCK`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_SCROLLLOCK`]) |
/// | [`PAUSE`](SDL_Keycode::PAUSE) | [`SDLK_PAUSE`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_PAUSE`]) |
/// | [`INSERT`](SDL_Keycode::INSERT) | [`SDLK_INSERT`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_INSERT`]) |
/// | [`HOME`](SDL_Keycode::HOME) | [`SDLK_HOME`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_HOME`]) |
/// | [`PAGEUP`](SDL_Keycode::PAGEUP) | [`SDLK_PAGEUP`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_PAGEUP`]) |
/// | [`END`](SDL_Keycode::END) | [`SDLK_END`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_END`]) |
/// | [`PAGEDOWN`](SDL_Keycode::PAGEDOWN) | [`SDLK_PAGEDOWN`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_PAGEDOWN`]) |
/// | [`RIGHT`](SDL_Keycode::RIGHT) | [`SDLK_RIGHT`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_RIGHT`]) |
/// | [`LEFT`](SDL_Keycode::LEFT) | [`SDLK_LEFT`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_LEFT`]) |
/// | [`DOWN`](SDL_Keycode::DOWN) | [`SDLK_DOWN`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_DOWN`]) |
/// | [`UP`](SDL_Keycode::UP) | [`SDLK_UP`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_UP`]) |
/// | [`NUMLOCKCLEAR`](SDL_Keycode::NUMLOCKCLEAR) | [`SDLK_NUMLOCKCLEAR`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_NUMLOCKCLEAR`]) |
/// | [`KP_DIVIDE`](SDL_Keycode::KP_DIVIDE) | [`SDLK_KP_DIVIDE`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_DIVIDE`]) |
/// | [`KP_MULTIPLY`](SDL_Keycode::KP_MULTIPLY) | [`SDLK_KP_MULTIPLY`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_MULTIPLY`]) |
/// | [`KP_MINUS`](SDL_Keycode::KP_MINUS) | [`SDLK_KP_MINUS`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_MINUS`]) |
/// | [`KP_PLUS`](SDL_Keycode::KP_PLUS) | [`SDLK_KP_PLUS`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_PLUS`]) |
/// | [`KP_ENTER`](SDL_Keycode::KP_ENTER) | [`SDLK_KP_ENTER`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_ENTER`]) |
/// | [`KP_1`](SDL_Keycode::KP_1) | [`SDLK_KP_1`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_1`]) |
/// | [`KP_2`](SDL_Keycode::KP_2) | [`SDLK_KP_2`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_2`]) |
/// | [`KP_3`](SDL_Keycode::KP_3) | [`SDLK_KP_3`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_3`]) |
/// | [`KP_4`](SDL_Keycode::KP_4) | [`SDLK_KP_4`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_4`]) |
/// | [`KP_5`](SDL_Keycode::KP_5) | [`SDLK_KP_5`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_5`]) |
/// | [`KP_6`](SDL_Keycode::KP_6) | [`SDLK_KP_6`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_6`]) |
/// | [`KP_7`](SDL_Keycode::KP_7) | [`SDLK_KP_7`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_7`]) |
/// | [`KP_8`](SDL_Keycode::KP_8) | [`SDLK_KP_8`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_8`]) |
/// | [`KP_9`](SDL_Keycode::KP_9) | [`SDLK_KP_9`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_9`]) |
/// | [`KP_0`](SDL_Keycode::KP_0) | [`SDLK_KP_0`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_0`]) |
/// | [`KP_PERIOD`](SDL_Keycode::KP_PERIOD) | [`SDLK_KP_PERIOD`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_PERIOD`]) |
/// | [`APPLICATION`](SDL_Keycode::APPLICATION) | [`SDLK_APPLICATION`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_APPLICATION`]) |
/// | [`POWER`](SDL_Keycode::POWER) | [`SDLK_POWER`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_POWER`]) |
/// | [`KP_EQUALS`](SDL_Keycode::KP_EQUALS) | [`SDLK_KP_EQUALS`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_EQUALS`]) |
/// | [`F13`](SDL_Keycode::F13) | [`SDLK_F13`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F13`]) |
/// | [`F14`](SDL_Keycode::F14) | [`SDLK_F14`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F14`]) |
/// | [`F15`](SDL_Keycode::F15) | [`SDLK_F15`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F15`]) |
/// | [`F16`](SDL_Keycode::F16) | [`SDLK_F16`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F16`]) |
/// | [`F17`](SDL_Keycode::F17) | [`SDLK_F17`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F17`]) |
/// | [`F18`](SDL_Keycode::F18) | [`SDLK_F18`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F18`]) |
/// | [`F19`](SDL_Keycode::F19) | [`SDLK_F19`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F19`]) |
/// | [`F20`](SDL_Keycode::F20) | [`SDLK_F20`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F20`]) |
/// | [`F21`](SDL_Keycode::F21) | [`SDLK_F21`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F21`]) |
/// | [`F22`](SDL_Keycode::F22) | [`SDLK_F22`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F22`]) |
/// | [`F23`](SDL_Keycode::F23) | [`SDLK_F23`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F23`]) |
/// | [`F24`](SDL_Keycode::F24) | [`SDLK_F24`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F24`]) |
/// | [`EXECUTE`](SDL_Keycode::EXECUTE) | [`SDLK_EXECUTE`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_EXECUTE`]) |
/// | [`HELP`](SDL_Keycode::HELP) | [`SDLK_HELP`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_HELP`]) |
/// | [`MENU`](SDL_Keycode::MENU) | [`SDLK_MENU`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MENU`]) |
/// | [`SELECT`](SDL_Keycode::SELECT) | [`SDLK_SELECT`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_SELECT`]) |
/// | [`STOP`](SDL_Keycode::STOP) | [`SDLK_STOP`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_STOP`]) |
/// | [`AGAIN`](SDL_Keycode::AGAIN) | [`SDLK_AGAIN`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AGAIN`]) |
/// | [`UNDO`](SDL_Keycode::UNDO) | [`SDLK_UNDO`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_UNDO`]) |
/// | [`CUT`](SDL_Keycode::CUT) | [`SDLK_CUT`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CUT`]) |
/// | [`COPY`](SDL_Keycode::COPY) | [`SDLK_COPY`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_COPY`]) |
/// | [`PASTE`](SDL_Keycode::PASTE) | [`SDLK_PASTE`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_PASTE`]) |
/// | [`FIND`](SDL_Keycode::FIND) | [`SDLK_FIND`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_FIND`]) |
/// | [`MUTE`](SDL_Keycode::MUTE) | [`SDLK_MUTE`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MUTE`]) |
/// | [`VOLUMEUP`](SDL_Keycode::VOLUMEUP) | [`SDLK_VOLUMEUP`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_VOLUMEUP`]) |
/// | [`VOLUMEDOWN`](SDL_Keycode::VOLUMEDOWN) | [`SDLK_VOLUMEDOWN`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_VOLUMEDOWN`]) |
/// | [`KP_COMMA`](SDL_Keycode::KP_COMMA) | [`SDLK_KP_COMMA`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_COMMA`]) |
/// | [`KP_EQUALSAS400`](SDL_Keycode::KP_EQUALSAS400) | [`SDLK_KP_EQUALSAS400`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_EQUALSAS400`]) |
/// | [`ALTERASE`](SDL_Keycode::ALTERASE) | [`SDLK_ALTERASE`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_ALTERASE`]) |
/// | [`SYSREQ`](SDL_Keycode::SYSREQ) | [`SDLK_SYSREQ`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_SYSREQ`]) |
/// | [`CANCEL`](SDL_Keycode::CANCEL) | [`SDLK_CANCEL`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CANCEL`]) |
/// | [`CLEAR`](SDL_Keycode::CLEAR) | [`SDLK_CLEAR`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CLEAR`]) |
/// | [`PRIOR`](SDL_Keycode::PRIOR) | [`SDLK_PRIOR`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_PRIOR`]) |
/// | [`RETURN2`](SDL_Keycode::RETURN2) | [`SDLK_RETURN2`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_RETURN2`]) |
/// | [`SEPARATOR`](SDL_Keycode::SEPARATOR) | [`SDLK_SEPARATOR`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_SEPARATOR`]) |
/// | [`OUT`](SDL_Keycode::OUT) | [`SDLK_OUT`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_OUT`]) |
/// | [`OPER`](SDL_Keycode::OPER) | [`SDLK_OPER`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_OPER`]) |
/// | [`CLEARAGAIN`](SDL_Keycode::CLEARAGAIN) | [`SDLK_CLEARAGAIN`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CLEARAGAIN`]) |
/// | [`CRSEL`](SDL_Keycode::CRSEL) | [`SDLK_CRSEL`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CRSEL`]) |
/// | [`EXSEL`](SDL_Keycode::EXSEL) | [`SDLK_EXSEL`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_EXSEL`]) |
/// | [`KP_00`](SDL_Keycode::KP_00) | [`SDLK_KP_00`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_00`]) |
/// | [`KP_000`](SDL_Keycode::KP_000) | [`SDLK_KP_000`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_000`]) |
/// | [`THOUSANDSSEPARATOR`](SDL_Keycode::THOUSANDSSEPARATOR) | [`SDLK_THOUSANDSSEPARATOR`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_THOUSANDSSEPARATOR`]) |
/// | [`DECIMALSEPARATOR`](SDL_Keycode::DECIMALSEPARATOR) | [`SDLK_DECIMALSEPARATOR`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_DECIMALSEPARATOR`]) |
/// | [`CURRENCYUNIT`](SDL_Keycode::CURRENCYUNIT) | [`SDLK_CURRENCYUNIT`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CURRENCYUNIT`]) |
/// | [`CURRENCYSUBUNIT`](SDL_Keycode::CURRENCYSUBUNIT) | [`SDLK_CURRENCYSUBUNIT`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CURRENCYSUBUNIT`]) |
/// | [`KP_LEFTPAREN`](SDL_Keycode::KP_LEFTPAREN) | [`SDLK_KP_LEFTPAREN`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_LEFTPAREN`]) |
/// | [`KP_RIGHTPAREN`](SDL_Keycode::KP_RIGHTPAREN) | [`SDLK_KP_RIGHTPAREN`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_RIGHTPAREN`]) |
/// | [`KP_LEFTBRACE`](SDL_Keycode::KP_LEFTBRACE) | [`SDLK_KP_LEFTBRACE`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_LEFTBRACE`]) |
/// | [`KP_RIGHTBRACE`](SDL_Keycode::KP_RIGHTBRACE) | [`SDLK_KP_RIGHTBRACE`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_RIGHTBRACE`]) |
/// | [`KP_TAB`](SDL_Keycode::KP_TAB) | [`SDLK_KP_TAB`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_TAB`]) |
/// | [`KP_BACKSPACE`](SDL_Keycode::KP_BACKSPACE) | [`SDLK_KP_BACKSPACE`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_BACKSPACE`]) |
/// | [`KP_A`](SDL_Keycode::KP_A) | [`SDLK_KP_A`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_A`]) |
/// | [`KP_B`](SDL_Keycode::KP_B) | [`SDLK_KP_B`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_B`]) |
/// | [`KP_C`](SDL_Keycode::KP_C) | [`SDLK_KP_C`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_C`]) |
/// | [`KP_D`](SDL_Keycode::KP_D) | [`SDLK_KP_D`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_D`]) |
/// | [`KP_E`](SDL_Keycode::KP_E) | [`SDLK_KP_E`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_E`]) |
/// | [`KP_F`](SDL_Keycode::KP_F) | [`SDLK_KP_F`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_F`]) |
/// | [`KP_XOR`](SDL_Keycode::KP_XOR) | [`SDLK_KP_XOR`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_XOR`]) |
/// | [`KP_POWER`](SDL_Keycode::KP_POWER) | [`SDLK_KP_POWER`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_POWER`]) |
/// | [`KP_PERCENT`](SDL_Keycode::KP_PERCENT) | [`SDLK_KP_PERCENT`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_PERCENT`]) |
/// | [`KP_LESS`](SDL_Keycode::KP_LESS) | [`SDLK_KP_LESS`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_LESS`]) |
/// | [`KP_GREATER`](SDL_Keycode::KP_GREATER) | [`SDLK_KP_GREATER`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_GREATER`]) |
/// | [`KP_AMPERSAND`](SDL_Keycode::KP_AMPERSAND) | [`SDLK_KP_AMPERSAND`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_AMPERSAND`]) |
/// | [`KP_DBLAMPERSAND`](SDL_Keycode::KP_DBLAMPERSAND) | [`SDLK_KP_DBLAMPERSAND`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_DBLAMPERSAND`]) |
/// | [`KP_VERTICALBAR`](SDL_Keycode::KP_VERTICALBAR) | [`SDLK_KP_VERTICALBAR`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_VERTICALBAR`]) |
/// | [`KP_DBLVERTICALBAR`](SDL_Keycode::KP_DBLVERTICALBAR) | [`SDLK_KP_DBLVERTICALBAR`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_DBLVERTICALBAR`]) |
/// | [`KP_COLON`](SDL_Keycode::KP_COLON) | [`SDLK_KP_COLON`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_COLON`]) |
/// | [`KP_HASH`](SDL_Keycode::KP_HASH) | [`SDLK_KP_HASH`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_HASH`]) |
/// | [`KP_SPACE`](SDL_Keycode::KP_SPACE) | [`SDLK_KP_SPACE`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_SPACE`]) |
/// | [`KP_AT`](SDL_Keycode::KP_AT) | [`SDLK_KP_AT`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_AT`]) |
/// | [`KP_EXCLAM`](SDL_Keycode::KP_EXCLAM) | [`SDLK_KP_EXCLAM`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_EXCLAM`]) |
/// | [`KP_MEMSTORE`](SDL_Keycode::KP_MEMSTORE) | [`SDLK_KP_MEMSTORE`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_MEMSTORE`]) |
/// | [`KP_MEMRECALL`](SDL_Keycode::KP_MEMRECALL) | [`SDLK_KP_MEMRECALL`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_MEMRECALL`]) |
/// | [`KP_MEMCLEAR`](SDL_Keycode::KP_MEMCLEAR) | [`SDLK_KP_MEMCLEAR`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_MEMCLEAR`]) |
/// | [`KP_MEMADD`](SDL_Keycode::KP_MEMADD) | [`SDLK_KP_MEMADD`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_MEMADD`]) |
/// | [`KP_MEMSUBTRACT`](SDL_Keycode::KP_MEMSUBTRACT) | [`SDLK_KP_MEMSUBTRACT`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_MEMSUBTRACT`]) |
/// | [`KP_MEMMULTIPLY`](SDL_Keycode::KP_MEMMULTIPLY) | [`SDLK_KP_MEMMULTIPLY`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_MEMMULTIPLY`]) |
/// | [`KP_MEMDIVIDE`](SDL_Keycode::KP_MEMDIVIDE) | [`SDLK_KP_MEMDIVIDE`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_MEMDIVIDE`]) |
/// | [`KP_PLUSMINUS`](SDL_Keycode::KP_PLUSMINUS) | [`SDLK_KP_PLUSMINUS`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_PLUSMINUS`]) |
/// | [`KP_CLEAR`](SDL_Keycode::KP_CLEAR) | [`SDLK_KP_CLEAR`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_CLEAR`]) |
/// | [`KP_CLEARENTRY`](SDL_Keycode::KP_CLEARENTRY) | [`SDLK_KP_CLEARENTRY`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_CLEARENTRY`]) |
/// | [`KP_BINARY`](SDL_Keycode::KP_BINARY) | [`SDLK_KP_BINARY`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_BINARY`]) |
/// | [`KP_OCTAL`](SDL_Keycode::KP_OCTAL) | [`SDLK_KP_OCTAL`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_OCTAL`]) |
/// | [`KP_DECIMAL`](SDL_Keycode::KP_DECIMAL) | [`SDLK_KP_DECIMAL`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_DECIMAL`]) |
/// | [`KP_HEXADECIMAL`](SDL_Keycode::KP_HEXADECIMAL) | [`SDLK_KP_HEXADECIMAL`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_HEXADECIMAL`]) |
/// | [`LCTRL`](SDL_Keycode::LCTRL) | [`SDLK_LCTRL`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_LCTRL`]) |
/// | [`LSHIFT`](SDL_Keycode::LSHIFT) | [`SDLK_LSHIFT`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_LSHIFT`]) |
/// | [`LALT`](SDL_Keycode::LALT) | [`SDLK_LALT`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_LALT`]) |
/// | [`LGUI`](SDL_Keycode::LGUI) | [`SDLK_LGUI`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_LGUI`]) |
/// | [`RCTRL`](SDL_Keycode::RCTRL) | [`SDLK_RCTRL`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_RCTRL`]) |
/// | [`RSHIFT`](SDL_Keycode::RSHIFT) | [`SDLK_RSHIFT`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_RSHIFT`]) |
/// | [`RALT`](SDL_Keycode::RALT) | [`SDLK_RALT`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_RALT`]) |
/// | [`RGUI`](SDL_Keycode::RGUI) | [`SDLK_RGUI`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_RGUI`]) |
/// | [`MODE`](SDL_Keycode::MODE) | [`SDLK_MODE`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MODE`]) |
/// | [`SLEEP`](SDL_Keycode::SLEEP) | [`SDLK_SLEEP`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_SLEEP`]) |
/// | [`WAKE`](SDL_Keycode::WAKE) | [`SDLK_WAKE`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_WAKE`]) |
/// | [`CHANNEL_INCREMENT`](SDL_Keycode::CHANNEL_INCREMENT) | [`SDLK_CHANNEL_INCREMENT`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CHANNEL_INCREMENT`]) |
/// | [`CHANNEL_DECREMENT`](SDL_Keycode::CHANNEL_DECREMENT) | [`SDLK_CHANNEL_DECREMENT`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CHANNEL_DECREMENT`]) |
/// | [`MEDIA_PLAY`](SDL_Keycode::MEDIA_PLAY) | [`SDLK_MEDIA_PLAY`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_PLAY`]) |
/// | [`MEDIA_PAUSE`](SDL_Keycode::MEDIA_PAUSE) | [`SDLK_MEDIA_PAUSE`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_PAUSE`]) |
/// | [`MEDIA_RECORD`](SDL_Keycode::MEDIA_RECORD) | [`SDLK_MEDIA_RECORD`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_RECORD`]) |
/// | [`MEDIA_FAST_FORWARD`](SDL_Keycode::MEDIA_FAST_FORWARD) | [`SDLK_MEDIA_FAST_FORWARD`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_FAST_FORWARD`]) |
/// | [`MEDIA_REWIND`](SDL_Keycode::MEDIA_REWIND) | [`SDLK_MEDIA_REWIND`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_REWIND`]) |
/// | [`MEDIA_NEXT_TRACK`](SDL_Keycode::MEDIA_NEXT_TRACK) | [`SDLK_MEDIA_NEXT_TRACK`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_NEXT_TRACK`]) |
/// | [`MEDIA_PREVIOUS_TRACK`](SDL_Keycode::MEDIA_PREVIOUS_TRACK) | [`SDLK_MEDIA_PREVIOUS_TRACK`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_PREVIOUS_TRACK`]) |
/// | [`MEDIA_STOP`](SDL_Keycode::MEDIA_STOP) | [`SDLK_MEDIA_STOP`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_STOP`]) |
/// | [`MEDIA_EJECT`](SDL_Keycode::MEDIA_EJECT) | [`SDLK_MEDIA_EJECT`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_EJECT`]) |
/// | [`MEDIA_PLAY_PAUSE`](SDL_Keycode::MEDIA_PLAY_PAUSE) | [`SDLK_MEDIA_PLAY_PAUSE`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_PLAY_PAUSE`]) |
/// | [`MEDIA_SELECT`](SDL_Keycode::MEDIA_SELECT) | [`SDLK_MEDIA_SELECT`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_SELECT`]) |
/// | [`AC_NEW`](SDL_Keycode::AC_NEW) | [`SDLK_AC_NEW`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_NEW`]) |
/// | [`AC_OPEN`](SDL_Keycode::AC_OPEN) | [`SDLK_AC_OPEN`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_OPEN`]) |
/// | [`AC_CLOSE`](SDL_Keycode::AC_CLOSE) | [`SDLK_AC_CLOSE`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_CLOSE`]) |
/// | [`AC_EXIT`](SDL_Keycode::AC_EXIT) | [`SDLK_AC_EXIT`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_EXIT`]) |
/// | [`AC_SAVE`](SDL_Keycode::AC_SAVE) | [`SDLK_AC_SAVE`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_SAVE`]) |
/// | [`AC_PRINT`](SDL_Keycode::AC_PRINT) | [`SDLK_AC_PRINT`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_PRINT`]) |
/// | [`AC_PROPERTIES`](SDL_Keycode::AC_PROPERTIES) | [`SDLK_AC_PROPERTIES`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_PROPERTIES`]) |
/// | [`AC_SEARCH`](SDL_Keycode::AC_SEARCH) | [`SDLK_AC_SEARCH`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_SEARCH`]) |
/// | [`AC_HOME`](SDL_Keycode::AC_HOME) | [`SDLK_AC_HOME`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_HOME`]) |
/// | [`AC_BACK`](SDL_Keycode::AC_BACK) | [`SDLK_AC_BACK`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_BACK`]) |
/// | [`AC_FORWARD`](SDL_Keycode::AC_FORWARD) | [`SDLK_AC_FORWARD`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_FORWARD`]) |
/// | [`AC_STOP`](SDL_Keycode::AC_STOP) | [`SDLK_AC_STOP`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_STOP`]) |
/// | [`AC_REFRESH`](SDL_Keycode::AC_REFRESH) | [`SDLK_AC_REFRESH`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_REFRESH`]) |
/// | [`AC_BOOKMARKS`](SDL_Keycode::AC_BOOKMARKS) | [`SDLK_AC_BOOKMARKS`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_BOOKMARKS`]) |
/// | [`SOFTLEFT`](SDL_Keycode::SOFTLEFT) | [`SDLK_SOFTLEFT`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_SOFTLEFT`]) |
/// | [`SOFTRIGHT`](SDL_Keycode::SOFTRIGHT) | [`SDLK_SOFTRIGHT`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_SOFTRIGHT`]) |
/// | [`CALL`](SDL_Keycode::CALL) | [`SDLK_CALL`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CALL`]) |
/// | [`ENDCALL`](SDL_Keycode::ENDCALL) | [`SDLK_ENDCALL`] | SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_ENDCALL`]) |
/// | [`LEFT_TAB`](SDL_Keycode::LEFT_TAB) | [`SDLK_LEFT_TAB`] | Extended key Left Tab |
/// | [`LEVEL5_SHIFT`](SDL_Keycode::LEVEL5_SHIFT) | [`SDLK_LEVEL5_SHIFT`] | Extended key Level 5 Shift |
/// | [`MULTI_KEY_COMPOSE`](SDL_Keycode::MULTI_KEY_COMPOSE) | [`SDLK_MULTI_KEY_COMPOSE`] | Extended key Multi-key Compose |
/// | [`LMETA`](SDL_Keycode::LMETA) | [`SDLK_LMETA`] | Extended key Left Meta |
/// | [`RMETA`](SDL_Keycode::RMETA) | [`SDLK_RMETA`] | Extended key Right Meta |
/// | [`LHYPER`](SDL_Keycode::LHYPER) | [`SDLK_LHYPER`] | Extended key Left Hyper |
/// | [`RHYPER`](SDL_Keycode::RHYPER) | [`SDLK_RHYPER`] | Extended key Right Hyper |
#[repr(transparent)]
#[derive(Clone, Copy, Default, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub struct SDL_Keycode(pub Uint32);

impl ::core::cmp::PartialEq<Uint32> for SDL_Keycode {
    #[inline(always)]
    fn eq(&self, other: &Uint32) -> bool {
        &self.0 == other
    }
}

impl ::core::cmp::PartialEq<SDL_Keycode> for Uint32 {
    #[inline(always)]
    fn eq(&self, other: &SDL_Keycode) -> bool {
        self == &other.0
    }
}

impl From<SDL_Keycode> for Uint32 {
    #[inline(always)]
    fn from(value: SDL_Keycode) -> Self {
        value.0
    }
}

#[cfg(feature = "debug-impls")]
impl ::core::fmt::Debug for SDL_Keycode {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        #[allow(unreachable_patterns)]
        f.write_str(match *self {
            Self::EXTENDED_MASK => "SDLK_EXTENDED_MASK",
            Self::SCANCODE_MASK => "SDLK_SCANCODE_MASK",
            Self::UNKNOWN => "SDLK_UNKNOWN",
            Self::RETURN => "SDLK_RETURN",
            Self::ESCAPE => "SDLK_ESCAPE",
            Self::BACKSPACE => "SDLK_BACKSPACE",
            Self::TAB => "SDLK_TAB",
            Self::SPACE => "SDLK_SPACE",
            Self::EXCLAIM => "SDLK_EXCLAIM",
            Self::DBLAPOSTROPHE => "SDLK_DBLAPOSTROPHE",
            Self::HASH => "SDLK_HASH",
            Self::DOLLAR => "SDLK_DOLLAR",
            Self::PERCENT => "SDLK_PERCENT",
            Self::AMPERSAND => "SDLK_AMPERSAND",
            Self::APOSTROPHE => "SDLK_APOSTROPHE",
            Self::LEFTPAREN => "SDLK_LEFTPAREN",
            Self::RIGHTPAREN => "SDLK_RIGHTPAREN",
            Self::ASTERISK => "SDLK_ASTERISK",
            Self::PLUS => "SDLK_PLUS",
            Self::COMMA => "SDLK_COMMA",
            Self::MINUS => "SDLK_MINUS",
            Self::PERIOD => "SDLK_PERIOD",
            Self::SLASH => "SDLK_SLASH",
            Self::_0 => "SDLK_0",
            Self::_1 => "SDLK_1",
            Self::_2 => "SDLK_2",
            Self::_3 => "SDLK_3",
            Self::_4 => "SDLK_4",
            Self::_5 => "SDLK_5",
            Self::_6 => "SDLK_6",
            Self::_7 => "SDLK_7",
            Self::_8 => "SDLK_8",
            Self::_9 => "SDLK_9",
            Self::COLON => "SDLK_COLON",
            Self::SEMICOLON => "SDLK_SEMICOLON",
            Self::LESS => "SDLK_LESS",
            Self::EQUALS => "SDLK_EQUALS",
            Self::GREATER => "SDLK_GREATER",
            Self::QUESTION => "SDLK_QUESTION",
            Self::AT => "SDLK_AT",
            Self::LEFTBRACKET => "SDLK_LEFTBRACKET",
            Self::BACKSLASH => "SDLK_BACKSLASH",
            Self::RIGHTBRACKET => "SDLK_RIGHTBRACKET",
            Self::CARET => "SDLK_CARET",
            Self::UNDERSCORE => "SDLK_UNDERSCORE",
            Self::GRAVE => "SDLK_GRAVE",
            Self::A => "SDLK_A",
            Self::B => "SDLK_B",
            Self::C => "SDLK_C",
            Self::D => "SDLK_D",
            Self::E => "SDLK_E",
            Self::F => "SDLK_F",
            Self::G => "SDLK_G",
            Self::H => "SDLK_H",
            Self::I => "SDLK_I",
            Self::J => "SDLK_J",
            Self::K => "SDLK_K",
            Self::L => "SDLK_L",
            Self::M => "SDLK_M",
            Self::N => "SDLK_N",
            Self::O => "SDLK_O",
            Self::P => "SDLK_P",
            Self::Q => "SDLK_Q",
            Self::R => "SDLK_R",
            Self::S => "SDLK_S",
            Self::T => "SDLK_T",
            Self::U => "SDLK_U",
            Self::V => "SDLK_V",
            Self::W => "SDLK_W",
            Self::X => "SDLK_X",
            Self::Y => "SDLK_Y",
            Self::Z => "SDLK_Z",
            Self::LEFTBRACE => "SDLK_LEFTBRACE",
            Self::PIPE => "SDLK_PIPE",
            Self::RIGHTBRACE => "SDLK_RIGHTBRACE",
            Self::TILDE => "SDLK_TILDE",
            Self::DELETE => "SDLK_DELETE",
            Self::PLUSMINUS => "SDLK_PLUSMINUS",
            Self::CAPSLOCK => "SDLK_CAPSLOCK",
            Self::F1 => "SDLK_F1",
            Self::F2 => "SDLK_F2",
            Self::F3 => "SDLK_F3",
            Self::F4 => "SDLK_F4",
            Self::F5 => "SDLK_F5",
            Self::F6 => "SDLK_F6",
            Self::F7 => "SDLK_F7",
            Self::F8 => "SDLK_F8",
            Self::F9 => "SDLK_F9",
            Self::F10 => "SDLK_F10",
            Self::F11 => "SDLK_F11",
            Self::F12 => "SDLK_F12",
            Self::PRINTSCREEN => "SDLK_PRINTSCREEN",
            Self::SCROLLLOCK => "SDLK_SCROLLLOCK",
            Self::PAUSE => "SDLK_PAUSE",
            Self::INSERT => "SDLK_INSERT",
            Self::HOME => "SDLK_HOME",
            Self::PAGEUP => "SDLK_PAGEUP",
            Self::END => "SDLK_END",
            Self::PAGEDOWN => "SDLK_PAGEDOWN",
            Self::RIGHT => "SDLK_RIGHT",
            Self::LEFT => "SDLK_LEFT",
            Self::DOWN => "SDLK_DOWN",
            Self::UP => "SDLK_UP",
            Self::NUMLOCKCLEAR => "SDLK_NUMLOCKCLEAR",
            Self::KP_DIVIDE => "SDLK_KP_DIVIDE",
            Self::KP_MULTIPLY => "SDLK_KP_MULTIPLY",
            Self::KP_MINUS => "SDLK_KP_MINUS",
            Self::KP_PLUS => "SDLK_KP_PLUS",
            Self::KP_ENTER => "SDLK_KP_ENTER",
            Self::KP_1 => "SDLK_KP_1",
            Self::KP_2 => "SDLK_KP_2",
            Self::KP_3 => "SDLK_KP_3",
            Self::KP_4 => "SDLK_KP_4",
            Self::KP_5 => "SDLK_KP_5",
            Self::KP_6 => "SDLK_KP_6",
            Self::KP_7 => "SDLK_KP_7",
            Self::KP_8 => "SDLK_KP_8",
            Self::KP_9 => "SDLK_KP_9",
            Self::KP_0 => "SDLK_KP_0",
            Self::KP_PERIOD => "SDLK_KP_PERIOD",
            Self::APPLICATION => "SDLK_APPLICATION",
            Self::POWER => "SDLK_POWER",
            Self::KP_EQUALS => "SDLK_KP_EQUALS",
            Self::F13 => "SDLK_F13",
            Self::F14 => "SDLK_F14",
            Self::F15 => "SDLK_F15",
            Self::F16 => "SDLK_F16",
            Self::F17 => "SDLK_F17",
            Self::F18 => "SDLK_F18",
            Self::F19 => "SDLK_F19",
            Self::F20 => "SDLK_F20",
            Self::F21 => "SDLK_F21",
            Self::F22 => "SDLK_F22",
            Self::F23 => "SDLK_F23",
            Self::F24 => "SDLK_F24",
            Self::EXECUTE => "SDLK_EXECUTE",
            Self::HELP => "SDLK_HELP",
            Self::MENU => "SDLK_MENU",
            Self::SELECT => "SDLK_SELECT",
            Self::STOP => "SDLK_STOP",
            Self::AGAIN => "SDLK_AGAIN",
            Self::UNDO => "SDLK_UNDO",
            Self::CUT => "SDLK_CUT",
            Self::COPY => "SDLK_COPY",
            Self::PASTE => "SDLK_PASTE",
            Self::FIND => "SDLK_FIND",
            Self::MUTE => "SDLK_MUTE",
            Self::VOLUMEUP => "SDLK_VOLUMEUP",
            Self::VOLUMEDOWN => "SDLK_VOLUMEDOWN",
            Self::KP_COMMA => "SDLK_KP_COMMA",
            Self::KP_EQUALSAS400 => "SDLK_KP_EQUALSAS400",
            Self::ALTERASE => "SDLK_ALTERASE",
            Self::SYSREQ => "SDLK_SYSREQ",
            Self::CANCEL => "SDLK_CANCEL",
            Self::CLEAR => "SDLK_CLEAR",
            Self::PRIOR => "SDLK_PRIOR",
            Self::RETURN2 => "SDLK_RETURN2",
            Self::SEPARATOR => "SDLK_SEPARATOR",
            Self::OUT => "SDLK_OUT",
            Self::OPER => "SDLK_OPER",
            Self::CLEARAGAIN => "SDLK_CLEARAGAIN",
            Self::CRSEL => "SDLK_CRSEL",
            Self::EXSEL => "SDLK_EXSEL",
            Self::KP_00 => "SDLK_KP_00",
            Self::KP_000 => "SDLK_KP_000",
            Self::THOUSANDSSEPARATOR => "SDLK_THOUSANDSSEPARATOR",
            Self::DECIMALSEPARATOR => "SDLK_DECIMALSEPARATOR",
            Self::CURRENCYUNIT => "SDLK_CURRENCYUNIT",
            Self::CURRENCYSUBUNIT => "SDLK_CURRENCYSUBUNIT",
            Self::KP_LEFTPAREN => "SDLK_KP_LEFTPAREN",
            Self::KP_RIGHTPAREN => "SDLK_KP_RIGHTPAREN",
            Self::KP_LEFTBRACE => "SDLK_KP_LEFTBRACE",
            Self::KP_RIGHTBRACE => "SDLK_KP_RIGHTBRACE",
            Self::KP_TAB => "SDLK_KP_TAB",
            Self::KP_BACKSPACE => "SDLK_KP_BACKSPACE",
            Self::KP_A => "SDLK_KP_A",
            Self::KP_B => "SDLK_KP_B",
            Self::KP_C => "SDLK_KP_C",
            Self::KP_D => "SDLK_KP_D",
            Self::KP_E => "SDLK_KP_E",
            Self::KP_F => "SDLK_KP_F",
            Self::KP_XOR => "SDLK_KP_XOR",
            Self::KP_POWER => "SDLK_KP_POWER",
            Self::KP_PERCENT => "SDLK_KP_PERCENT",
            Self::KP_LESS => "SDLK_KP_LESS",
            Self::KP_GREATER => "SDLK_KP_GREATER",
            Self::KP_AMPERSAND => "SDLK_KP_AMPERSAND",
            Self::KP_DBLAMPERSAND => "SDLK_KP_DBLAMPERSAND",
            Self::KP_VERTICALBAR => "SDLK_KP_VERTICALBAR",
            Self::KP_DBLVERTICALBAR => "SDLK_KP_DBLVERTICALBAR",
            Self::KP_COLON => "SDLK_KP_COLON",
            Self::KP_HASH => "SDLK_KP_HASH",
            Self::KP_SPACE => "SDLK_KP_SPACE",
            Self::KP_AT => "SDLK_KP_AT",
            Self::KP_EXCLAM => "SDLK_KP_EXCLAM",
            Self::KP_MEMSTORE => "SDLK_KP_MEMSTORE",
            Self::KP_MEMRECALL => "SDLK_KP_MEMRECALL",
            Self::KP_MEMCLEAR => "SDLK_KP_MEMCLEAR",
            Self::KP_MEMADD => "SDLK_KP_MEMADD",
            Self::KP_MEMSUBTRACT => "SDLK_KP_MEMSUBTRACT",
            Self::KP_MEMMULTIPLY => "SDLK_KP_MEMMULTIPLY",
            Self::KP_MEMDIVIDE => "SDLK_KP_MEMDIVIDE",
            Self::KP_PLUSMINUS => "SDLK_KP_PLUSMINUS",
            Self::KP_CLEAR => "SDLK_KP_CLEAR",
            Self::KP_CLEARENTRY => "SDLK_KP_CLEARENTRY",
            Self::KP_BINARY => "SDLK_KP_BINARY",
            Self::KP_OCTAL => "SDLK_KP_OCTAL",
            Self::KP_DECIMAL => "SDLK_KP_DECIMAL",
            Self::KP_HEXADECIMAL => "SDLK_KP_HEXADECIMAL",
            Self::LCTRL => "SDLK_LCTRL",
            Self::LSHIFT => "SDLK_LSHIFT",
            Self::LALT => "SDLK_LALT",
            Self::LGUI => "SDLK_LGUI",
            Self::RCTRL => "SDLK_RCTRL",
            Self::RSHIFT => "SDLK_RSHIFT",
            Self::RALT => "SDLK_RALT",
            Self::RGUI => "SDLK_RGUI",
            Self::MODE => "SDLK_MODE",
            Self::SLEEP => "SDLK_SLEEP",
            Self::WAKE => "SDLK_WAKE",
            Self::CHANNEL_INCREMENT => "SDLK_CHANNEL_INCREMENT",
            Self::CHANNEL_DECREMENT => "SDLK_CHANNEL_DECREMENT",
            Self::MEDIA_PLAY => "SDLK_MEDIA_PLAY",
            Self::MEDIA_PAUSE => "SDLK_MEDIA_PAUSE",
            Self::MEDIA_RECORD => "SDLK_MEDIA_RECORD",
            Self::MEDIA_FAST_FORWARD => "SDLK_MEDIA_FAST_FORWARD",
            Self::MEDIA_REWIND => "SDLK_MEDIA_REWIND",
            Self::MEDIA_NEXT_TRACK => "SDLK_MEDIA_NEXT_TRACK",
            Self::MEDIA_PREVIOUS_TRACK => "SDLK_MEDIA_PREVIOUS_TRACK",
            Self::MEDIA_STOP => "SDLK_MEDIA_STOP",
            Self::MEDIA_EJECT => "SDLK_MEDIA_EJECT",
            Self::MEDIA_PLAY_PAUSE => "SDLK_MEDIA_PLAY_PAUSE",
            Self::MEDIA_SELECT => "SDLK_MEDIA_SELECT",
            Self::AC_NEW => "SDLK_AC_NEW",
            Self::AC_OPEN => "SDLK_AC_OPEN",
            Self::AC_CLOSE => "SDLK_AC_CLOSE",
            Self::AC_EXIT => "SDLK_AC_EXIT",
            Self::AC_SAVE => "SDLK_AC_SAVE",
            Self::AC_PRINT => "SDLK_AC_PRINT",
            Self::AC_PROPERTIES => "SDLK_AC_PROPERTIES",
            Self::AC_SEARCH => "SDLK_AC_SEARCH",
            Self::AC_HOME => "SDLK_AC_HOME",
            Self::AC_BACK => "SDLK_AC_BACK",
            Self::AC_FORWARD => "SDLK_AC_FORWARD",
            Self::AC_STOP => "SDLK_AC_STOP",
            Self::AC_REFRESH => "SDLK_AC_REFRESH",
            Self::AC_BOOKMARKS => "SDLK_AC_BOOKMARKS",
            Self::SOFTLEFT => "SDLK_SOFTLEFT",
            Self::SOFTRIGHT => "SDLK_SOFTRIGHT",
            Self::CALL => "SDLK_CALL",
            Self::ENDCALL => "SDLK_ENDCALL",
            Self::LEFT_TAB => "SDLK_LEFT_TAB",
            Self::LEVEL5_SHIFT => "SDLK_LEVEL5_SHIFT",
            Self::MULTI_KEY_COMPOSE => "SDLK_MULTI_KEY_COMPOSE",
            Self::LMETA => "SDLK_LMETA",
            Self::RMETA => "SDLK_RMETA",
            Self::LHYPER => "SDLK_LHYPER",
            Self::RHYPER => "SDLK_RHYPER",

            _ => return write!(f, "SDL_Keycode({})", self.0),
        })
    }
}

impl SDL_Keycode {
    pub const EXTENDED_MASK: Self = Self((536870912_u32 as Uint32));
    pub const SCANCODE_MASK: Self = Self((1073741824_u32 as Uint32));
    /// 0
    pub const UNKNOWN: Self = Self((0x00000000 as Uint32));
    /// '\r'
    pub const RETURN: Self = Self((0x0000000d as Uint32));
    /// '\x1B'
    pub const ESCAPE: Self = Self((0x0000001b as Uint32));
    /// '\b'
    pub const BACKSPACE: Self = Self((0x00000008 as Uint32));
    /// '\t'
    pub const TAB: Self = Self((0x00000009 as Uint32));
    /// ' '
    pub const SPACE: Self = Self((0x00000020 as Uint32));
    /// '!'
    pub const EXCLAIM: Self = Self((0x00000021 as Uint32));
    /// '"'
    pub const DBLAPOSTROPHE: Self = Self((0x00000022 as Uint32));
    /// '#'
    pub const HASH: Self = Self((0x00000023 as Uint32));
    /// '$'
    pub const DOLLAR: Self = Self((0x00000024 as Uint32));
    /// '%'
    pub const PERCENT: Self = Self((0x00000025 as Uint32));
    /// '&'
    pub const AMPERSAND: Self = Self((0x00000026 as Uint32));
    /// '\''
    pub const APOSTROPHE: Self = Self((0x00000027 as Uint32));
    /// '('
    pub const LEFTPAREN: Self = Self((0x00000028 as Uint32));
    /// ')'
    pub const RIGHTPAREN: Self = Self((0x00000029 as Uint32));
    /// '*'
    pub const ASTERISK: Self = Self((0x0000002a as Uint32));
    /// '+'
    pub const PLUS: Self = Self((0x0000002b as Uint32));
    /// ','
    pub const COMMA: Self = Self((0x0000002c as Uint32));
    /// '-'
    pub const MINUS: Self = Self((0x0000002d as Uint32));
    /// '.'
    pub const PERIOD: Self = Self((0x0000002e as Uint32));
    /// '/'
    pub const SLASH: Self = Self((0x0000002f as Uint32));
    /// '0'
    pub const _0: Self = Self((0x00000030 as Uint32));
    /// '1'
    pub const _1: Self = Self((0x00000031 as Uint32));
    /// '2'
    pub const _2: Self = Self((0x00000032 as Uint32));
    /// '3'
    pub const _3: Self = Self((0x00000033 as Uint32));
    /// '4'
    pub const _4: Self = Self((0x00000034 as Uint32));
    /// '5'
    pub const _5: Self = Self((0x00000035 as Uint32));
    /// '6'
    pub const _6: Self = Self((0x00000036 as Uint32));
    /// '7'
    pub const _7: Self = Self((0x00000037 as Uint32));
    /// '8'
    pub const _8: Self = Self((0x00000038 as Uint32));
    /// '9'
    pub const _9: Self = Self((0x00000039 as Uint32));
    /// ':'
    pub const COLON: Self = Self((0x0000003a as Uint32));
    /// ';'
    pub const SEMICOLON: Self = Self((0x0000003b as Uint32));
    /// '<'
    pub const LESS: Self = Self((0x0000003c as Uint32));
    /// '='
    pub const EQUALS: Self = Self((0x0000003d as Uint32));
    /// '>'
    pub const GREATER: Self = Self((0x0000003e as Uint32));
    /// '?'
    pub const QUESTION: Self = Self((0x0000003f as Uint32));
    /// '@'
    pub const AT: Self = Self((0x00000040 as Uint32));
    /// '['
    pub const LEFTBRACKET: Self = Self((0x0000005b as Uint32));
    /// '\\'
    pub const BACKSLASH: Self = Self((0x0000005c as Uint32));
    /// ']'
    pub const RIGHTBRACKET: Self = Self((0x0000005d as Uint32));
    /// '^'
    pub const CARET: Self = Self((0x0000005e as Uint32));
    /// '_'
    pub const UNDERSCORE: Self = Self((0x0000005f as Uint32));
    /// '`'
    pub const GRAVE: Self = Self((0x00000060 as Uint32));
    /// 'a'
    pub const A: Self = Self((0x00000061 as Uint32));
    /// 'b'
    pub const B: Self = Self((0x00000062 as Uint32));
    /// 'c'
    pub const C: Self = Self((0x00000063 as Uint32));
    /// 'd'
    pub const D: Self = Self((0x00000064 as Uint32));
    /// 'e'
    pub const E: Self = Self((0x00000065 as Uint32));
    /// 'f'
    pub const F: Self = Self((0x00000066 as Uint32));
    /// 'g'
    pub const G: Self = Self((0x00000067 as Uint32));
    /// 'h'
    pub const H: Self = Self((0x00000068 as Uint32));
    /// 'i'
    pub const I: Self = Self((0x00000069 as Uint32));
    /// 'j'
    pub const J: Self = Self((0x0000006a as Uint32));
    /// 'k'
    pub const K: Self = Self((0x0000006b as Uint32));
    /// 'l'
    pub const L: Self = Self((0x0000006c as Uint32));
    /// 'm'
    pub const M: Self = Self((0x0000006d as Uint32));
    /// 'n'
    pub const N: Self = Self((0x0000006e as Uint32));
    /// 'o'
    pub const O: Self = Self((0x0000006f as Uint32));
    /// 'p'
    pub const P: Self = Self((0x00000070 as Uint32));
    /// 'q'
    pub const Q: Self = Self((0x00000071 as Uint32));
    /// 'r'
    pub const R: Self = Self((0x00000072 as Uint32));
    /// 's'
    pub const S: Self = Self((0x00000073 as Uint32));
    /// 't'
    pub const T: Self = Self((0x00000074 as Uint32));
    /// 'u'
    pub const U: Self = Self((0x00000075 as Uint32));
    /// 'v'
    pub const V: Self = Self((0x00000076 as Uint32));
    /// 'w'
    pub const W: Self = Self((0x00000077 as Uint32));
    /// 'x'
    pub const X: Self = Self((0x00000078 as Uint32));
    /// 'y'
    pub const Y: Self = Self((0x00000079 as Uint32));
    /// 'z'
    pub const Z: Self = Self((0x0000007a as Uint32));
    /// '{'
    pub const LEFTBRACE: Self = Self((0x0000007b as Uint32));
    /// '|'
    pub const PIPE: Self = Self((0x0000007c as Uint32));
    /// '}'
    pub const RIGHTBRACE: Self = Self((0x0000007d as Uint32));
    /// '~'
    pub const TILDE: Self = Self((0x0000007e as Uint32));
    /// '\x7F'
    pub const DELETE: Self = Self((0x0000007f as Uint32));
    /// '\xB1'
    pub const PLUSMINUS: Self = Self((0x000000b1 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CAPSLOCK`])
    pub const CAPSLOCK: Self = Self((0x40000039 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F1`])
    pub const F1: Self = Self((0x4000003a as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F2`])
    pub const F2: Self = Self((0x4000003b as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F3`])
    pub const F3: Self = Self((0x4000003c as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F4`])
    pub const F4: Self = Self((0x4000003d as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F5`])
    pub const F5: Self = Self((0x4000003e as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F6`])
    pub const F6: Self = Self((0x4000003f as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F7`])
    pub const F7: Self = Self((0x40000040 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F8`])
    pub const F8: Self = Self((0x40000041 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F9`])
    pub const F9: Self = Self((0x40000042 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F10`])
    pub const F10: Self = Self((0x40000043 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F11`])
    pub const F11: Self = Self((0x40000044 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F12`])
    pub const F12: Self = Self((0x40000045 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_PRINTSCREEN`])
    pub const PRINTSCREEN: Self = Self((0x40000046 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_SCROLLLOCK`])
    pub const SCROLLLOCK: Self = Self((0x40000047 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_PAUSE`])
    pub const PAUSE: Self = Self((0x40000048 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_INSERT`])
    pub const INSERT: Self = Self((0x40000049 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_HOME`])
    pub const HOME: Self = Self((0x4000004a as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_PAGEUP`])
    pub const PAGEUP: Self = Self((0x4000004b as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_END`])
    pub const END: Self = Self((0x4000004d as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_PAGEDOWN`])
    pub const PAGEDOWN: Self = Self((0x4000004e as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_RIGHT`])
    pub const RIGHT: Self = Self((0x4000004f as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_LEFT`])
    pub const LEFT: Self = Self((0x40000050 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_DOWN`])
    pub const DOWN: Self = Self((0x40000051 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_UP`])
    pub const UP: Self = Self((0x40000052 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_NUMLOCKCLEAR`])
    pub const NUMLOCKCLEAR: Self = Self((0x40000053 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_DIVIDE`])
    pub const KP_DIVIDE: Self = Self((0x40000054 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_MULTIPLY`])
    pub const KP_MULTIPLY: Self = Self((0x40000055 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_MINUS`])
    pub const KP_MINUS: Self = Self((0x40000056 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_PLUS`])
    pub const KP_PLUS: Self = Self((0x40000057 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_ENTER`])
    pub const KP_ENTER: Self = Self((0x40000058 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_1`])
    pub const KP_1: Self = Self((0x40000059 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_2`])
    pub const KP_2: Self = Self((0x4000005a as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_3`])
    pub const KP_3: Self = Self((0x4000005b as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_4`])
    pub const KP_4: Self = Self((0x4000005c as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_5`])
    pub const KP_5: Self = Self((0x4000005d as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_6`])
    pub const KP_6: Self = Self((0x4000005e as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_7`])
    pub const KP_7: Self = Self((0x4000005f as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_8`])
    pub const KP_8: Self = Self((0x40000060 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_9`])
    pub const KP_9: Self = Self((0x40000061 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_0`])
    pub const KP_0: Self = Self((0x40000062 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_PERIOD`])
    pub const KP_PERIOD: Self = Self((0x40000063 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_APPLICATION`])
    pub const APPLICATION: Self = Self((0x40000065 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_POWER`])
    pub const POWER: Self = Self((0x40000066 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_EQUALS`])
    pub const KP_EQUALS: Self = Self((0x40000067 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F13`])
    pub const F13: Self = Self((0x40000068 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F14`])
    pub const F14: Self = Self((0x40000069 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F15`])
    pub const F15: Self = Self((0x4000006a as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F16`])
    pub const F16: Self = Self((0x4000006b as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F17`])
    pub const F17: Self = Self((0x4000006c as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F18`])
    pub const F18: Self = Self((0x4000006d as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F19`])
    pub const F19: Self = Self((0x4000006e as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F20`])
    pub const F20: Self = Self((0x4000006f as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F21`])
    pub const F21: Self = Self((0x40000070 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F22`])
    pub const F22: Self = Self((0x40000071 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F23`])
    pub const F23: Self = Self((0x40000072 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F24`])
    pub const F24: Self = Self((0x40000073 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_EXECUTE`])
    pub const EXECUTE: Self = Self((0x40000074 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_HELP`])
    pub const HELP: Self = Self((0x40000075 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MENU`])
    pub const MENU: Self = Self((0x40000076 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_SELECT`])
    pub const SELECT: Self = Self((0x40000077 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_STOP`])
    pub const STOP: Self = Self((0x40000078 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AGAIN`])
    pub const AGAIN: Self = Self((0x40000079 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_UNDO`])
    pub const UNDO: Self = Self((0x4000007a as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CUT`])
    pub const CUT: Self = Self((0x4000007b as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_COPY`])
    pub const COPY: Self = Self((0x4000007c as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_PASTE`])
    pub const PASTE: Self = Self((0x4000007d as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_FIND`])
    pub const FIND: Self = Self((0x4000007e as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MUTE`])
    pub const MUTE: Self = Self((0x4000007f as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_VOLUMEUP`])
    pub const VOLUMEUP: Self = Self((0x40000080 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_VOLUMEDOWN`])
    pub const VOLUMEDOWN: Self = Self((0x40000081 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_COMMA`])
    pub const KP_COMMA: Self = Self((0x40000085 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_EQUALSAS400`])
    pub const KP_EQUALSAS400: Self = Self((0x40000086 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_ALTERASE`])
    pub const ALTERASE: Self = Self((0x40000099 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_SYSREQ`])
    pub const SYSREQ: Self = Self((0x4000009a as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CANCEL`])
    pub const CANCEL: Self = Self((0x4000009b as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CLEAR`])
    pub const CLEAR: Self = Self((0x4000009c as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_PRIOR`])
    pub const PRIOR: Self = Self((0x4000009d as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_RETURN2`])
    pub const RETURN2: Self = Self((0x4000009e as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_SEPARATOR`])
    pub const SEPARATOR: Self = Self((0x4000009f as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_OUT`])
    pub const OUT: Self = Self((0x400000a0 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_OPER`])
    pub const OPER: Self = Self((0x400000a1 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CLEARAGAIN`])
    pub const CLEARAGAIN: Self = Self((0x400000a2 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CRSEL`])
    pub const CRSEL: Self = Self((0x400000a3 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_EXSEL`])
    pub const EXSEL: Self = Self((0x400000a4 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_00`])
    pub const KP_00: Self = Self((0x400000b0 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_000`])
    pub const KP_000: Self = Self((0x400000b1 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_THOUSANDSSEPARATOR`])
    pub const THOUSANDSSEPARATOR: Self = Self((0x400000b2 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_DECIMALSEPARATOR`])
    pub const DECIMALSEPARATOR: Self = Self((0x400000b3 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CURRENCYUNIT`])
    pub const CURRENCYUNIT: Self = Self((0x400000b4 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CURRENCYSUBUNIT`])
    pub const CURRENCYSUBUNIT: Self = Self((0x400000b5 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_LEFTPAREN`])
    pub const KP_LEFTPAREN: Self = Self((0x400000b6 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_RIGHTPAREN`])
    pub const KP_RIGHTPAREN: Self = Self((0x400000b7 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_LEFTBRACE`])
    pub const KP_LEFTBRACE: Self = Self((0x400000b8 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_RIGHTBRACE`])
    pub const KP_RIGHTBRACE: Self = Self((0x400000b9 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_TAB`])
    pub const KP_TAB: Self = Self((0x400000ba as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_BACKSPACE`])
    pub const KP_BACKSPACE: Self = Self((0x400000bb as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_A`])
    pub const KP_A: Self = Self((0x400000bc as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_B`])
    pub const KP_B: Self = Self((0x400000bd as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_C`])
    pub const KP_C: Self = Self((0x400000be as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_D`])
    pub const KP_D: Self = Self((0x400000bf as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_E`])
    pub const KP_E: Self = Self((0x400000c0 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_F`])
    pub const KP_F: Self = Self((0x400000c1 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_XOR`])
    pub const KP_XOR: Self = Self((0x400000c2 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_POWER`])
    pub const KP_POWER: Self = Self((0x400000c3 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_PERCENT`])
    pub const KP_PERCENT: Self = Self((0x400000c4 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_LESS`])
    pub const KP_LESS: Self = Self((0x400000c5 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_GREATER`])
    pub const KP_GREATER: Self = Self((0x400000c6 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_AMPERSAND`])
    pub const KP_AMPERSAND: Self = Self((0x400000c7 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_DBLAMPERSAND`])
    pub const KP_DBLAMPERSAND: Self = Self((0x400000c8 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_VERTICALBAR`])
    pub const KP_VERTICALBAR: Self = Self((0x400000c9 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_DBLVERTICALBAR`])
    pub const KP_DBLVERTICALBAR: Self = Self((0x400000ca as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_COLON`])
    pub const KP_COLON: Self = Self((0x400000cb as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_HASH`])
    pub const KP_HASH: Self = Self((0x400000cc as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_SPACE`])
    pub const KP_SPACE: Self = Self((0x400000cd as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_AT`])
    pub const KP_AT: Self = Self((0x400000ce as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_EXCLAM`])
    pub const KP_EXCLAM: Self = Self((0x400000cf as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_MEMSTORE`])
    pub const KP_MEMSTORE: Self = Self((0x400000d0 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_MEMRECALL`])
    pub const KP_MEMRECALL: Self = Self((0x400000d1 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_MEMCLEAR`])
    pub const KP_MEMCLEAR: Self = Self((0x400000d2 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_MEMADD`])
    pub const KP_MEMADD: Self = Self((0x400000d3 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_MEMSUBTRACT`])
    pub const KP_MEMSUBTRACT: Self = Self((0x400000d4 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_MEMMULTIPLY`])
    pub const KP_MEMMULTIPLY: Self = Self((0x400000d5 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_MEMDIVIDE`])
    pub const KP_MEMDIVIDE: Self = Self((0x400000d6 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_PLUSMINUS`])
    pub const KP_PLUSMINUS: Self = Self((0x400000d7 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_CLEAR`])
    pub const KP_CLEAR: Self = Self((0x400000d8 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_CLEARENTRY`])
    pub const KP_CLEARENTRY: Self = Self((0x400000d9 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_BINARY`])
    pub const KP_BINARY: Self = Self((0x400000da as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_OCTAL`])
    pub const KP_OCTAL: Self = Self((0x400000db as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_DECIMAL`])
    pub const KP_DECIMAL: Self = Self((0x400000dc as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_HEXADECIMAL`])
    pub const KP_HEXADECIMAL: Self = Self((0x400000dd as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_LCTRL`])
    pub const LCTRL: Self = Self((0x400000e0 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_LSHIFT`])
    pub const LSHIFT: Self = Self((0x400000e1 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_LALT`])
    pub const LALT: Self = Self((0x400000e2 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_LGUI`])
    pub const LGUI: Self = Self((0x400000e3 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_RCTRL`])
    pub const RCTRL: Self = Self((0x400000e4 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_RSHIFT`])
    pub const RSHIFT: Self = Self((0x400000e5 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_RALT`])
    pub const RALT: Self = Self((0x400000e6 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_RGUI`])
    pub const RGUI: Self = Self((0x400000e7 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MODE`])
    pub const MODE: Self = Self((0x40000101 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_SLEEP`])
    pub const SLEEP: Self = Self((0x40000102 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_WAKE`])
    pub const WAKE: Self = Self((0x40000103 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CHANNEL_INCREMENT`])
    pub const CHANNEL_INCREMENT: Self = Self((0x40000104 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CHANNEL_DECREMENT`])
    pub const CHANNEL_DECREMENT: Self = Self((0x40000105 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_PLAY`])
    pub const MEDIA_PLAY: Self = Self((0x40000106 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_PAUSE`])
    pub const MEDIA_PAUSE: Self = Self((0x40000107 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_RECORD`])
    pub const MEDIA_RECORD: Self = Self((0x40000108 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_FAST_FORWARD`])
    pub const MEDIA_FAST_FORWARD: Self = Self((0x40000109 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_REWIND`])
    pub const MEDIA_REWIND: Self = Self((0x4000010a as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_NEXT_TRACK`])
    pub const MEDIA_NEXT_TRACK: Self = Self((0x4000010b as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_PREVIOUS_TRACK`])
    pub const MEDIA_PREVIOUS_TRACK: Self = Self((0x4000010c as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_STOP`])
    pub const MEDIA_STOP: Self = Self((0x4000010d as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_EJECT`])
    pub const MEDIA_EJECT: Self = Self((0x4000010e as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_PLAY_PAUSE`])
    pub const MEDIA_PLAY_PAUSE: Self = Self((0x4000010f as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_SELECT`])
    pub const MEDIA_SELECT: Self = Self((0x40000110 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_NEW`])
    pub const AC_NEW: Self = Self((0x40000111 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_OPEN`])
    pub const AC_OPEN: Self = Self((0x40000112 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_CLOSE`])
    pub const AC_CLOSE: Self = Self((0x40000113 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_EXIT`])
    pub const AC_EXIT: Self = Self((0x40000114 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_SAVE`])
    pub const AC_SAVE: Self = Self((0x40000115 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_PRINT`])
    pub const AC_PRINT: Self = Self((0x40000116 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_PROPERTIES`])
    pub const AC_PROPERTIES: Self = Self((0x40000117 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_SEARCH`])
    pub const AC_SEARCH: Self = Self((0x40000118 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_HOME`])
    pub const AC_HOME: Self = Self((0x40000119 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_BACK`])
    pub const AC_BACK: Self = Self((0x4000011a as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_FORWARD`])
    pub const AC_FORWARD: Self = Self((0x4000011b as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_STOP`])
    pub const AC_STOP: Self = Self((0x4000011c as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_REFRESH`])
    pub const AC_REFRESH: Self = Self((0x4000011d as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_BOOKMARKS`])
    pub const AC_BOOKMARKS: Self = Self((0x4000011e as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_SOFTLEFT`])
    pub const SOFTLEFT: Self = Self((0x4000011f as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_SOFTRIGHT`])
    pub const SOFTRIGHT: Self = Self((0x40000120 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CALL`])
    pub const CALL: Self = Self((0x40000121 as Uint32));
    /// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_ENDCALL`])
    pub const ENDCALL: Self = Self((0x40000122 as Uint32));
    /// Extended key Left Tab
    pub const LEFT_TAB: Self = Self((0x20000001 as Uint32));
    /// Extended key Level 5 Shift
    pub const LEVEL5_SHIFT: Self = Self((0x20000002 as Uint32));
    /// Extended key Multi-key Compose
    pub const MULTI_KEY_COMPOSE: Self = Self((0x20000003 as Uint32));
    /// Extended key Left Meta
    pub const LMETA: Self = Self((0x20000004 as Uint32));
    /// Extended key Right Meta
    pub const RMETA: Self = Self((0x20000005 as Uint32));
    /// Extended key Left Hyper
    pub const LHYPER: Self = Self((0x20000006 as Uint32));
    /// Extended key Right Hyper
    pub const RHYPER: Self = Self((0x20000007 as Uint32));
}

pub const SDLK_EXTENDED_MASK: SDL_Keycode = SDL_Keycode::EXTENDED_MASK;
pub const SDLK_SCANCODE_MASK: SDL_Keycode = SDL_Keycode::SCANCODE_MASK;
/// 0
pub const SDLK_UNKNOWN: SDL_Keycode = SDL_Keycode::UNKNOWN;
/// '\r'
pub const SDLK_RETURN: SDL_Keycode = SDL_Keycode::RETURN;
/// '\x1B'
pub const SDLK_ESCAPE: SDL_Keycode = SDL_Keycode::ESCAPE;
/// '\b'
pub const SDLK_BACKSPACE: SDL_Keycode = SDL_Keycode::BACKSPACE;
/// '\t'
pub const SDLK_TAB: SDL_Keycode = SDL_Keycode::TAB;
/// ' '
pub const SDLK_SPACE: SDL_Keycode = SDL_Keycode::SPACE;
/// '!'
pub const SDLK_EXCLAIM: SDL_Keycode = SDL_Keycode::EXCLAIM;
/// '"'
pub const SDLK_DBLAPOSTROPHE: SDL_Keycode = SDL_Keycode::DBLAPOSTROPHE;
/// '#'
pub const SDLK_HASH: SDL_Keycode = SDL_Keycode::HASH;
/// '$'
pub const SDLK_DOLLAR: SDL_Keycode = SDL_Keycode::DOLLAR;
/// '%'
pub const SDLK_PERCENT: SDL_Keycode = SDL_Keycode::PERCENT;
/// '&'
pub const SDLK_AMPERSAND: SDL_Keycode = SDL_Keycode::AMPERSAND;
/// '\''
pub const SDLK_APOSTROPHE: SDL_Keycode = SDL_Keycode::APOSTROPHE;
/// '('
pub const SDLK_LEFTPAREN: SDL_Keycode = SDL_Keycode::LEFTPAREN;
/// ')'
pub const SDLK_RIGHTPAREN: SDL_Keycode = SDL_Keycode::RIGHTPAREN;
/// '*'
pub const SDLK_ASTERISK: SDL_Keycode = SDL_Keycode::ASTERISK;
/// '+'
pub const SDLK_PLUS: SDL_Keycode = SDL_Keycode::PLUS;
/// ','
pub const SDLK_COMMA: SDL_Keycode = SDL_Keycode::COMMA;
/// '-'
pub const SDLK_MINUS: SDL_Keycode = SDL_Keycode::MINUS;
/// '.'
pub const SDLK_PERIOD: SDL_Keycode = SDL_Keycode::PERIOD;
/// '/'
pub const SDLK_SLASH: SDL_Keycode = SDL_Keycode::SLASH;
/// '0'
pub const SDLK_0: SDL_Keycode = SDL_Keycode::_0;
/// '1'
pub const SDLK_1: SDL_Keycode = SDL_Keycode::_1;
/// '2'
pub const SDLK_2: SDL_Keycode = SDL_Keycode::_2;
/// '3'
pub const SDLK_3: SDL_Keycode = SDL_Keycode::_3;
/// '4'
pub const SDLK_4: SDL_Keycode = SDL_Keycode::_4;
/// '5'
pub const SDLK_5: SDL_Keycode = SDL_Keycode::_5;
/// '6'
pub const SDLK_6: SDL_Keycode = SDL_Keycode::_6;
/// '7'
pub const SDLK_7: SDL_Keycode = SDL_Keycode::_7;
/// '8'
pub const SDLK_8: SDL_Keycode = SDL_Keycode::_8;
/// '9'
pub const SDLK_9: SDL_Keycode = SDL_Keycode::_9;
/// ':'
pub const SDLK_COLON: SDL_Keycode = SDL_Keycode::COLON;
/// ';'
pub const SDLK_SEMICOLON: SDL_Keycode = SDL_Keycode::SEMICOLON;
/// '<'
pub const SDLK_LESS: SDL_Keycode = SDL_Keycode::LESS;
/// '='
pub const SDLK_EQUALS: SDL_Keycode = SDL_Keycode::EQUALS;
/// '>'
pub const SDLK_GREATER: SDL_Keycode = SDL_Keycode::GREATER;
/// '?'
pub const SDLK_QUESTION: SDL_Keycode = SDL_Keycode::QUESTION;
/// '@'
pub const SDLK_AT: SDL_Keycode = SDL_Keycode::AT;
/// '['
pub const SDLK_LEFTBRACKET: SDL_Keycode = SDL_Keycode::LEFTBRACKET;
/// '\\'
pub const SDLK_BACKSLASH: SDL_Keycode = SDL_Keycode::BACKSLASH;
/// ']'
pub const SDLK_RIGHTBRACKET: SDL_Keycode = SDL_Keycode::RIGHTBRACKET;
/// '^'
pub const SDLK_CARET: SDL_Keycode = SDL_Keycode::CARET;
/// '_'
pub const SDLK_UNDERSCORE: SDL_Keycode = SDL_Keycode::UNDERSCORE;
/// '`'
pub const SDLK_GRAVE: SDL_Keycode = SDL_Keycode::GRAVE;
/// 'a'
pub const SDLK_A: SDL_Keycode = SDL_Keycode::A;
/// 'b'
pub const SDLK_B: SDL_Keycode = SDL_Keycode::B;
/// 'c'
pub const SDLK_C: SDL_Keycode = SDL_Keycode::C;
/// 'd'
pub const SDLK_D: SDL_Keycode = SDL_Keycode::D;
/// 'e'
pub const SDLK_E: SDL_Keycode = SDL_Keycode::E;
/// 'f'
pub const SDLK_F: SDL_Keycode = SDL_Keycode::F;
/// 'g'
pub const SDLK_G: SDL_Keycode = SDL_Keycode::G;
/// 'h'
pub const SDLK_H: SDL_Keycode = SDL_Keycode::H;
/// 'i'
pub const SDLK_I: SDL_Keycode = SDL_Keycode::I;
/// 'j'
pub const SDLK_J: SDL_Keycode = SDL_Keycode::J;
/// 'k'
pub const SDLK_K: SDL_Keycode = SDL_Keycode::K;
/// 'l'
pub const SDLK_L: SDL_Keycode = SDL_Keycode::L;
/// 'm'
pub const SDLK_M: SDL_Keycode = SDL_Keycode::M;
/// 'n'
pub const SDLK_N: SDL_Keycode = SDL_Keycode::N;
/// 'o'
pub const SDLK_O: SDL_Keycode = SDL_Keycode::O;
/// 'p'
pub const SDLK_P: SDL_Keycode = SDL_Keycode::P;
/// 'q'
pub const SDLK_Q: SDL_Keycode = SDL_Keycode::Q;
/// 'r'
pub const SDLK_R: SDL_Keycode = SDL_Keycode::R;
/// 's'
pub const SDLK_S: SDL_Keycode = SDL_Keycode::S;
/// 't'
pub const SDLK_T: SDL_Keycode = SDL_Keycode::T;
/// 'u'
pub const SDLK_U: SDL_Keycode = SDL_Keycode::U;
/// 'v'
pub const SDLK_V: SDL_Keycode = SDL_Keycode::V;
/// 'w'
pub const SDLK_W: SDL_Keycode = SDL_Keycode::W;
/// 'x'
pub const SDLK_X: SDL_Keycode = SDL_Keycode::X;
/// 'y'
pub const SDLK_Y: SDL_Keycode = SDL_Keycode::Y;
/// 'z'
pub const SDLK_Z: SDL_Keycode = SDL_Keycode::Z;
/// '{'
pub const SDLK_LEFTBRACE: SDL_Keycode = SDL_Keycode::LEFTBRACE;
/// '|'
pub const SDLK_PIPE: SDL_Keycode = SDL_Keycode::PIPE;
/// '}'
pub const SDLK_RIGHTBRACE: SDL_Keycode = SDL_Keycode::RIGHTBRACE;
/// '~'
pub const SDLK_TILDE: SDL_Keycode = SDL_Keycode::TILDE;
/// '\x7F'
pub const SDLK_DELETE: SDL_Keycode = SDL_Keycode::DELETE;
/// '\xB1'
pub const SDLK_PLUSMINUS: SDL_Keycode = SDL_Keycode::PLUSMINUS;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CAPSLOCK`])
pub const SDLK_CAPSLOCK: SDL_Keycode = SDL_Keycode::CAPSLOCK;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F1`])
pub const SDLK_F1: SDL_Keycode = SDL_Keycode::F1;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F2`])
pub const SDLK_F2: SDL_Keycode = SDL_Keycode::F2;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F3`])
pub const SDLK_F3: SDL_Keycode = SDL_Keycode::F3;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F4`])
pub const SDLK_F4: SDL_Keycode = SDL_Keycode::F4;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F5`])
pub const SDLK_F5: SDL_Keycode = SDL_Keycode::F5;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F6`])
pub const SDLK_F6: SDL_Keycode = SDL_Keycode::F6;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F7`])
pub const SDLK_F7: SDL_Keycode = SDL_Keycode::F7;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F8`])
pub const SDLK_F8: SDL_Keycode = SDL_Keycode::F8;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F9`])
pub const SDLK_F9: SDL_Keycode = SDL_Keycode::F9;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F10`])
pub const SDLK_F10: SDL_Keycode = SDL_Keycode::F10;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F11`])
pub const SDLK_F11: SDL_Keycode = SDL_Keycode::F11;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F12`])
pub const SDLK_F12: SDL_Keycode = SDL_Keycode::F12;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_PRINTSCREEN`])
pub const SDLK_PRINTSCREEN: SDL_Keycode = SDL_Keycode::PRINTSCREEN;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_SCROLLLOCK`])
pub const SDLK_SCROLLLOCK: SDL_Keycode = SDL_Keycode::SCROLLLOCK;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_PAUSE`])
pub const SDLK_PAUSE: SDL_Keycode = SDL_Keycode::PAUSE;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_INSERT`])
pub const SDLK_INSERT: SDL_Keycode = SDL_Keycode::INSERT;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_HOME`])
pub const SDLK_HOME: SDL_Keycode = SDL_Keycode::HOME;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_PAGEUP`])
pub const SDLK_PAGEUP: SDL_Keycode = SDL_Keycode::PAGEUP;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_END`])
pub const SDLK_END: SDL_Keycode = SDL_Keycode::END;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_PAGEDOWN`])
pub const SDLK_PAGEDOWN: SDL_Keycode = SDL_Keycode::PAGEDOWN;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_RIGHT`])
pub const SDLK_RIGHT: SDL_Keycode = SDL_Keycode::RIGHT;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_LEFT`])
pub const SDLK_LEFT: SDL_Keycode = SDL_Keycode::LEFT;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_DOWN`])
pub const SDLK_DOWN: SDL_Keycode = SDL_Keycode::DOWN;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_UP`])
pub const SDLK_UP: SDL_Keycode = SDL_Keycode::UP;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_NUMLOCKCLEAR`])
pub const SDLK_NUMLOCKCLEAR: SDL_Keycode = SDL_Keycode::NUMLOCKCLEAR;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_DIVIDE`])
pub const SDLK_KP_DIVIDE: SDL_Keycode = SDL_Keycode::KP_DIVIDE;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_MULTIPLY`])
pub const SDLK_KP_MULTIPLY: SDL_Keycode = SDL_Keycode::KP_MULTIPLY;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_MINUS`])
pub const SDLK_KP_MINUS: SDL_Keycode = SDL_Keycode::KP_MINUS;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_PLUS`])
pub const SDLK_KP_PLUS: SDL_Keycode = SDL_Keycode::KP_PLUS;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_ENTER`])
pub const SDLK_KP_ENTER: SDL_Keycode = SDL_Keycode::KP_ENTER;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_1`])
pub const SDLK_KP_1: SDL_Keycode = SDL_Keycode::KP_1;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_2`])
pub const SDLK_KP_2: SDL_Keycode = SDL_Keycode::KP_2;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_3`])
pub const SDLK_KP_3: SDL_Keycode = SDL_Keycode::KP_3;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_4`])
pub const SDLK_KP_4: SDL_Keycode = SDL_Keycode::KP_4;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_5`])
pub const SDLK_KP_5: SDL_Keycode = SDL_Keycode::KP_5;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_6`])
pub const SDLK_KP_6: SDL_Keycode = SDL_Keycode::KP_6;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_7`])
pub const SDLK_KP_7: SDL_Keycode = SDL_Keycode::KP_7;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_8`])
pub const SDLK_KP_8: SDL_Keycode = SDL_Keycode::KP_8;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_9`])
pub const SDLK_KP_9: SDL_Keycode = SDL_Keycode::KP_9;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_0`])
pub const SDLK_KP_0: SDL_Keycode = SDL_Keycode::KP_0;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_PERIOD`])
pub const SDLK_KP_PERIOD: SDL_Keycode = SDL_Keycode::KP_PERIOD;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_APPLICATION`])
pub const SDLK_APPLICATION: SDL_Keycode = SDL_Keycode::APPLICATION;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_POWER`])
pub const SDLK_POWER: SDL_Keycode = SDL_Keycode::POWER;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_EQUALS`])
pub const SDLK_KP_EQUALS: SDL_Keycode = SDL_Keycode::KP_EQUALS;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F13`])
pub const SDLK_F13: SDL_Keycode = SDL_Keycode::F13;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F14`])
pub const SDLK_F14: SDL_Keycode = SDL_Keycode::F14;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F15`])
pub const SDLK_F15: SDL_Keycode = SDL_Keycode::F15;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F16`])
pub const SDLK_F16: SDL_Keycode = SDL_Keycode::F16;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F17`])
pub const SDLK_F17: SDL_Keycode = SDL_Keycode::F17;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F18`])
pub const SDLK_F18: SDL_Keycode = SDL_Keycode::F18;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F19`])
pub const SDLK_F19: SDL_Keycode = SDL_Keycode::F19;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F20`])
pub const SDLK_F20: SDL_Keycode = SDL_Keycode::F20;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F21`])
pub const SDLK_F21: SDL_Keycode = SDL_Keycode::F21;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F22`])
pub const SDLK_F22: SDL_Keycode = SDL_Keycode::F22;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F23`])
pub const SDLK_F23: SDL_Keycode = SDL_Keycode::F23;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F24`])
pub const SDLK_F24: SDL_Keycode = SDL_Keycode::F24;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_EXECUTE`])
pub const SDLK_EXECUTE: SDL_Keycode = SDL_Keycode::EXECUTE;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_HELP`])
pub const SDLK_HELP: SDL_Keycode = SDL_Keycode::HELP;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MENU`])
pub const SDLK_MENU: SDL_Keycode = SDL_Keycode::MENU;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_SELECT`])
pub const SDLK_SELECT: SDL_Keycode = SDL_Keycode::SELECT;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_STOP`])
pub const SDLK_STOP: SDL_Keycode = SDL_Keycode::STOP;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AGAIN`])
pub const SDLK_AGAIN: SDL_Keycode = SDL_Keycode::AGAIN;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_UNDO`])
pub const SDLK_UNDO: SDL_Keycode = SDL_Keycode::UNDO;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CUT`])
pub const SDLK_CUT: SDL_Keycode = SDL_Keycode::CUT;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_COPY`])
pub const SDLK_COPY: SDL_Keycode = SDL_Keycode::COPY;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_PASTE`])
pub const SDLK_PASTE: SDL_Keycode = SDL_Keycode::PASTE;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_FIND`])
pub const SDLK_FIND: SDL_Keycode = SDL_Keycode::FIND;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MUTE`])
pub const SDLK_MUTE: SDL_Keycode = SDL_Keycode::MUTE;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_VOLUMEUP`])
pub const SDLK_VOLUMEUP: SDL_Keycode = SDL_Keycode::VOLUMEUP;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_VOLUMEDOWN`])
pub const SDLK_VOLUMEDOWN: SDL_Keycode = SDL_Keycode::VOLUMEDOWN;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_COMMA`])
pub const SDLK_KP_COMMA: SDL_Keycode = SDL_Keycode::KP_COMMA;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_EQUALSAS400`])
pub const SDLK_KP_EQUALSAS400: SDL_Keycode = SDL_Keycode::KP_EQUALSAS400;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_ALTERASE`])
pub const SDLK_ALTERASE: SDL_Keycode = SDL_Keycode::ALTERASE;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_SYSREQ`])
pub const SDLK_SYSREQ: SDL_Keycode = SDL_Keycode::SYSREQ;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CANCEL`])
pub const SDLK_CANCEL: SDL_Keycode = SDL_Keycode::CANCEL;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CLEAR`])
pub const SDLK_CLEAR: SDL_Keycode = SDL_Keycode::CLEAR;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_PRIOR`])
pub const SDLK_PRIOR: SDL_Keycode = SDL_Keycode::PRIOR;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_RETURN2`])
pub const SDLK_RETURN2: SDL_Keycode = SDL_Keycode::RETURN2;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_SEPARATOR`])
pub const SDLK_SEPARATOR: SDL_Keycode = SDL_Keycode::SEPARATOR;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_OUT`])
pub const SDLK_OUT: SDL_Keycode = SDL_Keycode::OUT;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_OPER`])
pub const SDLK_OPER: SDL_Keycode = SDL_Keycode::OPER;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CLEARAGAIN`])
pub const SDLK_CLEARAGAIN: SDL_Keycode = SDL_Keycode::CLEARAGAIN;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CRSEL`])
pub const SDLK_CRSEL: SDL_Keycode = SDL_Keycode::CRSEL;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_EXSEL`])
pub const SDLK_EXSEL: SDL_Keycode = SDL_Keycode::EXSEL;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_00`])
pub const SDLK_KP_00: SDL_Keycode = SDL_Keycode::KP_00;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_000`])
pub const SDLK_KP_000: SDL_Keycode = SDL_Keycode::KP_000;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_THOUSANDSSEPARATOR`])
pub const SDLK_THOUSANDSSEPARATOR: SDL_Keycode = SDL_Keycode::THOUSANDSSEPARATOR;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_DECIMALSEPARATOR`])
pub const SDLK_DECIMALSEPARATOR: SDL_Keycode = SDL_Keycode::DECIMALSEPARATOR;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CURRENCYUNIT`])
pub const SDLK_CURRENCYUNIT: SDL_Keycode = SDL_Keycode::CURRENCYUNIT;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CURRENCYSUBUNIT`])
pub const SDLK_CURRENCYSUBUNIT: SDL_Keycode = SDL_Keycode::CURRENCYSUBUNIT;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_LEFTPAREN`])
pub const SDLK_KP_LEFTPAREN: SDL_Keycode = SDL_Keycode::KP_LEFTPAREN;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_RIGHTPAREN`])
pub const SDLK_KP_RIGHTPAREN: SDL_Keycode = SDL_Keycode::KP_RIGHTPAREN;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_LEFTBRACE`])
pub const SDLK_KP_LEFTBRACE: SDL_Keycode = SDL_Keycode::KP_LEFTBRACE;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_RIGHTBRACE`])
pub const SDLK_KP_RIGHTBRACE: SDL_Keycode = SDL_Keycode::KP_RIGHTBRACE;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_TAB`])
pub const SDLK_KP_TAB: SDL_Keycode = SDL_Keycode::KP_TAB;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_BACKSPACE`])
pub const SDLK_KP_BACKSPACE: SDL_Keycode = SDL_Keycode::KP_BACKSPACE;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_A`])
pub const SDLK_KP_A: SDL_Keycode = SDL_Keycode::KP_A;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_B`])
pub const SDLK_KP_B: SDL_Keycode = SDL_Keycode::KP_B;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_C`])
pub const SDLK_KP_C: SDL_Keycode = SDL_Keycode::KP_C;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_D`])
pub const SDLK_KP_D: SDL_Keycode = SDL_Keycode::KP_D;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_E`])
pub const SDLK_KP_E: SDL_Keycode = SDL_Keycode::KP_E;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_F`])
pub const SDLK_KP_F: SDL_Keycode = SDL_Keycode::KP_F;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_XOR`])
pub const SDLK_KP_XOR: SDL_Keycode = SDL_Keycode::KP_XOR;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_POWER`])
pub const SDLK_KP_POWER: SDL_Keycode = SDL_Keycode::KP_POWER;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_PERCENT`])
pub const SDLK_KP_PERCENT: SDL_Keycode = SDL_Keycode::KP_PERCENT;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_LESS`])
pub const SDLK_KP_LESS: SDL_Keycode = SDL_Keycode::KP_LESS;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_GREATER`])
pub const SDLK_KP_GREATER: SDL_Keycode = SDL_Keycode::KP_GREATER;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_AMPERSAND`])
pub const SDLK_KP_AMPERSAND: SDL_Keycode = SDL_Keycode::KP_AMPERSAND;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_DBLAMPERSAND`])
pub const SDLK_KP_DBLAMPERSAND: SDL_Keycode = SDL_Keycode::KP_DBLAMPERSAND;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_VERTICALBAR`])
pub const SDLK_KP_VERTICALBAR: SDL_Keycode = SDL_Keycode::KP_VERTICALBAR;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_DBLVERTICALBAR`])
pub const SDLK_KP_DBLVERTICALBAR: SDL_Keycode = SDL_Keycode::KP_DBLVERTICALBAR;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_COLON`])
pub const SDLK_KP_COLON: SDL_Keycode = SDL_Keycode::KP_COLON;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_HASH`])
pub const SDLK_KP_HASH: SDL_Keycode = SDL_Keycode::KP_HASH;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_SPACE`])
pub const SDLK_KP_SPACE: SDL_Keycode = SDL_Keycode::KP_SPACE;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_AT`])
pub const SDLK_KP_AT: SDL_Keycode = SDL_Keycode::KP_AT;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_EXCLAM`])
pub const SDLK_KP_EXCLAM: SDL_Keycode = SDL_Keycode::KP_EXCLAM;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_MEMSTORE`])
pub const SDLK_KP_MEMSTORE: SDL_Keycode = SDL_Keycode::KP_MEMSTORE;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_MEMRECALL`])
pub const SDLK_KP_MEMRECALL: SDL_Keycode = SDL_Keycode::KP_MEMRECALL;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_MEMCLEAR`])
pub const SDLK_KP_MEMCLEAR: SDL_Keycode = SDL_Keycode::KP_MEMCLEAR;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_MEMADD`])
pub const SDLK_KP_MEMADD: SDL_Keycode = SDL_Keycode::KP_MEMADD;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_MEMSUBTRACT`])
pub const SDLK_KP_MEMSUBTRACT: SDL_Keycode = SDL_Keycode::KP_MEMSUBTRACT;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_MEMMULTIPLY`])
pub const SDLK_KP_MEMMULTIPLY: SDL_Keycode = SDL_Keycode::KP_MEMMULTIPLY;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_MEMDIVIDE`])
pub const SDLK_KP_MEMDIVIDE: SDL_Keycode = SDL_Keycode::KP_MEMDIVIDE;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_PLUSMINUS`])
pub const SDLK_KP_PLUSMINUS: SDL_Keycode = SDL_Keycode::KP_PLUSMINUS;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_CLEAR`])
pub const SDLK_KP_CLEAR: SDL_Keycode = SDL_Keycode::KP_CLEAR;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_CLEARENTRY`])
pub const SDLK_KP_CLEARENTRY: SDL_Keycode = SDL_Keycode::KP_CLEARENTRY;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_BINARY`])
pub const SDLK_KP_BINARY: SDL_Keycode = SDL_Keycode::KP_BINARY;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_OCTAL`])
pub const SDLK_KP_OCTAL: SDL_Keycode = SDL_Keycode::KP_OCTAL;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_DECIMAL`])
pub const SDLK_KP_DECIMAL: SDL_Keycode = SDL_Keycode::KP_DECIMAL;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_HEXADECIMAL`])
pub const SDLK_KP_HEXADECIMAL: SDL_Keycode = SDL_Keycode::KP_HEXADECIMAL;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_LCTRL`])
pub const SDLK_LCTRL: SDL_Keycode = SDL_Keycode::LCTRL;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_LSHIFT`])
pub const SDLK_LSHIFT: SDL_Keycode = SDL_Keycode::LSHIFT;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_LALT`])
pub const SDLK_LALT: SDL_Keycode = SDL_Keycode::LALT;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_LGUI`])
pub const SDLK_LGUI: SDL_Keycode = SDL_Keycode::LGUI;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_RCTRL`])
pub const SDLK_RCTRL: SDL_Keycode = SDL_Keycode::RCTRL;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_RSHIFT`])
pub const SDLK_RSHIFT: SDL_Keycode = SDL_Keycode::RSHIFT;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_RALT`])
pub const SDLK_RALT: SDL_Keycode = SDL_Keycode::RALT;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_RGUI`])
pub const SDLK_RGUI: SDL_Keycode = SDL_Keycode::RGUI;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MODE`])
pub const SDLK_MODE: SDL_Keycode = SDL_Keycode::MODE;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_SLEEP`])
pub const SDLK_SLEEP: SDL_Keycode = SDL_Keycode::SLEEP;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_WAKE`])
pub const SDLK_WAKE: SDL_Keycode = SDL_Keycode::WAKE;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CHANNEL_INCREMENT`])
pub const SDLK_CHANNEL_INCREMENT: SDL_Keycode = SDL_Keycode::CHANNEL_INCREMENT;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CHANNEL_DECREMENT`])
pub const SDLK_CHANNEL_DECREMENT: SDL_Keycode = SDL_Keycode::CHANNEL_DECREMENT;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_PLAY`])
pub const SDLK_MEDIA_PLAY: SDL_Keycode = SDL_Keycode::MEDIA_PLAY;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_PAUSE`])
pub const SDLK_MEDIA_PAUSE: SDL_Keycode = SDL_Keycode::MEDIA_PAUSE;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_RECORD`])
pub const SDLK_MEDIA_RECORD: SDL_Keycode = SDL_Keycode::MEDIA_RECORD;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_FAST_FORWARD`])
pub const SDLK_MEDIA_FAST_FORWARD: SDL_Keycode = SDL_Keycode::MEDIA_FAST_FORWARD;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_REWIND`])
pub const SDLK_MEDIA_REWIND: SDL_Keycode = SDL_Keycode::MEDIA_REWIND;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_NEXT_TRACK`])
pub const SDLK_MEDIA_NEXT_TRACK: SDL_Keycode = SDL_Keycode::MEDIA_NEXT_TRACK;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_PREVIOUS_TRACK`])
pub const SDLK_MEDIA_PREVIOUS_TRACK: SDL_Keycode = SDL_Keycode::MEDIA_PREVIOUS_TRACK;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_STOP`])
pub const SDLK_MEDIA_STOP: SDL_Keycode = SDL_Keycode::MEDIA_STOP;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_EJECT`])
pub const SDLK_MEDIA_EJECT: SDL_Keycode = SDL_Keycode::MEDIA_EJECT;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_PLAY_PAUSE`])
pub const SDLK_MEDIA_PLAY_PAUSE: SDL_Keycode = SDL_Keycode::MEDIA_PLAY_PAUSE;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_SELECT`])
pub const SDLK_MEDIA_SELECT: SDL_Keycode = SDL_Keycode::MEDIA_SELECT;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_NEW`])
pub const SDLK_AC_NEW: SDL_Keycode = SDL_Keycode::AC_NEW;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_OPEN`])
pub const SDLK_AC_OPEN: SDL_Keycode = SDL_Keycode::AC_OPEN;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_CLOSE`])
pub const SDLK_AC_CLOSE: SDL_Keycode = SDL_Keycode::AC_CLOSE;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_EXIT`])
pub const SDLK_AC_EXIT: SDL_Keycode = SDL_Keycode::AC_EXIT;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_SAVE`])
pub const SDLK_AC_SAVE: SDL_Keycode = SDL_Keycode::AC_SAVE;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_PRINT`])
pub const SDLK_AC_PRINT: SDL_Keycode = SDL_Keycode::AC_PRINT;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_PROPERTIES`])
pub const SDLK_AC_PROPERTIES: SDL_Keycode = SDL_Keycode::AC_PROPERTIES;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_SEARCH`])
pub const SDLK_AC_SEARCH: SDL_Keycode = SDL_Keycode::AC_SEARCH;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_HOME`])
pub const SDLK_AC_HOME: SDL_Keycode = SDL_Keycode::AC_HOME;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_BACK`])
pub const SDLK_AC_BACK: SDL_Keycode = SDL_Keycode::AC_BACK;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_FORWARD`])
pub const SDLK_AC_FORWARD: SDL_Keycode = SDL_Keycode::AC_FORWARD;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_STOP`])
pub const SDLK_AC_STOP: SDL_Keycode = SDL_Keycode::AC_STOP;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_REFRESH`])
pub const SDLK_AC_REFRESH: SDL_Keycode = SDL_Keycode::AC_REFRESH;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_BOOKMARKS`])
pub const SDLK_AC_BOOKMARKS: SDL_Keycode = SDL_Keycode::AC_BOOKMARKS;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_SOFTLEFT`])
pub const SDLK_SOFTLEFT: SDL_Keycode = SDL_Keycode::SOFTLEFT;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_SOFTRIGHT`])
pub const SDLK_SOFTRIGHT: SDL_Keycode = SDL_Keycode::SOFTRIGHT;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CALL`])
pub const SDLK_CALL: SDL_Keycode = SDL_Keycode::CALL;
/// SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_ENDCALL`])
pub const SDLK_ENDCALL: SDL_Keycode = SDL_Keycode::ENDCALL;
/// Extended key Left Tab
pub const SDLK_LEFT_TAB: SDL_Keycode = SDL_Keycode::LEFT_TAB;
/// Extended key Level 5 Shift
pub const SDLK_LEVEL5_SHIFT: SDL_Keycode = SDL_Keycode::LEVEL5_SHIFT;
/// Extended key Multi-key Compose
pub const SDLK_MULTI_KEY_COMPOSE: SDL_Keycode = SDL_Keycode::MULTI_KEY_COMPOSE;
/// Extended key Left Meta
pub const SDLK_LMETA: SDL_Keycode = SDL_Keycode::LMETA;
/// Extended key Right Meta
pub const SDLK_RMETA: SDL_Keycode = SDL_Keycode::RMETA;
/// Extended key Left Hyper
pub const SDLK_LHYPER: SDL_Keycode = SDL_Keycode::LHYPER;
/// Extended key Right Hyper
pub const SDLK_RHYPER: SDL_Keycode = SDL_Keycode::RHYPER;

#[cfg(feature = "metadata")]
impl sdl3_sys::metadata::HasGroupMetadata for SDL_Keycode {
    const GROUP_METADATA: &'static sdl3_sys::metadata::Group =
        &crate::metadata::keycode::METADATA_SDL_Keycode;
}

#[inline(always)]
pub const fn SDL_SCANCODE_TO_KEYCODE(X: SDL_Scancode) -> Uint32 {
    ((X.0 as Uint32) | SDLK_SCANCODE_MASK.0)
}

/// Valid key modifiers (possibly OR'd together).
///
/// ## Availability
/// This datatype is available since SDL 3.2.0.
///
/// ## Known values (`sdl3-sys`)
/// | Associated constant | Global constant | Description |
/// | ------------------- | --------------- | ----------- |
/// | [`NONE`](SDL_Keymod::NONE) | [`SDL_KMOD_NONE`] | no modifier is applicable. |
/// | [`LSHIFT`](SDL_Keymod::LSHIFT) | [`SDL_KMOD_LSHIFT`] | the left Shift key is down. |
/// | [`RSHIFT`](SDL_Keymod::RSHIFT) | [`SDL_KMOD_RSHIFT`] | the right Shift key is down. |
/// | [`LEVEL5`](SDL_Keymod::LEVEL5) | [`SDL_KMOD_LEVEL5`] | the Level 5 Shift key is down. |
/// | [`LCTRL`](SDL_Keymod::LCTRL) | [`SDL_KMOD_LCTRL`] | the left Ctrl (Control) key is down. |
/// | [`RCTRL`](SDL_Keymod::RCTRL) | [`SDL_KMOD_RCTRL`] | the right Ctrl (Control) key is down. |
/// | [`LALT`](SDL_Keymod::LALT) | [`SDL_KMOD_LALT`] | the left Alt key is down. |
/// | [`RALT`](SDL_Keymod::RALT) | [`SDL_KMOD_RALT`] | the right Alt key is down. |
/// | [`LGUI`](SDL_Keymod::LGUI) | [`SDL_KMOD_LGUI`] | the left GUI key (often the Windows key) is down. |
/// | [`RGUI`](SDL_Keymod::RGUI) | [`SDL_KMOD_RGUI`] | the right GUI key (often the Windows key) is down. |
/// | [`NUM`](SDL_Keymod::NUM) | [`SDL_KMOD_NUM`] | the Num Lock key (may be located on an extended keypad) is down. |
/// | [`CAPS`](SDL_Keymod::CAPS) | [`SDL_KMOD_CAPS`] | the Caps Lock key is down. |
/// | [`MODE`](SDL_Keymod::MODE) | [`SDL_KMOD_MODE`] | the !AltGr key is down. |
/// | [`SCROLL`](SDL_Keymod::SCROLL) | [`SDL_KMOD_SCROLL`] | the Scroll Lock key is down. |
/// | [`CTRL`](SDL_Keymod::CTRL) | [`SDL_KMOD_CTRL`] | Any Ctrl key is down. |
/// | [`SHIFT`](SDL_Keymod::SHIFT) | [`SDL_KMOD_SHIFT`] | Any Shift key is down. |
/// | [`ALT`](SDL_Keymod::ALT) | [`SDL_KMOD_ALT`] | Any Alt key is down. |
/// | [`GUI`](SDL_Keymod::GUI) | [`SDL_KMOD_GUI`] | Any GUI key is down. |
#[repr(transparent)]
#[derive(Clone, Copy, Default, PartialEq, Eq, Hash)]
pub struct SDL_Keymod(pub Uint16);

impl ::core::cmp::PartialEq<Uint16> for SDL_Keymod {
    #[inline(always)]
    fn eq(&self, other: &Uint16) -> bool {
        &self.0 == other
    }
}

impl ::core::cmp::PartialEq<SDL_Keymod> for Uint16 {
    #[inline(always)]
    fn eq(&self, other: &SDL_Keymod) -> bool {
        self == &other.0
    }
}

impl From<SDL_Keymod> for Uint16 {
    #[inline(always)]
    fn from(value: SDL_Keymod) -> Self {
        value.0
    }
}

#[cfg(feature = "debug-impls")]
impl ::core::fmt::Debug for SDL_Keymod {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        let mut first = true;
        let all_bits = 0;
        write!(f, "SDL_Keymod(")?;
        let all_bits = all_bits | Self::NONE.0;
        if (Self::NONE != 0 || self.0 == 0) && *self & Self::NONE == Self::NONE {
            if !first {
                write!(f, " | ")?;
            }
            first = false;
            write!(f, "NONE")?;
        }
        let all_bits = all_bits | Self::LSHIFT.0;
        if (Self::LSHIFT != 0 || self.0 == 0) && *self & Self::LSHIFT == Self::LSHIFT {
            if !first {
                write!(f, " | ")?;
            }
            first = false;
            write!(f, "LSHIFT")?;
        }
        let all_bits = all_bits | Self::RSHIFT.0;
        if (Self::RSHIFT != 0 || self.0 == 0) && *self & Self::RSHIFT == Self::RSHIFT {
            if !first {
                write!(f, " | ")?;
            }
            first = false;
            write!(f, "RSHIFT")?;
        }
        let all_bits = all_bits | Self::LEVEL5.0;
        if (Self::LEVEL5 != 0 || self.0 == 0) && *self & Self::LEVEL5 == Self::LEVEL5 {
            if !first {
                write!(f, " | ")?;
            }
            first = false;
            write!(f, "LEVEL5")?;
        }
        let all_bits = all_bits | Self::LCTRL.0;
        if (Self::LCTRL != 0 || self.0 == 0) && *self & Self::LCTRL == Self::LCTRL {
            if !first {
                write!(f, " | ")?;
            }
            first = false;
            write!(f, "LCTRL")?;
        }
        let all_bits = all_bits | Self::RCTRL.0;
        if (Self::RCTRL != 0 || self.0 == 0) && *self & Self::RCTRL == Self::RCTRL {
            if !first {
                write!(f, " | ")?;
            }
            first = false;
            write!(f, "RCTRL")?;
        }
        let all_bits = all_bits | Self::LALT.0;
        if (Self::LALT != 0 || self.0 == 0) && *self & Self::LALT == Self::LALT {
            if !first {
                write!(f, " | ")?;
            }
            first = false;
            write!(f, "LALT")?;
        }
        let all_bits = all_bits | Self::RALT.0;
        if (Self::RALT != 0 || self.0 == 0) && *self & Self::RALT == Self::RALT {
            if !first {
                write!(f, " | ")?;
            }
            first = false;
            write!(f, "RALT")?;
        }
        let all_bits = all_bits | Self::LGUI.0;
        if (Self::LGUI != 0 || self.0 == 0) && *self & Self::LGUI == Self::LGUI {
            if !first {
                write!(f, " | ")?;
            }
            first = false;
            write!(f, "LGUI")?;
        }
        let all_bits = all_bits | Self::RGUI.0;
        if (Self::RGUI != 0 || self.0 == 0) && *self & Self::RGUI == Self::RGUI {
            if !first {
                write!(f, " | ")?;
            }
            first = false;
            write!(f, "RGUI")?;
        }
        let all_bits = all_bits | Self::NUM.0;
        if (Self::NUM != 0 || self.0 == 0) && *self & Self::NUM == Self::NUM {
            if !first {
                write!(f, " | ")?;
            }
            first = false;
            write!(f, "NUM")?;
        }
        let all_bits = all_bits | Self::CAPS.0;
        if (Self::CAPS != 0 || self.0 == 0) && *self & Self::CAPS == Self::CAPS {
            if !first {
                write!(f, " | ")?;
            }
            first = false;
            write!(f, "CAPS")?;
        }
        let all_bits = all_bits | Self::MODE.0;
        if (Self::MODE != 0 || self.0 == 0) && *self & Self::MODE == Self::MODE {
            if !first {
                write!(f, " | ")?;
            }
            first = false;
            write!(f, "MODE")?;
        }
        let all_bits = all_bits | Self::SCROLL.0;
        if (Self::SCROLL != 0 || self.0 == 0) && *self & Self::SCROLL == Self::SCROLL {
            if !first {
                write!(f, " | ")?;
            }
            first = false;
            write!(f, "SCROLL")?;
        }
        let all_bits = all_bits | Self::CTRL.0;
        if (Self::CTRL != 0 || self.0 == 0) && *self & Self::CTRL == Self::CTRL {
            if !first {
                write!(f, " | ")?;
            }
            first = false;
            write!(f, "CTRL")?;
        }
        let all_bits = all_bits | Self::SHIFT.0;
        if (Self::SHIFT != 0 || self.0 == 0) && *self & Self::SHIFT == Self::SHIFT {
            if !first {
                write!(f, " | ")?;
            }
            first = false;
            write!(f, "SHIFT")?;
        }
        let all_bits = all_bits | Self::ALT.0;
        if (Self::ALT != 0 || self.0 == 0) && *self & Self::ALT == Self::ALT {
            if !first {
                write!(f, " | ")?;
            }
            first = false;
            write!(f, "ALT")?;
        }
        let all_bits = all_bits | Self::GUI.0;
        if (Self::GUI != 0 || self.0 == 0) && *self & Self::GUI == Self::GUI {
            if !first {
                write!(f, " | ")?;
            }
            first = false;
            write!(f, "GUI")?;
        }

        if self.0 & !all_bits != 0 {
            if !first {
                write!(f, " | ")?;
            }
            write!(f, "{:#x}", self.0)?;
        } else if first {
            write!(f, "0")?;
        }
        write!(f, ")")
    }
}

impl ::core::ops::BitAnd for SDL_Keymod {
    type Output = Self;

    #[inline(always)]
    fn bitand(self, rhs: Self) -> Self::Output {
        Self(self.0 & rhs.0)
    }
}

impl ::core::ops::BitAndAssign for SDL_Keymod {
    #[inline(always)]
    fn bitand_assign(&mut self, rhs: Self) {
        self.0 &= rhs.0;
    }
}

impl ::core::ops::BitOr for SDL_Keymod {
    type Output = Self;

    #[inline(always)]
    fn bitor(self, rhs: Self) -> Self::Output {
        Self(self.0 | rhs.0)
    }
}

impl ::core::ops::BitOrAssign for SDL_Keymod {
    #[inline(always)]
    fn bitor_assign(&mut self, rhs: Self) {
        self.0 |= rhs.0;
    }
}

impl ::core::ops::BitXor for SDL_Keymod {
    type Output = Self;

    #[inline(always)]
    fn bitxor(self, rhs: Self) -> Self::Output {
        Self(self.0 ^ rhs.0)
    }
}

impl ::core::ops::BitXorAssign for SDL_Keymod {
    #[inline(always)]
    fn bitxor_assign(&mut self, rhs: Self) {
        self.0 ^= rhs.0;
    }
}

impl ::core::ops::Not for SDL_Keymod {
    type Output = Self;

    #[inline(always)]
    fn not(self) -> Self::Output {
        Self(!self.0)
    }
}

impl SDL_Keymod {
    /// no modifier is applicable.
    pub const NONE: Self = Self((0x0000 as Uint16));
    /// the left Shift key is down.
    pub const LSHIFT: Self = Self((0x0001 as Uint16));
    /// the right Shift key is down.
    pub const RSHIFT: Self = Self((0x0002 as Uint16));
    /// the Level 5 Shift key is down.
    pub const LEVEL5: Self = Self((0x0004 as Uint16));
    /// the left Ctrl (Control) key is down.
    pub const LCTRL: Self = Self((0x0040 as Uint16));
    /// the right Ctrl (Control) key is down.
    pub const RCTRL: Self = Self((0x0080 as Uint16));
    /// the left Alt key is down.
    pub const LALT: Self = Self((0x0100 as Uint16));
    /// the right Alt key is down.
    pub const RALT: Self = Self((0x0200 as Uint16));
    /// the left GUI key (often the Windows key) is down.
    pub const LGUI: Self = Self((0x0400 as Uint16));
    /// the right GUI key (often the Windows key) is down.
    pub const RGUI: Self = Self((0x0800 as Uint16));
    /// the Num Lock key (may be located on an extended keypad) is down.
    pub const NUM: Self = Self((0x1000 as Uint16));
    /// the Caps Lock key is down.
    pub const CAPS: Self = Self((0x2000 as Uint16));
    /// the !AltGr key is down.
    pub const MODE: Self = Self((0x4000 as Uint16));
    /// the Scroll Lock key is down.
    pub const SCROLL: Self = Self((0x8000 as Uint16));
    /// Any Ctrl key is down.
    pub const CTRL: Self = Self((SDL_KMOD_LCTRL.0 | SDL_KMOD_RCTRL.0));
    /// Any Shift key is down.
    pub const SHIFT: Self = Self((SDL_KMOD_LSHIFT.0 | SDL_KMOD_RSHIFT.0));
    /// Any Alt key is down.
    pub const ALT: Self = Self((SDL_KMOD_LALT.0 | SDL_KMOD_RALT.0));
    /// Any GUI key is down.
    pub const GUI: Self = Self((SDL_KMOD_LGUI.0 | SDL_KMOD_RGUI.0));
}

/// no modifier is applicable.
pub const SDL_KMOD_NONE: SDL_Keymod = SDL_Keymod::NONE;
/// the left Shift key is down.
pub const SDL_KMOD_LSHIFT: SDL_Keymod = SDL_Keymod::LSHIFT;
/// the right Shift key is down.
pub const SDL_KMOD_RSHIFT: SDL_Keymod = SDL_Keymod::RSHIFT;
/// the Level 5 Shift key is down.
pub const SDL_KMOD_LEVEL5: SDL_Keymod = SDL_Keymod::LEVEL5;
/// the left Ctrl (Control) key is down.
pub const SDL_KMOD_LCTRL: SDL_Keymod = SDL_Keymod::LCTRL;
/// the right Ctrl (Control) key is down.
pub const SDL_KMOD_RCTRL: SDL_Keymod = SDL_Keymod::RCTRL;
/// the left Alt key is down.
pub const SDL_KMOD_LALT: SDL_Keymod = SDL_Keymod::LALT;
/// the right Alt key is down.
pub const SDL_KMOD_RALT: SDL_Keymod = SDL_Keymod::RALT;
/// the left GUI key (often the Windows key) is down.
pub const SDL_KMOD_LGUI: SDL_Keymod = SDL_Keymod::LGUI;
/// the right GUI key (often the Windows key) is down.
pub const SDL_KMOD_RGUI: SDL_Keymod = SDL_Keymod::RGUI;
/// the Num Lock key (may be located on an extended keypad) is down.
pub const SDL_KMOD_NUM: SDL_Keymod = SDL_Keymod::NUM;
/// the Caps Lock key is down.
pub const SDL_KMOD_CAPS: SDL_Keymod = SDL_Keymod::CAPS;
/// the !AltGr key is down.
pub const SDL_KMOD_MODE: SDL_Keymod = SDL_Keymod::MODE;
/// the Scroll Lock key is down.
pub const SDL_KMOD_SCROLL: SDL_Keymod = SDL_Keymod::SCROLL;
/// Any Ctrl key is down.
pub const SDL_KMOD_CTRL: SDL_Keymod = SDL_Keymod::CTRL;
/// Any Shift key is down.
pub const SDL_KMOD_SHIFT: SDL_Keymod = SDL_Keymod::SHIFT;
/// Any Alt key is down.
pub const SDL_KMOD_ALT: SDL_Keymod = SDL_Keymod::ALT;
/// Any GUI key is down.
pub const SDL_KMOD_GUI: SDL_Keymod = SDL_Keymod::GUI;

#[cfg(feature = "metadata")]
impl sdl3_sys::metadata::HasGroupMetadata for SDL_Keymod {
    const GROUP_METADATA: &'static sdl3_sys::metadata::Group =
        &crate::metadata::keycode::METADATA_SDL_Keymod;
}

#[cfg(doc)]
use crate::everything::*;
