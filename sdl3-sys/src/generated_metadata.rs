#![allow(non_upper_case_globals, unused)]

use core::ffi::CStr;
use sdl3_sys::{
    metadata::{Group, GroupKind, GroupValue, Hint, Property},
    properties::SDL_PropertyType,
    version::SDL_VERSIONNUM,
};

/// Metadata for hint constants in this crate
pub static HINTS: &[Hint] = &[
    Hint {
        module: "hints",
        name: "SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED",
        short_name: "ALLOW_ALT_TAB_WHILE_GRABBED",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED) },
        doc: Some("Specify the behavior of Alt+Tab while the keyboard is grabbed.\n\nBy default, SDL emulates Alt+Tab functionality while the keyboard is\ngrabbed and your window is full-screen. This prevents the user from getting\nstuck in your application if you've enabled keyboard grab.\n\nThe variable can be set to the following values:\n\n- \"0\": SDL will not handle Alt+Tab. Your application is responsible for\nhandling Alt+Tab while the keyboard is grabbed.\n- \"1\": SDL will minimize your window when Alt+Tab is pressed (default)\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_ANDROID_ALLOW_RECREATE_ACTIVITY",
        short_name: "ANDROID_ALLOW_RECREATE_ACTIVITY",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_ANDROID_ALLOW_RECREATE_ACTIVITY) },
        doc: Some("A variable to control whether the SDL activity is allowed to be re-created.\n\nIf this hint is true, the activity can be recreated on demand by the OS,\nand Java static data and C++ static data remain with their current values.\nIf this hint is false, then SDL will call exit() when you return from your\nmain function and the application will be terminated and then started fresh\neach time.\n\nThe variable can be set to the following values:\n\n- \"0\": The application starts fresh at each launch. (default)\n- \"1\": The application activity can be recreated by the OS.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_ANDROID_BLOCK_ON_PAUSE",
        short_name: "ANDROID_BLOCK_ON_PAUSE",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_ANDROID_BLOCK_ON_PAUSE) },
        doc: Some("A variable to control whether the event loop will block itself when the app\nis paused.\n\nThe variable can be set to the following values:\n\n- \"0\": Non blocking.\n- \"1\": Blocking. (default)\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_ANDROID_LOW_LATENCY_AUDIO",
        short_name: "ANDROID_LOW_LATENCY_AUDIO",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_ANDROID_LOW_LATENCY_AUDIO) },
        doc: Some("A variable to control whether low latency audio should be enabled.\n\nSome devices have poor quality output when this is enabled, but this is\nusually an improvement in audio latency.\n\nThe variable can be set to the following values:\n\n- \"0\": Low latency audio is not enabled.\n- \"1\": Low latency audio is enabled. (default)\n\nThis hint should be set before SDL audio is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_ANDROID_TRAP_BACK_BUTTON",
        short_name: "ANDROID_TRAP_BACK_BUTTON",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_ANDROID_TRAP_BACK_BUTTON) },
        doc: Some("A variable to control whether we trap the Android back button to handle it\nmanually.\n\nThis is necessary for the right mouse button to work on some Android\ndevices, or to be able to trap the back button for use in your code\nreliably. If this hint is true, the back button will show up as an\n[`SDL_EVENT_KEY_DOWN`] / [`SDL_EVENT_KEY_UP`] pair with a keycode of\n[`SDL_SCANCODE_AC_BACK`].\n\nThe variable can be set to the following values:\n\n- \"0\": Back button will be handled as usual for system. (default)\n- \"1\": Back button will be trapped, allowing you to handle the key press\nmanually. (This will also let right mouse click work on systems where the\nright mouse button functions as back.)\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_APP_ID",
        short_name: "APP_ID",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_APP_ID) },
        doc: Some("A variable setting the app ID string.\n\nThis string is used by desktop compositors to identify and group windows\ntogether, as well as match applications with associated desktop settings\nand icons.\n\nThis will override [`SDL_PROP_APP_METADATA_IDENTIFIER_STRING`], if set by the\napplication.\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_APP_NAME",
        short_name: "APP_NAME",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_APP_NAME) },
        doc: Some("A variable setting the application name.\n\nThis hint lets you specify the application name sent to the OS when\nrequired. For example, this will often appear in volume control applets for\naudio streams, and in lists of applications which are inhibiting the\nscreensaver. You should use a string that describes your program (\"My Game\n2: The Revenge\")\n\nThis will override [`SDL_PROP_APP_METADATA_NAME_STRING`], if set by the\napplication.\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS",
        short_name: "APPLE_TV_CONTROLLER_UI_EVENTS",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS) },
        doc: Some("A variable controlling whether controllers used with the Apple TV generate\nUI events.\n\nWhen UI events are generated by controller input, the app will be\nbackgrounded when the Apple TV remote's menu button is pressed, and when\nthe pause or B buttons on gamepads are pressed.\n\nMore information about properly making use of controllers for the Apple TV\ncan be found here:\n<https://developer.apple.com/tvos/human-interface-guidelines/remote-and-controllers/>\n\nThe variable can be set to the following values:\n\n- \"0\": Controller input does not generate UI events. (default)\n- \"1\": Controller input generates UI events.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION",
        short_name: "APPLE_TV_REMOTE_ALLOW_ROTATION",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION) },
        doc: Some("A variable controlling whether the Apple TV remote's joystick axes will\nautomatically match the rotation of the remote.\n\nThe variable can be set to the following values:\n\n- \"0\": Remote orientation does not affect joystick axes. (default)\n- \"1\": Joystick axes are based on the orientation of the remote.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_AUDIO_ALSA_DEFAULT_DEVICE",
        short_name: "AUDIO_ALSA_DEFAULT_DEVICE",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_AUDIO_ALSA_DEFAULT_DEVICE) },
        doc: Some("Specify the default ALSA audio device name.\n\nThis variable is a specific audio device to open when the \"default\" audio\ndevice is used.\n\nThis hint will be ignored when opening the default playback device if\n[`SDL_HINT_AUDIO_ALSA_DEFAULT_PLAYBACK_DEVICE`] is set, or when opening the\ndefault recording device if [`SDL_HINT_AUDIO_ALSA_DEFAULT_RECORDING_DEVICE`] is\nset.\n\nThis hint should be set before an audio device is opened.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n\n## See also\n- [`SDL_HINT_AUDIO_ALSA_DEFAULT_PLAYBACK_DEVICE`]\n- [`SDL_HINT_AUDIO_ALSA_DEFAULT_RECORDING_DEVICE`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_AUDIO_ALSA_DEFAULT_PLAYBACK_DEVICE",
        short_name: "AUDIO_ALSA_DEFAULT_PLAYBACK_DEVICE",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_AUDIO_ALSA_DEFAULT_PLAYBACK_DEVICE) },
        doc: Some("Specify the default ALSA audio playback device name.\n\nThis variable is a specific audio device to open for playback, when the\n\"default\" audio device is used.\n\nIf this hint isn't set, SDL will check [`SDL_HINT_AUDIO_ALSA_DEFAULT_DEVICE`]\nbefore choosing a reasonable default.\n\nThis hint should be set before an audio device is opened.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n\n## See also\n- [`SDL_HINT_AUDIO_ALSA_DEFAULT_RECORDING_DEVICE`]\n- [`SDL_HINT_AUDIO_ALSA_DEFAULT_DEVICE`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_AUDIO_ALSA_DEFAULT_RECORDING_DEVICE",
        short_name: "AUDIO_ALSA_DEFAULT_RECORDING_DEVICE",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_AUDIO_ALSA_DEFAULT_RECORDING_DEVICE) },
        doc: Some("Specify the default ALSA audio recording device name.\n\nThis variable is a specific audio device to open for recording, when the\n\"default\" audio device is used.\n\nIf this hint isn't set, SDL will check [`SDL_HINT_AUDIO_ALSA_DEFAULT_DEVICE`]\nbefore choosing a reasonable default.\n\nThis hint should be set before an audio device is opened.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n\n## See also\n- [`SDL_HINT_AUDIO_ALSA_DEFAULT_PLAYBACK_DEVICE`]\n- [`SDL_HINT_AUDIO_ALSA_DEFAULT_DEVICE`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_AUDIO_CATEGORY",
        short_name: "AUDIO_CATEGORY",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_AUDIO_CATEGORY) },
        doc: Some("A variable controlling the audio category on iOS and macOS.\n\nThe variable can be set to the following values:\n\n- \"ambient\": Use the AVAudioSessionCategoryAmbient audio category, will be\nmuted by the phone mute switch (default)\n- \"playback\": Use the AVAudioSessionCategoryPlayback category.\n\nFor more information, see Apple's documentation:\n<https://developer.apple.com/library/content/documentation/Audio/Conceptual/AudioSessionProgrammingGuide/AudioSessionCategoriesandModes/AudioSessionCategoriesandModes.html>\n\nThis hint should be set before an audio device is opened.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_AUDIO_CHANNELS",
        short_name: "AUDIO_CHANNELS",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_AUDIO_CHANNELS) },
        doc: Some("A variable controlling the default audio channel count.\n\nIf the application doesn't specify the audio channel count when opening the\ndevice, this hint can be used to specify a default channel count that will\nbe used. This defaults to \"1\" for recording and \"2\" for playback devices.\n\nThis hint should be set before an audio device is opened.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_AUDIO_DEVICE_APP_ICON_NAME",
        short_name: "AUDIO_DEVICE_APP_ICON_NAME",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_AUDIO_DEVICE_APP_ICON_NAME) },
        doc: Some("Specify an application icon name for an audio device.\n\nSome audio backends (such as Pulseaudio and Pipewire) allow you to set an\nXDG icon name for your application. Among other things, this icon might\nshow up in a system control panel that lets the user adjust the volume on\nspecific audio streams instead of using one giant master volume slider.\nNote that this is unrelated to the icon used by the windowing system, which\nmay be set with [`SDL_SetWindowIcon`] (or via desktop file on Wayland).\n\nSetting this to \"\" or leaving it unset will have SDL use a reasonable\ndefault, \"applications-games\", which is likely to be installed. See\n<https://specifications.freedesktop.org/icon-theme-spec/icon-theme-spec-latest.html>\nand\n<https://specifications.freedesktop.org/icon-naming-spec/icon-naming-spec-latest.html>\nfor the relevant XDG icon specs.\n\nThis hint should be set before an audio device is opened.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_AUDIO_DEVICE_SAMPLE_FRAMES",
        short_name: "AUDIO_DEVICE_SAMPLE_FRAMES",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_AUDIO_DEVICE_SAMPLE_FRAMES) },
        doc: Some("A variable controlling device buffer size.\n\nThis hint is an integer > 0, that represents the size of the device's\nbuffer in sample frames (stereo audio data in 16-bit format is 4 bytes per\nsample frame, for example).\n\nSDL3 generally decides this value on behalf of the app, but if for some\nreason the app needs to dictate this (because they want either lower\nlatency or higher throughput AND ARE WILLING TO DEAL WITH what that might\nrequire of the app), they can specify it.\n\nSDL will try to accommodate this value, but there is no promise you'll get\nthe buffer size requested. Many platforms won't honor this request at all,\nor might adjust it.\n\nThis hint should be set before an audio device is opened.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_AUDIO_DEVICE_STREAM_NAME",
        short_name: "AUDIO_DEVICE_STREAM_NAME",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_AUDIO_DEVICE_STREAM_NAME) },
        doc: Some("Specify an audio stream name for an audio device.\n\nSome audio backends (such as PulseAudio) allow you to describe your audio\nstream. Among other things, this description might show up in a system\ncontrol panel that lets the user adjust the volume on specific audio\nstreams instead of using one giant master volume slider.\n\nThis hints lets you transmit that information to the OS. The contents of\nthis hint are used while opening an audio device. You should use a string\nthat describes your what your program is playing (\"audio stream\" is\nprobably sufficient in many cases, but this could be useful for something\nlike \"team chat\" if you have a headset playing VoIP audio separately).\n\nSetting this to \"\" or leaving it unset will have SDL use a reasonable\ndefault: \"audio stream\" or something similar.\n\nNote that while this talks about audio streams, this is an OS-level\nconcept, so it applies to a physical audio device in this case, and not an\n[`SDL_AudioStream`], nor an SDL logical audio device.\n\nThis hint should be set before an audio device is opened.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_AUDIO_DEVICE_STREAM_ROLE",
        short_name: "AUDIO_DEVICE_STREAM_ROLE",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_AUDIO_DEVICE_STREAM_ROLE) },
        doc: Some("Specify an application role for an audio device.\n\nSome audio backends (such as Pipewire) allow you to describe the role of\nyour audio stream. Among other things, this description might show up in a\nsystem control panel or software for displaying and manipulating media\nplayback/recording graphs.\n\nThis hints lets you transmit that information to the OS. The contents of\nthis hint are used while opening an audio device. You should use a string\nthat describes your what your program is playing (Game, Music, Movie,\netc...).\n\nSetting this to \"\" or leaving it unset will have SDL use a reasonable\ndefault: \"Game\" or something similar.\n\nNote that while this talks about audio streams, this is an OS-level\nconcept, so it applies to a physical audio device in this case, and not an\n[`SDL_AudioStream`], nor an SDL logical audio device.\n\nThis hint should be set before an audio device is opened.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_AUDIO_DISK_INPUT_FILE",
        short_name: "AUDIO_DISK_INPUT_FILE",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_AUDIO_DISK_INPUT_FILE) },
        doc: Some("Specify the input file when recording audio using the disk audio driver.\n\nThis defaults to \"sdlaudio-in.raw\"\n\nThis hint should be set before an audio device is opened.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_AUDIO_DISK_OUTPUT_FILE",
        short_name: "AUDIO_DISK_OUTPUT_FILE",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_AUDIO_DISK_OUTPUT_FILE) },
        doc: Some("Specify the output file when playing audio using the disk audio driver.\n\nThis defaults to \"sdlaudio.raw\"\n\nThis hint should be set before an audio device is opened.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_AUDIO_DISK_TIMESCALE",
        short_name: "AUDIO_DISK_TIMESCALE",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_AUDIO_DISK_TIMESCALE) },
        doc: Some("A variable controlling the audio rate when using the disk audio driver.\n\nThe disk audio driver normally simulates real-time for the audio rate that\nwas specified, but you can use this variable to adjust this rate higher or\nlower down to 0. The default value is \"1.0\".\n\nThis hint should be set before an audio device is opened.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_AUDIO_DRIVER",
        short_name: "AUDIO_DRIVER",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_AUDIO_DRIVER) },
        doc: Some("A variable that specifies an audio backend to use.\n\nBy default, SDL will try all available audio backends in a reasonable order\nuntil it finds one that can work, but this hint allows the app or user to\nforce a specific driver, such as \"pipewire\" if, say, you are on PulseAudio\nbut want to try talking to the lower level instead.\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_AUDIO_DUMMY_TIMESCALE",
        short_name: "AUDIO_DUMMY_TIMESCALE",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_AUDIO_DUMMY_TIMESCALE) },
        doc: Some("A variable controlling the audio rate when using the dummy audio driver.\n\nThe dummy audio driver normally simulates real-time for the audio rate that\nwas specified, but you can use this variable to adjust this rate higher or\nlower down to 0. The default value is \"1.0\".\n\nThis hint should be set before an audio device is opened.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_AUDIO_FORMAT",
        short_name: "AUDIO_FORMAT",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_AUDIO_FORMAT) },
        doc: Some("A variable controlling the default audio format.\n\nIf the application doesn't specify the audio format when opening the\ndevice, this hint can be used to specify a default format that will be\nused.\n\nThe variable can be set to the following values:\n\n- \"U8\": Unsigned 8-bit audio\n- \"S8\": Signed 8-bit audio\n- \"S16LE\": Signed 16-bit little-endian audio\n- \"S16BE\": Signed 16-bit big-endian audio\n- \"S16\": Signed 16-bit native-endian audio (default)\n- \"S32LE\": Signed 32-bit little-endian audio\n- \"S32BE\": Signed 32-bit big-endian audio\n- \"S32\": Signed 32-bit native-endian audio\n- \"F32LE\": Floating point little-endian audio\n- \"F32BE\": Floating point big-endian audio\n- \"F32\": Floating point native-endian audio\n\nThis hint should be set before an audio device is opened.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_AUDIO_FREQUENCY",
        short_name: "AUDIO_FREQUENCY",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_AUDIO_FREQUENCY) },
        doc: Some("A variable controlling the default audio frequency.\n\nIf the application doesn't specify the audio frequency when opening the\ndevice, this hint can be used to specify a default frequency that will be\nused. This defaults to \"44100\".\n\nThis hint should be set before an audio device is opened.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_AUDIO_INCLUDE_MONITORS",
        short_name: "AUDIO_INCLUDE_MONITORS",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_AUDIO_INCLUDE_MONITORS) },
        doc: Some("A variable that causes SDL to not ignore audio \"monitors\".\n\nThis is currently only used by the PulseAudio driver.\n\nBy default, SDL ignores audio devices that aren't associated with physical\nhardware. Changing this hint to \"1\" will expose anything SDL sees that\nappears to be an audio source or sink. This will add \"devices\" to the list\nthat the user probably doesn't want or need, but it can be useful in\nscenarios where you want to hook up SDL to some sort of virtual device,\netc.\n\nThe variable can be set to the following values:\n\n- \"0\": Audio monitor devices will be ignored. (default)\n- \"1\": Audio monitor devices will show up in the device list.\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_AUTO_UPDATE_JOYSTICKS",
        short_name: "AUTO_UPDATE_JOYSTICKS",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_AUTO_UPDATE_JOYSTICKS) },
        doc: Some("A variable controlling whether SDL updates joystick state when getting\ninput events.\n\nThe variable can be set to the following values:\n\n- \"0\": You'll call [`SDL_UpdateJoysticks()`] manually.\n- \"1\": SDL will automatically call [`SDL_UpdateJoysticks()`]. (default)\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_AUTO_UPDATE_SENSORS",
        short_name: "AUTO_UPDATE_SENSORS",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_AUTO_UPDATE_SENSORS) },
        doc: Some("A variable controlling whether SDL updates sensor state when getting input\nevents.\n\nThe variable can be set to the following values:\n\n- \"0\": You'll call [`SDL_UpdateSensors()`] manually.\n- \"1\": SDL will automatically call [`SDL_UpdateSensors()`]. (default)\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_BMP_SAVE_LEGACY_FORMAT",
        short_name: "BMP_SAVE_LEGACY_FORMAT",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_BMP_SAVE_LEGACY_FORMAT) },
        doc: Some("Prevent SDL from using version 4 of the bitmap header when saving BMPs.\n\nThe bitmap header version 4 is required for proper alpha channel support\nand SDL will use it when required. Should this not be desired, this hint\ncan force the use of the 40 byte header version which is supported\neverywhere.\n\nThe variable can be set to the following values:\n\n- \"0\": Surfaces with a colorkey or an alpha channel are saved to a 32-bit\nBMP file with an alpha mask. SDL will use the bitmap header version 4 and\nset the alpha mask accordingly. (default)\n- \"1\": Surfaces with a colorkey or an alpha channel are saved to a 32-bit\nBMP file without an alpha mask. The alpha channel data will be in the\nfile, but applications are going to ignore it.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_CAMERA_DRIVER",
        short_name: "CAMERA_DRIVER",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_CAMERA_DRIVER) },
        doc: Some("A variable that decides what camera backend to use.\n\nBy default, SDL will try all available camera backends in a reasonable\norder until it finds one that can work, but this hint allows the app or\nuser to force a specific target, such as \"directshow\" if, say, you are on\nWindows Media Foundations but want to try DirectShow instead.\n\nThe default value is unset, in which case SDL will try to figure out the\nbest camera backend on your behalf. This hint needs to be set before\n[`SDL_Init()`] is called to be useful.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_CPU_FEATURE_MASK",
        short_name: "CPU_FEATURE_MASK",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_CPU_FEATURE_MASK) },
        doc: Some("A variable that limits what CPU features are available.\n\nBy default, SDL marks all features the current CPU supports as available.\nThis hint allows to limit these to a subset.\n\nWhen the hint is unset, or empty, SDL will enable all detected CPU\nfeatures.\n\nThe variable can be set to a comma separated list containing the following\nitems:\n\n- \"all\"\n- \"altivec\"\n- \"sse\"\n- \"sse2\"\n- \"sse3\"\n- \"sse41\"\n- \"sse42\"\n- \"avx\"\n- \"avx2\"\n- \"avx512f\"\n- \"arm-simd\"\n- \"neon\"\n- \"lsx\"\n- \"lasx\"\n\nThe items can be prefixed by '+'/'-' to add/remove features.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_DIRECTINPUT",
        short_name: "JOYSTICK_DIRECTINPUT",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_DIRECTINPUT) },
        doc: Some("A variable controlling whether DirectInput should be used for controllers.\n\nThe variable can be set to the following values:\n\n- \"0\": Disable DirectInput detection.\n- \"1\": Enable DirectInput detection. (default)\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_FILE_DIALOG_DRIVER",
        short_name: "FILE_DIALOG_DRIVER",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_FILE_DIALOG_DRIVER) },
        doc: Some("A variable that specifies a dialog backend to use.\n\nBy default, SDL will try all available dialog backends in a reasonable\norder until it finds one that can work, but this hint allows the app or\nuser to force a specific target.\n\nIf the specified target does not exist or is not available, the\ndialog-related function calls will fail.\n\nThis hint currently only applies to platforms using the generic \"Unix\"\ndialog implementation, but may be extended to more platforms in the future.\nNote that some Unix and Unix-like platforms have their own implementation,\nsuch as macOS and Haiku.\n\nThe variable can be set to the following values:\n\n- NULL: Select automatically (default, all platforms)\n- \"portal\": Use XDG Portals through DBus (Unix only)\n- \"zenity\": Use the Zenity program (Unix only)\n\nMore options may be added in the future.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_DISPLAY_USABLE_BOUNDS",
        short_name: "DISPLAY_USABLE_BOUNDS",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_DISPLAY_USABLE_BOUNDS) },
        doc: Some("Override for [`SDL_GetDisplayUsableBounds()`].\n\nIf set, this hint will override the expected results for\n[`SDL_GetDisplayUsableBounds()`] for display index 0. Generally you don't want\nto do this, but this allows an embedded system to request that some of the\nscreen be reserved for other uses when paired with a well-behaved\napplication.\n\nThe contents of this hint must be 4 comma-separated integers, the first is\nthe bounds x, then y, width and height, in that order.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_EMSCRIPTEN_ASYNCIFY",
        short_name: "EMSCRIPTEN_ASYNCIFY",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_EMSCRIPTEN_ASYNCIFY) },
        doc: Some("Disable giving back control to the browser automatically when running with\nasyncify.\n\nWith -s ASYNCIFY, SDL calls emscripten_sleep during operations such as\nrefreshing the screen or polling events.\n\nThis hint only applies to the emscripten platform.\n\nThe variable can be set to the following values:\n\n- \"0\": Disable emscripten_sleep calls (if you give back browser control\nmanually or use asyncify for other purposes).\n- \"1\": Enable emscripten_sleep calls. (default)\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_EMSCRIPTEN_CANVAS_SELECTOR",
        short_name: "EMSCRIPTEN_CANVAS_SELECTOR",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_EMSCRIPTEN_CANVAS_SELECTOR) },
        doc: Some("Specify the CSS selector used for the \"default\" window/canvas.\n\nThis hint only applies to the emscripten platform.\n\nThe default value is \"#canvas\"\n\nThis hint should be set before creating a window.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT",
        short_name: "EMSCRIPTEN_KEYBOARD_ELEMENT",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT) },
        doc: Some("Override the binding element for keyboard inputs for Emscripten builds.\n\nThis hint only applies to the emscripten platform.\n\nThe variable can be one of:\n\n- \"#window\": the javascript window object (default)\n- \"#document\": the javascript document object\n- \"#screen\": the javascript window.screen object\n- \"#canvas\": the WebGL canvas element\n- \"#none\": Don't bind anything at all\n- any other string without a leading # sign applies to the element on the\npage with that ID.\n\nThis hint should be set before creating a window.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_ENABLE_SCREEN_KEYBOARD",
        short_name: "ENABLE_SCREEN_KEYBOARD",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_ENABLE_SCREEN_KEYBOARD) },
        doc: Some("A variable that controls whether the on-screen keyboard should be shown\nwhen text input is active.\n\nThe variable can be set to the following values:\n\n- \"auto\": The on-screen keyboard will be shown if there is no physical\nkeyboard attached. (default)\n- \"0\": Do not show the on-screen keyboard.\n- \"1\": Show the on-screen keyboard, if available.\n\nThis hint must be set before [`SDL_StartTextInput()`] is called\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_EVDEV_DEVICES",
        short_name: "EVDEV_DEVICES",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_EVDEV_DEVICES) },
        doc: Some("A variable containing a list of evdev devices to use if udev is not\navailable.\n\nThe list of devices is in the form:\n\ndeviceclass:path\\[,deviceclass:path\\[,...\\]\\]\n\nwhere device class is an integer representing the SDL_UDEV_deviceclass and\npath is the full path to the event device.\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_EVENT_LOGGING",
        short_name: "EVENT_LOGGING",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_EVENT_LOGGING) },
        doc: Some("A variable controlling verbosity of the logging of SDL events pushed onto\nthe internal queue.\n\nThe variable can be set to the following values, from least to most\nverbose:\n\n- \"0\": Don't log any events. (default)\n- \"1\": Log most events (other than the really spammy ones).\n- \"2\": Include mouse and finger motion events.\n\nThis is generally meant to be used to debug SDL itself, but can be useful\nfor application developers that need better visibility into what is going\non in the event queue. Logged events are sent through [`SDL_Log()`], which\nmeans by default they appear on stdout on most platforms or maybe\nOutputDebugString() on Windows, and can be funneled by the app with\n[`SDL_SetLogOutputFunction()`], etc.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_FORCE_RAISEWINDOW",
        short_name: "FORCE_RAISEWINDOW",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_FORCE_RAISEWINDOW) },
        doc: Some("A variable controlling whether raising the window should be done more\nforcefully.\n\nThe variable can be set to the following values:\n\n- \"0\": Honor the OS policy for raising windows. (default)\n- \"1\": Force the window to be raised, overriding any OS policy.\n\nAt present, this is only an issue under MS Windows, which makes it nearly\nimpossible to programmatically move a window to the foreground, for\n\"security\" reasons. See <http://stackoverflow.com/a/34414846> for a\ndiscussion.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_FRAMEBUFFER_ACCELERATION",
        short_name: "FRAMEBUFFER_ACCELERATION",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_FRAMEBUFFER_ACCELERATION) },
        doc: Some("A variable controlling how 3D acceleration is used to accelerate the SDL\nscreen surface.\n\nSDL can try to accelerate the SDL screen surface by using streaming\ntextures with a 3D rendering engine. This variable controls whether and how\nthis is done.\n\nThe variable can be set to the following values:\n\n- \"0\": Disable 3D acceleration\n- \"1\": Enable 3D acceleration, using the default renderer. (default)\n- \"X\": Enable 3D acceleration, using X where X is one of the valid\nrendering drivers. (e.g. \"direct3d\", \"opengl\", etc.)\n\nThis hint should be set before calling [`SDL_GetWindowSurface()`]\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_GAMECONTROLLERCONFIG",
        short_name: "GAMECONTROLLERCONFIG",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_GAMECONTROLLERCONFIG) },
        doc: Some("A variable that lets you manually hint extra gamecontroller db entries.\n\nThe variable should be newline delimited rows of gamecontroller config\ndata, see SDL_gamepad.h\n\nYou can update mappings after SDL is initialized with\n[`SDL_GetGamepadMappingForGUID()`] and [`SDL_AddGamepadMapping()`]\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_GAMECONTROLLERCONFIG_FILE",
        short_name: "GAMECONTROLLERCONFIG_FILE",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_GAMECONTROLLERCONFIG_FILE) },
        doc: Some("A variable that lets you provide a file with extra gamecontroller db\nentries.\n\nThe file should contain lines of gamecontroller config data, see\nSDL_gamepad.h\n\nYou can update mappings after SDL is initialized with\n[`SDL_GetGamepadMappingForGUID()`] and [`SDL_AddGamepadMapping()`]\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_GAMECONTROLLERTYPE",
        short_name: "GAMECONTROLLERTYPE",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_GAMECONTROLLERTYPE) },
        doc: Some("A variable that overrides the automatic controller type detection.\n\nThe variable should be comma separated entries, in the form: VID/PID=type\n\nThe VID and PID should be hexadecimal with exactly 4 digits, e.g. 0x00fd\n\nThis hint affects what low level protocol is used with the HIDAPI driver.\n\nThe variable can be set to the following values:\n\n- \"Xbox360\"\n- \"XboxOne\"\n- \"PS3\"\n- \"PS4\"\n- \"PS5\"\n- \"SwitchPro\"\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES",
        short_name: "GAMECONTROLLER_IGNORE_DEVICES",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES) },
        doc: Some("A variable containing a list of devices to skip when scanning for game\ncontrollers.\n\nThe format of the string is a comma separated list of USB VID/PID pairs in\nhexadecimal form, e.g.\n\n0xAAAA/0xBBBB,0xCCCC/0xDDDD\n\nThe variable can also take the form of \"@file\", in which case the named\nfile will be loaded and interpreted as the value of the variable.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT",
        short_name: "GAMECONTROLLER_IGNORE_DEVICES_EXCEPT",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT) },
        doc: Some("If set, all devices will be skipped when scanning for game controllers\nexcept for the ones listed in this variable.\n\nThe format of the string is a comma separated list of USB VID/PID pairs in\nhexadecimal form, e.g.\n\n0xAAAA/0xBBBB,0xCCCC/0xDDDD\n\nThe variable can also take the form of \"@file\", in which case the named\nfile will be loaded and interpreted as the value of the variable.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_GAMECONTROLLER_SENSOR_FUSION",
        short_name: "GAMECONTROLLER_SENSOR_FUSION",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_GAMECONTROLLER_SENSOR_FUSION) },
        doc: Some("A variable that controls whether the device's built-in accelerometer and\ngyro should be used as sensors for gamepads.\n\nThe variable can be set to the following values:\n\n- \"0\": Sensor fusion is disabled\n- \"1\": Sensor fusion is enabled for all controllers that lack sensors\n\nOr the variable can be a comma separated list of USB VID/PID pairs in\nhexadecimal form, e.g.\n\n0xAAAA/0xBBBB,0xCCCC/0xDDDD\n\nThe variable can also take the form of \"@file\", in which case the named\nfile will be loaded and interpreted as the value of the variable.\n\nThis hint should be set before a gamepad is opened.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_GDK_TEXTINPUT_DEFAULT_TEXT",
        short_name: "GDK_TEXTINPUT_DEFAULT_TEXT",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_GDK_TEXTINPUT_DEFAULT_TEXT) },
        doc: Some("This variable sets the default text of the TextInput window on GDK\nplatforms.\n\nThis hint is available only if SDL_GDK_TEXTINPUT defined.\n\nThis hint should be set before calling [`SDL_StartTextInput()`]\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_GDK_TEXTINPUT_DESCRIPTION",
        short_name: "GDK_TEXTINPUT_DESCRIPTION",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_GDK_TEXTINPUT_DESCRIPTION) },
        doc: Some("This variable sets the description of the TextInput window on GDK\nplatforms.\n\nThis hint is available only if SDL_GDK_TEXTINPUT defined.\n\nThis hint should be set before calling [`SDL_StartTextInput()`]\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_GDK_TEXTINPUT_MAX_LENGTH",
        short_name: "GDK_TEXTINPUT_MAX_LENGTH",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_GDK_TEXTINPUT_MAX_LENGTH) },
        doc: Some("This variable sets the maximum input length of the TextInput window on GDK\nplatforms.\n\nThe value must be a stringified integer, for example \"10\" to allow for up\nto 10 characters of text input.\n\nThis hint is available only if SDL_GDK_TEXTINPUT defined.\n\nThis hint should be set before calling [`SDL_StartTextInput()`]\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_GDK_TEXTINPUT_SCOPE",
        short_name: "GDK_TEXTINPUT_SCOPE",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_GDK_TEXTINPUT_SCOPE) },
        doc: Some("This variable sets the input scope of the TextInput window on GDK\nplatforms.\n\nSet this hint to change the XGameUiTextEntryInputScope value that will be\npassed to the window creation function. The value must be a stringified\ninteger, for example \"0\" for XGameUiTextEntryInputScope::Default.\n\nThis hint is available only if SDL_GDK_TEXTINPUT defined.\n\nThis hint should be set before calling [`SDL_StartTextInput()`]\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_GDK_TEXTINPUT_TITLE",
        short_name: "GDK_TEXTINPUT_TITLE",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_GDK_TEXTINPUT_TITLE) },
        doc: Some("This variable sets the title of the TextInput window on GDK platforms.\n\nThis hint is available only if SDL_GDK_TEXTINPUT defined.\n\nThis hint should be set before calling [`SDL_StartTextInput()`]\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_HIDAPI_LIBUSB",
        short_name: "HIDAPI_LIBUSB",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_HIDAPI_LIBUSB) },
        doc: Some("A variable to control whether HIDAPI uses libusb for device access.\n\nBy default libusb will only be used for a few devices that require direct\nUSB access, and this can be controlled with\n[`SDL_HINT_HIDAPI_LIBUSB_WHITELIST`].\n\nThe variable can be set to the following values:\n\n- \"0\": HIDAPI will not use libusb for device access.\n- \"1\": HIDAPI will use libusb for device access if available. (default)\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_HIDAPI_LIBUSB_WHITELIST",
        short_name: "HIDAPI_LIBUSB_WHITELIST",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_HIDAPI_LIBUSB_WHITELIST) },
        doc: Some("A variable to control whether HIDAPI uses libusb only for whitelisted\ndevices.\n\nBy default libusb will only be used for a few devices that require direct\nUSB access.\n\nThe variable can be set to the following values:\n\n- \"0\": HIDAPI will use libusb for all device access.\n- \"1\": HIDAPI will use libusb only for whitelisted devices. (default)\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_HIDAPI_UDEV",
        short_name: "HIDAPI_UDEV",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_HIDAPI_UDEV) },
        doc: Some("A variable to control whether HIDAPI uses udev for device detection.\n\nThe variable can be set to the following values:\n\n- \"0\": HIDAPI will poll for device changes.\n- \"1\": HIDAPI will use udev for device detection. (default)\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_GPU_DRIVER",
        short_name: "GPU_DRIVER",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_GPU_DRIVER) },
        doc: Some("A variable that specifies a GPU backend to use.\n\nBy default, SDL will try all available GPU backends in a reasonable order\nuntil it finds one that can work, but this hint allows the app or user to\nforce a specific target, such as \"direct3d11\" if, say, your hardware\nsupports D3D12 but want to try using D3D11 instead.\n\nThis hint should be set before any GPU functions are called.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_HIDAPI_ENUMERATE_ONLY_CONTROLLERS",
        short_name: "HIDAPI_ENUMERATE_ONLY_CONTROLLERS",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_HIDAPI_ENUMERATE_ONLY_CONTROLLERS) },
        doc: Some("A variable to control whether [`SDL_hid_enumerate()`] enumerates all HID\ndevices or only controllers.\n\nThe variable can be set to the following values:\n\n- \"0\": [`SDL_hid_enumerate()`] will enumerate all HID devices.\n- \"1\": [`SDL_hid_enumerate()`] will only enumerate controllers. (default)\n\nBy default SDL will only enumerate controllers, to reduce risk of hanging\nor crashing on devices with bad drivers and avoiding macOS keyboard capture\npermission prompts.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_HIDAPI_IGNORE_DEVICES",
        short_name: "HIDAPI_IGNORE_DEVICES",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_HIDAPI_IGNORE_DEVICES) },
        doc: Some("A variable containing a list of devices to ignore in [`SDL_hid_enumerate()`].\n\nThe format of the string is a comma separated list of USB VID/PID pairs in\nhexadecimal form, e.g.\n\n`0xAAAA/0xBBBB,0xCCCC/0xDDDD`\n\nFor example, to ignore the Shanwan DS3 controller and any Valve controller,\nyou might use the string \"0x2563/0x0523,0x28de/0x0000\"\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_IME_IMPLEMENTED_UI",
        short_name: "IME_IMPLEMENTED_UI",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_IME_IMPLEMENTED_UI) },
        doc: Some("A variable describing what IME UI elements the application can display.\n\nBy default IME UI is handled using native components by the OS where\npossible, however this can interfere with or not be visible when exclusive\nfullscreen mode is used.\n\nThe variable can be set to a comma separated list containing the following\nitems:\n\n- \"none\" or \"0\": The application can't render any IME elements, and native\nUI should be used. (default)\n- \"composition\": The application handles [`SDL_EVENT_TEXT_EDITING`] events and\ncan render the composition text.\n- \"candidates\": The application handles [`SDL_EVENT_TEXT_EDITING_CANDIDATES`]\nand can render the candidate list.\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_IOS_HIDE_HOME_INDICATOR",
        short_name: "IOS_HIDE_HOME_INDICATOR",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_IOS_HIDE_HOME_INDICATOR) },
        doc: Some("A variable controlling whether the home indicator bar on iPhone X should be\nhidden.\n\nThe variable can be set to the following values:\n\n- \"0\": The indicator bar is not hidden. (default for windowed applications)\n- \"1\": The indicator bar is hidden and is shown when the screen is touched\n(useful for movie playback applications).\n- \"2\": The indicator bar is dim and the first swipe makes it visible and\nthe second swipe performs the \"home\" action. (default for fullscreen\napplications)\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS",
        short_name: "JOYSTICK_ALLOW_BACKGROUND_EVENTS",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS) },
        doc: Some("A variable that lets you enable joystick (and gamecontroller) events even\nwhen your app is in the background.\n\nThe variable can be set to the following values:\n\n- \"0\": Disable joystick & gamecontroller input events when the application\nis in the background. (default)\n- \"1\": Enable joystick & gamecontroller input events when the application\nis in the background.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES",
        short_name: "JOYSTICK_ARCADESTICK_DEVICES",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES) },
        doc: Some("A variable containing a list of arcade stick style controllers.\n\nThe format of the string is a comma separated list of USB VID/PID pairs in\nhexadecimal form, e.g.\n\n`0xAAAA/0xBBBB,0xCCCC/0xDDDD`\n\nThe variable can also take the form of \"@file\", in which case the named\nfile will be loaded and interpreted as the value of the variable.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES_EXCLUDED",
        short_name: "JOYSTICK_ARCADESTICK_DEVICES_EXCLUDED",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES_EXCLUDED) },
        doc: Some("A variable containing a list of devices that are not arcade stick style\ncontrollers.\n\nThis will override [`SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES`] and the built in\ndevice list.\n\nThe format of the string is a comma separated list of USB VID/PID pairs in\nhexadecimal form, e.g.\n\n`0xAAAA/0xBBBB,0xCCCC/0xDDDD`\n\nThe variable can also take the form of \"@file\", in which case the named\nfile will be loaded and interpreted as the value of the variable.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_BLACKLIST_DEVICES",
        short_name: "JOYSTICK_BLACKLIST_DEVICES",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_BLACKLIST_DEVICES) },
        doc: Some("A variable containing a list of devices that should not be considered\njoysticks.\n\nThe format of the string is a comma separated list of USB VID/PID pairs in\nhexadecimal form, e.g.\n\n`0xAAAA/0xBBBB,0xCCCC/0xDDDD`\n\nThe variable can also take the form of \"@file\", in which case the named\nfile will be loaded and interpreted as the value of the variable.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_BLACKLIST_DEVICES_EXCLUDED",
        short_name: "JOYSTICK_BLACKLIST_DEVICES_EXCLUDED",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_BLACKLIST_DEVICES_EXCLUDED) },
        doc: Some("A variable containing a list of devices that should be considered\njoysticks.\n\nThis will override [`SDL_HINT_JOYSTICK_BLACKLIST_DEVICES`] and the built in\ndevice list.\n\nThe format of the string is a comma separated list of USB VID/PID pairs in\nhexadecimal form, e.g.\n\n`0xAAAA/0xBBBB,0xCCCC/0xDDDD`\n\nThe variable can also take the form of \"@file\", in which case the named\nfile will be loaded and interpreted as the value of the variable.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_DEVICE",
        short_name: "JOYSTICK_DEVICE",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_DEVICE) },
        doc: Some("A variable containing a comma separated list of devices to open as\njoysticks.\n\nThis variable is currently only used by the Linux joystick driver.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_ENHANCED_REPORTS",
        short_name: "JOYSTICK_ENHANCED_REPORTS",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_ENHANCED_REPORTS) },
        doc: Some("A variable controlling whether enhanced reports should be used for\ncontrollers when using the HIDAPI driver.\n\nEnhanced reports allow rumble and effects on Bluetooth PlayStation\ncontrollers and gyro on Nintendo Switch controllers, but break Windows\nDirectInput for other applications that don't use SDL.\n\nOnce enhanced reports are enabled, they can't be disabled on PlayStation\ncontrollers without power cycling the controller.\n\nThe variable can be set to the following values:\n\n- \"0\": enhanced reports are not enabled.\n- \"1\": enhanced reports are enabled. (default)\n- \"auto\": enhanced features are advertised to the application, but SDL\ndoesn't change the controller report mode unless the application uses\nthem.\n\nThis hint can be enabled anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES",
        short_name: "JOYSTICK_FLIGHTSTICK_DEVICES",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES) },
        doc: Some("A variable containing a list of flightstick style controllers.\n\nThe format of the string is a comma separated list of USB VID/PID pairs in\nhexadecimal form, e.g.\n\n`0xAAAA/0xBBBB,0xCCCC/0xDDDD`\n\nThe variable can also take the form of @file, in which case the named file\nwill be loaded and interpreted as the value of the variable.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES_EXCLUDED",
        short_name: "JOYSTICK_FLIGHTSTICK_DEVICES_EXCLUDED",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES_EXCLUDED) },
        doc: Some("A variable containing a list of devices that are not flightstick style\ncontrollers.\n\nThis will override [`SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES`] and the built in\ndevice list.\n\nThe format of the string is a comma separated list of USB VID/PID pairs in\nhexadecimal form, e.g.\n\n`0xAAAA/0xBBBB,0xCCCC/0xDDDD`\n\nThe variable can also take the form of \"@file\", in which case the named\nfile will be loaded and interpreted as the value of the variable.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_GAMEINPUT",
        short_name: "JOYSTICK_GAMEINPUT",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_GAMEINPUT) },
        doc: Some("A variable controlling whether GameInput should be used for controller\nhandling on Windows.\n\nThe variable can be set to the following values:\n\n- \"0\": GameInput is not used.\n- \"1\": GameInput is used.\n\nThe default is \"1\" on GDK platforms, and \"0\" otherwise.\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_GAMECUBE_DEVICES",
        short_name: "JOYSTICK_GAMECUBE_DEVICES",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_GAMECUBE_DEVICES) },
        doc: Some("A variable containing a list of devices known to have a GameCube form\nfactor.\n\nThe format of the string is a comma separated list of USB VID/PID pairs in\nhexadecimal form, e.g.\n\n`0xAAAA/0xBBBB,0xCCCC/0xDDDD`\n\nThe variable can also take the form of \"@file\", in which case the named\nfile will be loaded and interpreted as the value of the variable.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_GAMECUBE_DEVICES_EXCLUDED",
        short_name: "JOYSTICK_GAMECUBE_DEVICES_EXCLUDED",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_GAMECUBE_DEVICES_EXCLUDED) },
        doc: Some("A variable containing a list of devices known not to have a GameCube form\nfactor.\n\nThis will override [`SDL_HINT_JOYSTICK_GAMECUBE_DEVICES`] and the built in\ndevice list.\n\nThe format of the string is a comma separated list of USB VID/PID pairs in\nhexadecimal form, e.g.\n\n`0xAAAA/0xBBBB,0xCCCC/0xDDDD`\n\nThe variable can also take the form of \"@file\", in which case the named\nfile will be loaded and interpreted as the value of the variable.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_HIDAPI",
        short_name: "JOYSTICK_HIDAPI",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_HIDAPI) },
        doc: Some("A variable controlling whether the HIDAPI joystick drivers should be used.\n\nThe variable can be set to the following values:\n\n- \"0\": HIDAPI drivers are not used.\n- \"1\": HIDAPI drivers are used. (default)\n\nThis variable is the default for all drivers, but can be overridden by the\nhints for specific drivers below.\n\nThis hint should be set before initializing joysticks and gamepads.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_HIDAPI_COMBINE_JOY_CONS",
        short_name: "JOYSTICK_HIDAPI_COMBINE_JOY_CONS",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_HIDAPI_COMBINE_JOY_CONS) },
        doc: Some("A variable controlling whether Nintendo Switch Joy-Con controllers will be\ncombined into a single Pro-like controller when using the HIDAPI driver.\n\nThe variable can be set to the following values:\n\n- \"0\": Left and right Joy-Con controllers will not be combined and each\nwill be a mini-gamepad.\n- \"1\": Left and right Joy-Con controllers will be combined into a single\ncontroller. (default)\n\nThis hint should be set before initializing joysticks and gamepads.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE",
        short_name: "JOYSTICK_HIDAPI_GAMECUBE",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE) },
        doc: Some("A variable controlling whether the HIDAPI driver for Nintendo GameCube\ncontrollers should be used.\n\nThe variable can be set to the following values:\n\n- \"0\": HIDAPI driver is not used.\n- \"1\": HIDAPI driver is used.\n\nThe default is the value of [`SDL_HINT_JOYSTICK_HIDAPI`]\n\nThis hint should be set before initializing joysticks and gamepads.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE_RUMBLE_BRAKE",
        short_name: "JOYSTICK_HIDAPI_GAMECUBE_RUMBLE_BRAKE",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE_RUMBLE_BRAKE) },
        doc: Some("A variable controlling whether rumble is used to implement the GameCube\ncontroller's 3 rumble modes, Stop(0), Rumble(1), and StopHard(2).\n\nThis is useful for applications that need full compatibility for things\nlike ADSR envelopes. - Stop is implemented by setting low_frequency_rumble\nto 0 and high_frequency_rumble >0 - Rumble is both at any arbitrary value -\nStopHard is implemented by setting both low_frequency_rumble and\nhigh_frequency_rumble to 0\n\nThe variable can be set to the following values:\n\n- \"0\": Normal rumble behavior is behavior is used. (default)\n- \"1\": Proper GameCube controller rumble behavior is used.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_HIDAPI_JOY_CONS",
        short_name: "JOYSTICK_HIDAPI_JOY_CONS",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_HIDAPI_JOY_CONS) },
        doc: Some("A variable controlling whether the HIDAPI driver for Nintendo Switch\nJoy-Cons should be used.\n\nThe variable can be set to the following values:\n\n- \"0\": HIDAPI driver is not used.\n- \"1\": HIDAPI driver is used.\n\nThe default is the value of [`SDL_HINT_JOYSTICK_HIDAPI`].\n\nThis hint should be set before initializing joysticks and gamepads.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_HIDAPI_JOYCON_HOME_LED",
        short_name: "JOYSTICK_HIDAPI_JOYCON_HOME_LED",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_HIDAPI_JOYCON_HOME_LED) },
        doc: Some("A variable controlling whether the Home button LED should be turned on when\na Nintendo Switch Joy-Con controller is opened.\n\nThe variable can be set to the following values:\n\n- \"0\": home button LED is turned off\n- \"1\": home button LED is turned on\n\nBy default the Home button LED state is not changed. This hint can also be\nset to a floating point value between 0.0 and 1.0 which controls the\nbrightness of the Home button LED.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_HIDAPI_LUNA",
        short_name: "JOYSTICK_HIDAPI_LUNA",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_HIDAPI_LUNA) },
        doc: Some("A variable controlling whether the HIDAPI driver for Amazon Luna\ncontrollers connected via Bluetooth should be used.\n\nThe variable can be set to the following values:\n\n- \"0\": HIDAPI driver is not used.\n- \"1\": HIDAPI driver is used.\n\nThe default is the value of [`SDL_HINT_JOYSTICK_HIDAPI`].\n\nThis hint should be set before initializing joysticks and gamepads.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_HIDAPI_NINTENDO_CLASSIC",
        short_name: "JOYSTICK_HIDAPI_NINTENDO_CLASSIC",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_HIDAPI_NINTENDO_CLASSIC) },
        doc: Some("A variable controlling whether the HIDAPI driver for Nintendo Online\nclassic controllers should be used.\n\nThe variable can be set to the following values:\n\n- \"0\": HIDAPI driver is not used.\n- \"1\": HIDAPI driver is used.\n\nThe default is the value of [`SDL_HINT_JOYSTICK_HIDAPI`].\n\nThis hint should be set before initializing joysticks and gamepads.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_HIDAPI_PS3",
        short_name: "JOYSTICK_HIDAPI_PS3",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_HIDAPI_PS3) },
        doc: Some("A variable controlling whether the HIDAPI driver for PS3 controllers should\nbe used.\n\nThe variable can be set to the following values:\n\n- \"0\": HIDAPI driver is not used.\n- \"1\": HIDAPI driver is used.\n\nThe default is the value of [`SDL_HINT_JOYSTICK_HIDAPI`] on macOS, and \"0\" on\nother platforms.\n\nFor official Sony driver (sixaxis.sys) use\n[`SDL_HINT_JOYSTICK_HIDAPI_PS3_SIXAXIS_DRIVER`]. See\n<https://github.com/ViGEm/DsHidMini> for an alternative driver on Windows.\n\nThis hint should be set before initializing joysticks and gamepads.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_HIDAPI_PS3_SIXAXIS_DRIVER",
        short_name: "JOYSTICK_HIDAPI_PS3_SIXAXIS_DRIVER",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_HIDAPI_PS3_SIXAXIS_DRIVER) },
        doc: Some("A variable controlling whether the Sony driver (sixaxis.sys) for PS3\ncontrollers (Sixaxis/DualShock 3) should be used.\n\nThe variable can be set to the following values:\n\n- \"0\": Sony driver (sixaxis.sys) is not used.\n- \"1\": Sony driver (sixaxis.sys) is used.\n\nThe default value is 0.\n\nThis hint should be set before initializing joysticks and gamepads.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_HIDAPI_PS4",
        short_name: "JOYSTICK_HIDAPI_PS4",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_HIDAPI_PS4) },
        doc: Some("A variable controlling whether the HIDAPI driver for PS4 controllers should\nbe used.\n\nThe variable can be set to the following values:\n\n- \"0\": HIDAPI driver is not used.\n- \"1\": HIDAPI driver is used.\n\nThe default is the value of [`SDL_HINT_JOYSTICK_HIDAPI`].\n\nThis hint should be set before initializing joysticks and gamepads.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_HIDAPI_PS4_REPORT_INTERVAL",
        short_name: "JOYSTICK_HIDAPI_PS4_REPORT_INTERVAL",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_HIDAPI_PS4_REPORT_INTERVAL) },
        doc: Some("A variable controlling the update rate of the PS4 controller over Bluetooth\nwhen using the HIDAPI driver.\n\nThis defaults to 4 ms, to match the behavior over USB, and to be more\nfriendly to other Bluetooth devices and older Bluetooth hardware on the\ncomputer. It can be set to \"1\" (1000Hz), \"2\" (500Hz) and \"4\" (250Hz)\n\nThis hint can be set anytime, but only takes effect when extended input\nreports are enabled.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_HIDAPI_PS5",
        short_name: "JOYSTICK_HIDAPI_PS5",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_HIDAPI_PS5) },
        doc: Some("A variable controlling whether the HIDAPI driver for PS5 controllers should\nbe used.\n\nThe variable can be set to the following values:\n\n- \"0\": HIDAPI driver is not used.\n- \"1\": HIDAPI driver is used.\n\nThe default is the value of [`SDL_HINT_JOYSTICK_HIDAPI`].\n\nThis hint should be set before initializing joysticks and gamepads.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_HIDAPI_PS5_PLAYER_LED",
        short_name: "JOYSTICK_HIDAPI_PS5_PLAYER_LED",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_HIDAPI_PS5_PLAYER_LED) },
        doc: Some("A variable controlling whether the player LEDs should be lit to indicate\nwhich player is associated with a PS5 controller.\n\nThe variable can be set to the following values:\n\n- \"0\": player LEDs are not enabled.\n- \"1\": player LEDs are enabled. (default)\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_HIDAPI_SHIELD",
        short_name: "JOYSTICK_HIDAPI_SHIELD",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_HIDAPI_SHIELD) },
        doc: Some("A variable controlling whether the HIDAPI driver for NVIDIA SHIELD\ncontrollers should be used.\n\nThe variable can be set to the following values:\n\n- \"0\": HIDAPI driver is not used.\n- \"1\": HIDAPI driver is used.\n\nThe default is the value of [`SDL_HINT_JOYSTICK_HIDAPI`].\n\nThis hint should be set before initializing joysticks and gamepads.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_HIDAPI_STADIA",
        short_name: "JOYSTICK_HIDAPI_STADIA",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_HIDAPI_STADIA) },
        doc: Some("A variable controlling whether the HIDAPI driver for Google Stadia\ncontrollers should be used.\n\nThe variable can be set to the following values:\n\n- \"0\": HIDAPI driver is not used.\n- \"1\": HIDAPI driver is used.\n\nThe default is the value of [`SDL_HINT_JOYSTICK_HIDAPI`].\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_HIDAPI_STEAM",
        short_name: "JOYSTICK_HIDAPI_STEAM",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_HIDAPI_STEAM) },
        doc: Some("A variable controlling whether the HIDAPI driver for Bluetooth Steam\nControllers should be used.\n\nThe variable can be set to the following values:\n\n- \"0\": HIDAPI driver is not used. (default)\n- \"1\": HIDAPI driver is used for Steam Controllers, which requires\nBluetooth access and may prompt the user for permission on iOS and\nAndroid.\n\nThis hint should be set before initializing joysticks and gamepads.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_HIDAPI_STEAM_HOME_LED",
        short_name: "JOYSTICK_HIDAPI_STEAM_HOME_LED",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_HIDAPI_STEAM_HOME_LED) },
        doc: Some("A variable controlling whether the Steam button LED should be turned on\nwhen a Steam controller is opened.\n\nThe variable can be set to the following values:\n\n- \"0\": Steam button LED is turned off.\n- \"1\": Steam button LED is turned on.\n\nBy default the Steam button LED state is not changed. This hint can also be\nset to a floating point value between 0.0 and 1.0 which controls the\nbrightness of the Steam button LED.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_HIDAPI_STEAMDECK",
        short_name: "JOYSTICK_HIDAPI_STEAMDECK",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_HIDAPI_STEAMDECK) },
        doc: Some("A variable controlling whether the HIDAPI driver for the Steam Deck builtin\ncontroller should be used.\n\nThe variable can be set to the following values:\n\n- \"0\": HIDAPI driver is not used.\n- \"1\": HIDAPI driver is used.\n\nThe default is the value of [`SDL_HINT_JOYSTICK_HIDAPI`].\n\nThis hint should be set before initializing joysticks and gamepads.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_HIDAPI_STEAM_HORI",
        short_name: "JOYSTICK_HIDAPI_STEAM_HORI",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_HIDAPI_STEAM_HORI) },
        doc: Some("A variable controlling whether the HIDAPI driver for HORI licensed Steam\ncontrollers should be used.\n\nThis variable can be set to the following values: \"0\" - HIDAPI driver is\nnot used \"1\" - HIDAPI driver is used\n\nThe default is the value of [`SDL_HINT_JOYSTICK_HIDAPI`]\n"),
        available_since: None,
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_HIDAPI_SWITCH",
        short_name: "JOYSTICK_HIDAPI_SWITCH",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_HIDAPI_SWITCH) },
        doc: Some("A variable controlling whether the HIDAPI driver for Nintendo Switch\ncontrollers should be used.\n\nThe variable can be set to the following values:\n\n- \"0\": HIDAPI driver is not used.\n- \"1\": HIDAPI driver is used.\n\nThe default is the value of [`SDL_HINT_JOYSTICK_HIDAPI`].\n\nThis hint should be set before initializing joysticks and gamepads.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_HIDAPI_SWITCH_HOME_LED",
        short_name: "JOYSTICK_HIDAPI_SWITCH_HOME_LED",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_HIDAPI_SWITCH_HOME_LED) },
        doc: Some("A variable controlling whether the Home button LED should be turned on when\na Nintendo Switch Pro controller is opened.\n\nThe variable can be set to the following values:\n\n- \"0\": Home button LED is turned off.\n- \"1\": Home button LED is turned on.\n\nBy default the Home button LED state is not changed. This hint can also be\nset to a floating point value between 0.0 and 1.0 which controls the\nbrightness of the Home button LED.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED",
        short_name: "JOYSTICK_HIDAPI_SWITCH_PLAYER_LED",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED) },
        doc: Some("A variable controlling whether the player LEDs should be lit to indicate\nwhich player is associated with a Nintendo Switch controller.\n\nThe variable can be set to the following values:\n\n- \"0\": Player LEDs are not enabled.\n- \"1\": Player LEDs are enabled. (default)\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS",
        short_name: "JOYSTICK_HIDAPI_VERTICAL_JOY_CONS",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS) },
        doc: Some("A variable controlling whether Nintendo Switch Joy-Con controllers will be\nin vertical mode when using the HIDAPI driver.\n\nThe variable can be set to the following values:\n\n- \"0\": Left and right Joy-Con controllers will not be in vertical mode.\n(default)\n- \"1\": Left and right Joy-Con controllers will be in vertical mode.\n\nThis hint should be set before opening a Joy-Con controller.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_HIDAPI_WII",
        short_name: "JOYSTICK_HIDAPI_WII",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_HIDAPI_WII) },
        doc: Some("A variable controlling whether the HIDAPI driver for Nintendo Wii and Wii U\ncontrollers should be used.\n\nThe variable can be set to the following values:\n\n- \"0\": HIDAPI driver is not used.\n- \"1\": HIDAPI driver is used.\n\nThis driver doesn't work with the dolphinbar, so the default is false for\nnow.\n\nThis hint should be set before initializing joysticks and gamepads.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_HIDAPI_WII_PLAYER_LED",
        short_name: "JOYSTICK_HIDAPI_WII_PLAYER_LED",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_HIDAPI_WII_PLAYER_LED) },
        doc: Some("A variable controlling whether the player LEDs should be lit to indicate\nwhich player is associated with a Wii controller.\n\nThe variable can be set to the following values:\n\n- \"0\": Player LEDs are not enabled.\n- \"1\": Player LEDs are enabled. (default)\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_HIDAPI_XBOX",
        short_name: "JOYSTICK_HIDAPI_XBOX",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_HIDAPI_XBOX) },
        doc: Some("A variable controlling whether the HIDAPI driver for XBox controllers\nshould be used.\n\nThe variable can be set to the following values:\n\n- \"0\": HIDAPI driver is not used.\n- \"1\": HIDAPI driver is used.\n\nThe default is \"0\" on Windows, otherwise the value of\n[`SDL_HINT_JOYSTICK_HIDAPI`]\n\nThis hint should be set before initializing joysticks and gamepads.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_HIDAPI_XBOX_360",
        short_name: "JOYSTICK_HIDAPI_XBOX_360",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_HIDAPI_XBOX_360) },
        doc: Some("A variable controlling whether the HIDAPI driver for XBox 360 controllers\nshould be used.\n\nThe variable can be set to the following values:\n\n- \"0\": HIDAPI driver is not used.\n- \"1\": HIDAPI driver is used.\n\nThe default is the value of [`SDL_HINT_JOYSTICK_HIDAPI_XBOX`]\n\nThis hint should be set before initializing joysticks and gamepads.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED",
        short_name: "JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED) },
        doc: Some("A variable controlling whether the player LEDs should be lit to indicate\nwhich player is associated with an Xbox 360 controller.\n\nThe variable can be set to the following values:\n\n- \"0\": Player LEDs are not enabled.\n- \"1\": Player LEDs are enabled. (default)\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_WIRELESS",
        short_name: "JOYSTICK_HIDAPI_XBOX_360_WIRELESS",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_WIRELESS) },
        doc: Some("A variable controlling whether the HIDAPI driver for XBox 360 wireless\ncontrollers should be used.\n\nThe variable can be set to the following values:\n\n- \"0\": HIDAPI driver is not used.\n- \"1\": HIDAPI driver is used.\n\nThe default is the value of [`SDL_HINT_JOYSTICK_HIDAPI_XBOX_360`]\n\nThis hint should be set before initializing joysticks and gamepads.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE",
        short_name: "JOYSTICK_HIDAPI_XBOX_ONE",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE) },
        doc: Some("A variable controlling whether the HIDAPI driver for XBox One controllers\nshould be used.\n\nThe variable can be set to the following values:\n\n- \"0\": HIDAPI driver is not used.\n- \"1\": HIDAPI driver is used.\n\nThe default is the value of [`SDL_HINT_JOYSTICK_HIDAPI_XBOX`].\n\nThis hint should be set before initializing joysticks and gamepads.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED",
        short_name: "JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED) },
        doc: Some("A variable controlling whether the Home button LED should be turned on when\nan Xbox One controller is opened.\n\nThe variable can be set to the following values:\n\n- \"0\": Home button LED is turned off.\n- \"1\": Home button LED is turned on.\n\nBy default the Home button LED state is not changed. This hint can also be\nset to a floating point value between 0.0 and 1.0 which controls the\nbrightness of the Home button LED. The default brightness is 0.4.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_IOKIT",
        short_name: "JOYSTICK_IOKIT",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_IOKIT) },
        doc: Some("A variable controlling whether IOKit should be used for controller\nhandling.\n\nThe variable can be set to the following values:\n\n- \"0\": IOKit is not used.\n- \"1\": IOKit is used. (default)\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_LINUX_CLASSIC",
        short_name: "JOYSTICK_LINUX_CLASSIC",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_LINUX_CLASSIC) },
        doc: Some("A variable controlling whether to use the classic /dev/input/js* joystick\ninterface or the newer /dev/input/event* joystick interface on Linux.\n\nThe variable can be set to the following values:\n\n- \"0\": Use /dev/input/event* (default)\n- \"1\": Use /dev/input/js*\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_LINUX_DEADZONES",
        short_name: "JOYSTICK_LINUX_DEADZONES",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_LINUX_DEADZONES) },
        doc: Some("A variable controlling whether joysticks on Linux adhere to their\nHID-defined deadzones or return unfiltered values.\n\nThe variable can be set to the following values:\n\n- \"0\": Return unfiltered joystick axis values. (default)\n- \"1\": Return axis values with deadzones taken into account.\n\nThis hint should be set before a controller is opened.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_LINUX_DIGITAL_HATS",
        short_name: "JOYSTICK_LINUX_DIGITAL_HATS",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_LINUX_DIGITAL_HATS) },
        doc: Some("A variable controlling whether joysticks on Linux will always treat 'hat'\naxis inputs (ABS_HAT0X - ABS_HAT3Y) as 8-way digital hats without checking\nwhether they may be analog.\n\nThe variable can be set to the following values:\n\n- \"0\": Only map hat axis inputs to digital hat outputs if the input axes\nappear to actually be digital. (default)\n- \"1\": Always handle the input axes numbered ABS_HAT0X to ABS_HAT3Y as\ndigital hats.\n\nThis hint should be set before a controller is opened.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_LINUX_HAT_DEADZONES",
        short_name: "JOYSTICK_LINUX_HAT_DEADZONES",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_LINUX_HAT_DEADZONES) },
        doc: Some("A variable controlling whether digital hats on Linux will apply deadzones\nto their underlying input axes or use unfiltered values.\n\nThe variable can be set to the following values:\n\n- \"0\": Return digital hat values based on unfiltered input axis values.\n- \"1\": Return digital hat values with deadzones on the input axes taken\ninto account. (default)\n\nThis hint should be set before a controller is opened.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_MFI",
        short_name: "JOYSTICK_MFI",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_MFI) },
        doc: Some("A variable controlling whether GCController should be used for controller\nhandling.\n\nThe variable can be set to the following values:\n\n- \"0\": GCController is not used.\n- \"1\": GCController is used. (default)\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_RAWINPUT",
        short_name: "JOYSTICK_RAWINPUT",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_RAWINPUT) },
        doc: Some("A variable controlling whether the RAWINPUT joystick drivers should be used\nfor better handling XInput-capable devices.\n\nThe variable can be set to the following values:\n\n- \"0\": RAWINPUT drivers are not used.\n- \"1\": RAWINPUT drivers are used. (default)\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_RAWINPUT_CORRELATE_XINPUT",
        short_name: "JOYSTICK_RAWINPUT_CORRELATE_XINPUT",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_RAWINPUT_CORRELATE_XINPUT) },
        doc: Some("A variable controlling whether the RAWINPUT driver should pull correlated\ndata from XInput.\n\nThe variable can be set to the following values:\n\n- \"0\": RAWINPUT driver will only use data from raw input APIs.\n- \"1\": RAWINPUT driver will also pull data from XInput and\nWindows.Gaming.Input, providing better trigger axes, guide button\npresses, and rumble support for Xbox controllers. (default)\n\nThis hint should be set before a gamepad is opened.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_ROG_CHAKRAM",
        short_name: "JOYSTICK_ROG_CHAKRAM",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_ROG_CHAKRAM) },
        doc: Some("A variable controlling whether the ROG Chakram mice should show up as\njoysticks.\n\nThe variable can be set to the following values:\n\n- \"0\": ROG Chakram mice do not show up as joysticks. (default)\n- \"1\": ROG Chakram mice show up as joysticks.\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_THREAD",
        short_name: "JOYSTICK_THREAD",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_THREAD) },
        doc: Some("A variable controlling whether a separate thread should be used for\nhandling joystick detection and raw input messages on Windows.\n\nThe variable can be set to the following values:\n\n- \"0\": A separate thread is not used.\n- \"1\": A separate thread is used for handling raw input messages. (default)\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_THROTTLE_DEVICES",
        short_name: "JOYSTICK_THROTTLE_DEVICES",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_THROTTLE_DEVICES) },
        doc: Some("A variable containing a list of throttle style controllers.\n\nThe format of the string is a comma separated list of USB VID/PID pairs in\nhexadecimal form, e.g.\n\n`0xAAAA/0xBBBB,0xCCCC/0xDDDD`\n\nThe variable can also take the form of \"@file\", in which case the named\nfile will be loaded and interpreted as the value of the variable.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_THROTTLE_DEVICES_EXCLUDED",
        short_name: "JOYSTICK_THROTTLE_DEVICES_EXCLUDED",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_THROTTLE_DEVICES_EXCLUDED) },
        doc: Some("A variable containing a list of devices that are not throttle style\ncontrollers.\n\nThis will override [`SDL_HINT_JOYSTICK_THROTTLE_DEVICES`] and the built in\ndevice list.\n\nThe format of the string is a comma separated list of USB VID/PID pairs in\nhexadecimal form, e.g.\n\n`0xAAAA/0xBBBB,0xCCCC/0xDDDD`\n\nThe variable can also take the form of \"@file\", in which case the named\nfile will be loaded and interpreted as the value of the variable.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_WGI",
        short_name: "JOYSTICK_WGI",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_WGI) },
        doc: Some("A variable controlling whether Windows.Gaming.Input should be used for\ncontroller handling.\n\nThe variable can be set to the following values:\n\n- \"0\": WGI is not used.\n- \"1\": WGI is used. (default)\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_WHEEL_DEVICES",
        short_name: "JOYSTICK_WHEEL_DEVICES",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_WHEEL_DEVICES) },
        doc: Some("A variable containing a list of wheel style controllers.\n\nThe format of the string is a comma separated list of USB VID/PID pairs in\nhexadecimal form, e.g.\n\n`0xAAAA/0xBBBB,0xCCCC/0xDDDD`\n\nThe variable can also take the form of \"@file\", in which case the named\nfile will be loaded and interpreted as the value of the variable.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_WHEEL_DEVICES_EXCLUDED",
        short_name: "JOYSTICK_WHEEL_DEVICES_EXCLUDED",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_WHEEL_DEVICES_EXCLUDED) },
        doc: Some("A variable containing a list of devices that are not wheel style\ncontrollers.\n\nThis will override [`SDL_HINT_JOYSTICK_WHEEL_DEVICES`] and the built in device\nlist.\n\nThe format of the string is a comma separated list of USB VID/PID pairs in\nhexadecimal form, e.g.\n\n`0xAAAA/0xBBBB,0xCCCC/0xDDDD`\n\nThe variable can also take the form of \"@file\", in which case the named\nfile will be loaded and interpreted as the value of the variable.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_ZERO_CENTERED_DEVICES",
        short_name: "JOYSTICK_ZERO_CENTERED_DEVICES",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_ZERO_CENTERED_DEVICES) },
        doc: Some("A variable containing a list of devices known to have all axes centered at\nzero.\n\nThe format of the string is a comma separated list of USB VID/PID pairs in\nhexadecimal form, e.g.\n\n`0xAAAA/0xBBBB,0xCCCC/0xDDDD`\n\nThe variable can also take the form of \"@file\", in which case the named\nfile will be loaded and interpreted as the value of the variable.\n\nThis hint should be set before a controller is opened.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_JOYSTICK_HAPTIC_AXES",
        short_name: "JOYSTICK_HAPTIC_AXES",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_JOYSTICK_HAPTIC_AXES) },
        doc: Some("A variable containing a list of devices and their desired number of haptic\n(force feedback) enabled axis.\n\nThe format of the string is a comma separated list of USB VID/PID pairs in\nhexadecimal form plus the number of desired axes, e.g.\n\n`0xAAAA/0xBBBB/1,0xCCCC/0xDDDD/3`\n\nThis hint supports a \"wildcard\" device that will set the number of haptic\naxes on all initialized haptic devices which were not defined explicitly in\nthis hint.\n\n`0xFFFF/0xFFFF/1`\n\nThis hint should be set before a controller is opened. The number of haptic\naxes won't exceed the number of real axes found on the device.\n\n## Availability\nThis hint is available since SDL 3.2.5.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 5)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_KEYCODE_OPTIONS",
        short_name: "KEYCODE_OPTIONS",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_KEYCODE_OPTIONS) },
        doc: Some("A variable that controls keycode representation in keyboard events.\n\nThis variable is a comma separated set of options for translating keycodes\nin events:\n\n- \"none\": Keycode options are cleared, this overrides other options.\n- \"hide_numpad\": The numpad keysyms will be translated into their\nnon-numpad versions based on the current NumLock state. For example,\nSDLK_KP_4 would become SDLK_4 if [`SDL_KMOD_NUM`] is set in the event\nmodifiers, and SDLK_LEFT if it is unset.\n- \"french_numbers\": The number row on French keyboards is inverted, so\npressing the 1 key would yield the keycode SDLK_1, or '1', instead of\nSDLK_AMPERSAND, or '&'\n- \"latin_letters\": For keyboards using non-Latin letters, such as Russian\nor Thai, the letter keys generate keycodes as though it had an en_US\nlayout. e.g. pressing the key associated with [`SDL_SCANCODE_A`] on a Russian\nkeyboard would yield 'a' instead of a Cyrillic letter.\n\nThe default value for this hint is \"french_numbers,latin_letters\"\n\nSome platforms like Emscripten only provide modified keycodes and the\noptions are not used.\n\nThese options do not affect the return value of [`SDL_GetKeyFromScancode()`] or\n[`SDL_GetScancodeFromKey()`], they just apply to the keycode included in key\nevents.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_KMSDRM_DEVICE_INDEX",
        short_name: "KMSDRM_DEVICE_INDEX",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_KMSDRM_DEVICE_INDEX) },
        doc: Some("A variable that controls what KMSDRM device to use.\n\nSDL might open something like \"/dev/dri/cardNN\" to access KMSDRM\nfunctionality, where \"NN\" is a device index number. SDL makes a guess at\nthe best index to use (usually zero), but the app or user can set this hint\nto a number between 0 and 99 to force selection.\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_KMSDRM_REQUIRE_DRM_MASTER",
        short_name: "KMSDRM_REQUIRE_DRM_MASTER",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_KMSDRM_REQUIRE_DRM_MASTER) },
        doc: Some("A variable that controls whether SDL requires DRM master access in order to\ninitialize the KMSDRM video backend.\n\nThe DRM subsystem has a concept of a \"DRM master\" which is a DRM client\nthat has the ability to set planes, set cursor, etc. When SDL is DRM\nmaster, it can draw to the screen using the SDL rendering APIs. Without DRM\nmaster, SDL is still able to process input and query attributes of attached\ndisplays, but it cannot change display state or draw to the screen\ndirectly.\n\nIn some cases, it can be useful to have the KMSDRM backend even if it\ncannot be used for rendering. An app may want to use SDL for input\nprocessing while using another rendering API (such as an MMAL overlay on\nRaspberry Pi) or using its own code to render to DRM overlays that SDL\ndoesn't support.\n\nThe variable can be set to the following values:\n\n- \"0\": SDL will allow usage of the KMSDRM backend without DRM master.\n- \"1\": SDL Will require DRM master to use the KMSDRM backend. (default)\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_LOGGING",
        short_name: "LOGGING",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_LOGGING) },
        doc: Some("A variable controlling the default SDL log levels.\n\nThis variable is a comma separated set of category=level tokens that define\nthe default logging levels for SDL applications.\n\nThe category can be a numeric category, one of \"app\", \"error\", \"assert\",\n\"system\", \"audio\", \"video\", \"render\", \"input\", \"test\", or `*` for any\nunspecified category.\n\nThe level can be a numeric level, one of \"verbose\", \"debug\", \"info\",\n\"warn\", \"error\", \"critical\", or \"quiet\" to disable that category.\n\nYou can omit the category if you want to set the logging level for all\ncategories.\n\nIf this hint isn't set, the default log levels are equivalent to:\n\n`app=info,assert=warn,test=verbose,*=error`\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_MAC_BACKGROUND_APP",
        short_name: "MAC_BACKGROUND_APP",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_MAC_BACKGROUND_APP) },
        doc: Some("A variable controlling whether to force the application to become the\nforeground process when launched on macOS.\n\nThe variable can be set to the following values:\n\n- \"0\": The application is brought to the foreground when launched.\n(default)\n- \"1\": The application may remain in the background when launched.\n\nThis hint needs to be set before [`SDL_Init()`].\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK",
        short_name: "MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK) },
        doc: Some("A variable that determines whether Ctrl+Click should generate a right-click\nevent on macOS.\n\nThe variable can be set to the following values:\n\n- \"0\": Ctrl+Click does not generate a right mouse button click event.\n(default)\n- \"1\": Ctrl+Click generated a right mouse button click event.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_MAC_OPENGL_ASYNC_DISPATCH",
        short_name: "MAC_OPENGL_ASYNC_DISPATCH",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_MAC_OPENGL_ASYNC_DISPATCH) },
        doc: Some("A variable controlling whether dispatching OpenGL context updates should\nblock the dispatching thread until the main thread finishes processing on\nmacOS.\n\nThe variable can be set to the following values:\n\n- \"0\": Dispatching OpenGL context updates will block the dispatching thread\nuntil the main thread finishes processing. (default)\n- \"1\": Dispatching OpenGL context updates will allow the dispatching thread\nto continue execution.\n\nGenerally you want the default, but if you have OpenGL code in a background\nthread on a Mac, and the main thread hangs because it's waiting for that\nbackground thread, but that background thread is also hanging because it's\nwaiting for the main thread to do an update, this might fix your issue.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_MAC_OPTION_AS_ALT",
        short_name: "MAC_OPTION_AS_ALT",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_MAC_OPTION_AS_ALT) },
        doc: Some("A variable controlling whether the Option key on macOS should be remapped\nto act as the Alt key.\n\nThe variable can be set to the following values:\n\n- \"none\": The Option key is not remapped to Alt. (default)\n- \"only_left\": Only the left Option key is remapped to Alt.\n- \"only_right\": Only the right Option key is remapped to Alt.\n- \"both\": Both Option keys are remapped to Alt.\n\nThis will prevent the triggering of key compositions that rely on the\nOption key, but will still send the Alt modifier for keyboard events. In\nthe case that both Alt and Option are pressed, the Option key will be\nignored. This is particularly useful for applications like terminal\nemulators and graphical user interfaces (GUIs) that rely on Alt key\nfunctionality for shortcuts or navigation. This does not apply to\n[`SDL_GetKeyFromScancode`] and only has an effect if IME is enabled.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_MAC_SCROLL_MOMENTUM",
        short_name: "MAC_SCROLL_MOMENTUM",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_MAC_SCROLL_MOMENTUM) },
        doc: Some("A variable controlling whether [`SDL_EVENT_MOUSE_WHEEL`] event values will have\nmomentum on macOS.\n\nThe variable can be set to the following values:\n\n- \"0\": The mouse wheel events will have no momentum. (default)\n- \"1\": The mouse wheel events will have momentum.\n\nThis hint needs to be set before [`SDL_Init()`].\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_MAIN_CALLBACK_RATE",
        short_name: "MAIN_CALLBACK_RATE",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_MAIN_CALLBACK_RATE) },
        doc: Some("Request [`SDL_AppIterate()`] be called at a specific rate.\n\nIf this is set to a number, it represents Hz, so \"60\" means try to iterate\n60 times per second. \"0\" means to iterate as fast as possible. Negative\nvalues are illegal, but reserved, in case they are useful in a future\nrevision of SDL.\n\nThere are other strings that have special meaning. If set to \"waitevent\",\n[`SDL_AppIterate`] will not be called until new event(s) have arrived (and been\nprocessed by [`SDL_AppEvent`]). This can be useful for apps that are completely\nidle except in response to input.\n\nOn some platforms, or if you are using [`SDL_main`] instead of [`SDL_AppIterate`],\nthis hint is ignored. When the hint can be used, it is allowed to be\nchanged at any time.\n\nThis defaults to 0, and specifying NULL for the hint's value will restore\nthe default.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_MOUSE_AUTO_CAPTURE",
        short_name: "MOUSE_AUTO_CAPTURE",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_MOUSE_AUTO_CAPTURE) },
        doc: Some("A variable controlling whether the mouse is captured while mouse buttons\nare pressed.\n\nThe variable can be set to the following values:\n\n- \"0\": The mouse is not captured while mouse buttons are pressed.\n- \"1\": The mouse is captured while mouse buttons are pressed.\n\nBy default the mouse is captured while mouse buttons are pressed so if the\nmouse is dragged outside the window, the application continues to receive\nmouse events until the button is released.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_MOUSE_DOUBLE_CLICK_RADIUS",
        short_name: "MOUSE_DOUBLE_CLICK_RADIUS",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_MOUSE_DOUBLE_CLICK_RADIUS) },
        doc: Some("A variable setting the double click radius, in pixels.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_MOUSE_DOUBLE_CLICK_TIME",
        short_name: "MOUSE_DOUBLE_CLICK_TIME",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_MOUSE_DOUBLE_CLICK_TIME) },
        doc: Some("A variable setting the double click time, in milliseconds.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_MOUSE_DEFAULT_SYSTEM_CURSOR",
        short_name: "MOUSE_DEFAULT_SYSTEM_CURSOR",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_MOUSE_DEFAULT_SYSTEM_CURSOR) },
        doc: Some("A variable setting which system cursor to use as the default cursor.\n\nThis should be an integer corresponding to the [`SDL_SystemCursor`] enum. The\ndefault value is zero ([`SDL_SYSTEM_CURSOR_DEFAULT`]).\n\nThis hint needs to be set before [`SDL_Init()`].\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_MOUSE_EMULATE_WARP_WITH_RELATIVE",
        short_name: "MOUSE_EMULATE_WARP_WITH_RELATIVE",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_MOUSE_EMULATE_WARP_WITH_RELATIVE) },
        doc: Some("A variable controlling whether warping a hidden mouse cursor will activate\nrelative mouse mode.\n\nWhen this hint is set, the mouse cursor is hidden, and multiple warps to\nthe window center occur within a short time period, SDL will emulate mouse\nwarps using relative mouse mode. This can provide smoother and more\nreliable mouse motion for some older games, which continuously calculate\nthe distance travelled by the mouse pointer and warp it back to the center\nof the window, rather than using relative mouse motion.\n\nNote that relative mouse mode may have different mouse acceleration\nbehavior than pointer warps.\n\nIf your application needs to repeatedly warp the hidden mouse cursor at a\nhigh-frequency for other purposes, it should disable this hint.\n\nThe variable can be set to the following values:\n\n- \"0\": Attempts to warp the mouse will always be made.\n- \"1\": Some mouse warps will be emulated by forcing relative mouse mode.\n(default)\n\nIf not set, this is automatically enabled unless an application uses\nrelative mouse mode directly.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH",
        short_name: "MOUSE_FOCUS_CLICKTHROUGH",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH) },
        doc: Some("Allow mouse click events when clicking to focus an SDL window.\n\nThe variable can be set to the following values:\n\n- \"0\": Ignore mouse clicks that activate a window. (default)\n- \"1\": Generate events for mouse clicks that activate a window.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_MOUSE_NORMAL_SPEED_SCALE",
        short_name: "MOUSE_NORMAL_SPEED_SCALE",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_MOUSE_NORMAL_SPEED_SCALE) },
        doc: Some("A variable setting the speed scale for mouse motion, in floating point,\nwhen the mouse is not in relative mode.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_MOUSE_RELATIVE_MODE_CENTER",
        short_name: "MOUSE_RELATIVE_MODE_CENTER",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_MOUSE_RELATIVE_MODE_CENTER) },
        doc: Some("A variable controlling whether relative mouse mode constrains the mouse to\nthe center of the window.\n\nConstraining to the center of the window works better for FPS games and\nwhen the application is running over RDP. Constraining to the whole window\nworks better for 2D games and increases the chance that the mouse will be\nin the correct position when using high DPI mice.\n\nThe variable can be set to the following values:\n\n- \"0\": Relative mouse mode constrains the mouse to the window.\n- \"1\": Relative mouse mode constrains the mouse to the center of the\nwindow. (default)\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_MOUSE_RELATIVE_SPEED_SCALE",
        short_name: "MOUSE_RELATIVE_SPEED_SCALE",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_MOUSE_RELATIVE_SPEED_SCALE) },
        doc: Some("A variable setting the scale for mouse motion, in floating point, when the\nmouse is in relative mode.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_MOUSE_RELATIVE_SYSTEM_SCALE",
        short_name: "MOUSE_RELATIVE_SYSTEM_SCALE",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_MOUSE_RELATIVE_SYSTEM_SCALE) },
        doc: Some("A variable controlling whether the system mouse acceleration curve is used\nfor relative mouse motion.\n\nThe variable can be set to the following values:\n\n- \"0\": Relative mouse motion will be unscaled. (default)\n- \"1\": Relative mouse motion will be scaled using the system mouse\nacceleration curve.\n\nIf [`SDL_HINT_MOUSE_RELATIVE_SPEED_SCALE`] is set, that will be applied after\nsystem speed scale.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_MOUSE_RELATIVE_WARP_MOTION",
        short_name: "MOUSE_RELATIVE_WARP_MOTION",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_MOUSE_RELATIVE_WARP_MOTION) },
        doc: Some("A variable controlling whether a motion event should be generated for mouse\nwarping in relative mode.\n\nThe variable can be set to the following values:\n\n- \"0\": Warping the mouse will not generate a motion event in relative mode\n- \"1\": Warping the mouse will generate a motion event in relative mode\n\nBy default warping the mouse will not generate motion events in relative\nmode. This avoids the application having to filter out large relative\nmotion due to warping.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_MOUSE_RELATIVE_CURSOR_VISIBLE",
        short_name: "MOUSE_RELATIVE_CURSOR_VISIBLE",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_MOUSE_RELATIVE_CURSOR_VISIBLE) },
        doc: Some("A variable controlling whether the hardware cursor stays visible when\nrelative mode is active.\n\nThis variable can be set to the following values:\n\n- \"0\": The cursor will be hidden while relative mode is active (default)\n- \"1\": The cursor will remain visible while relative mode is active\n\nNote that for systems without raw hardware inputs, relative mode is\nimplemented using warping, so the hardware cursor will visibly warp between\nframes if this is enabled on those systems.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_MOUSE_TOUCH_EVENTS",
        short_name: "MOUSE_TOUCH_EVENTS",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_MOUSE_TOUCH_EVENTS) },
        doc: Some("A variable controlling whether mouse events should generate synthetic touch\nevents.\n\nThe variable can be set to the following values:\n\n- \"0\": Mouse events will not generate touch events. (default for desktop\nplatforms)\n- \"1\": Mouse events will generate touch events. (default for mobile\nplatforms, such as Android and iOS)\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_MUTE_CONSOLE_KEYBOARD",
        short_name: "MUTE_CONSOLE_KEYBOARD",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_MUTE_CONSOLE_KEYBOARD) },
        doc: Some("A variable controlling whether the keyboard should be muted on the console.\n\nNormally the keyboard is muted while SDL applications are running so that\nkeyboard input doesn't show up as key strokes on the console. This hint\nallows you to turn that off for debugging purposes.\n\nThe variable can be set to the following values:\n\n- \"0\": Allow keystrokes to go through to the console.\n- \"1\": Mute keyboard input so it doesn't show up on the console. (default)\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_NO_SIGNAL_HANDLERS",
        short_name: "NO_SIGNAL_HANDLERS",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_NO_SIGNAL_HANDLERS) },
        doc: Some("Tell SDL not to catch the SIGINT or SIGTERM signals on POSIX platforms.\n\nThe variable can be set to the following values:\n\n- \"0\": SDL will install a SIGINT and SIGTERM handler, and when it catches a\nsignal, convert it into an [`SDL_EVENT_QUIT`] event. (default)\n- \"1\": SDL will not install a signal handler at all.\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_OPENGL_LIBRARY",
        short_name: "OPENGL_LIBRARY",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_OPENGL_LIBRARY) },
        doc: Some("Specify the OpenGL library to load.\n\nThis hint should be set before creating an OpenGL window or creating an\nOpenGL context. If this hint isn't set, SDL will choose a reasonable\ndefault.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_EGL_LIBRARY",
        short_name: "EGL_LIBRARY",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_EGL_LIBRARY) },
        doc: Some("Specify the EGL library to load.\n\nThis hint should be set before creating an OpenGL window or creating an\nOpenGL context. This hint is only considered if SDL is using EGL to manage\nOpenGL contexts. If this hint isn't set, SDL will choose a reasonable\ndefault.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_OPENGL_ES_DRIVER",
        short_name: "OPENGL_ES_DRIVER",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_OPENGL_ES_DRIVER) },
        doc: Some("A variable controlling what driver to use for OpenGL ES contexts.\n\nOn some platforms, currently Windows and X11, OpenGL drivers may support\ncreating contexts with an OpenGL ES profile. By default SDL uses these\nprofiles, when available, otherwise it attempts to load an OpenGL ES\nlibrary, e.g. that provided by the ANGLE project. This variable controls\nwhether SDL follows this default behaviour or will always load an OpenGL ES\nlibrary.\n\nCircumstances where this is useful include - Testing an app with a\nparticular OpenGL ES implementation, e.g ANGLE, or emulator, e.g. those\nfrom ARM, Imagination or Qualcomm. - Resolving OpenGL ES function addresses\nat link time by linking with the OpenGL ES library instead of querying them\nat run time with [`SDL_GL_GetProcAddress()`].\n\nCaution: for an application to work with the default behaviour across\ndifferent OpenGL drivers it must query the OpenGL ES function addresses at\nrun time using [`SDL_GL_GetProcAddress()`].\n\nThis variable is ignored on most platforms because OpenGL ES is native or\nnot supported.\n\nThe variable can be set to the following values:\n\n- \"0\": Use ES profile of OpenGL, if available. (default)\n- \"1\": Load OpenGL ES library using the default library names.\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_OPENVR_LIBRARY",
        short_name: "OPENVR_LIBRARY",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_OPENVR_LIBRARY) },
        doc: Some("Mechanism to specify openvr_api library location\n\nBy default, when using the OpenVR driver, it will search for the API\nlibrary in the current folder. But, if you wish to use a system API you can\nspecify that by using this hint. This should be the full or relative path\nto a .dll on Windows or .so on Linux.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_ORIENTATIONS",
        short_name: "ORIENTATIONS",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_ORIENTATIONS) },
        doc: Some("A variable controlling which orientations are allowed on iOS/Android.\n\nIn some circumstances it is necessary to be able to explicitly control\nwhich UI orientations are allowed.\n\nThis variable is a space delimited list of the following values:\n\n- \"LandscapeLeft\"\n- \"LandscapeRight\"\n- \"Portrait\"\n- \"PortraitUpsideDown\"\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_POLL_SENTINEL",
        short_name: "POLL_SENTINEL",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_POLL_SENTINEL) },
        doc: Some("A variable controlling the use of a sentinel event when polling the event\nqueue.\n\nWhen polling for events, [`SDL_PumpEvents`] is used to gather new events from\ndevices. If a device keeps producing new events between calls to\n[`SDL_PumpEvents`], a poll loop will become stuck until the new events stop.\nThis is most noticeable when moving a high frequency mouse.\n\nThe variable can be set to the following values:\n\n- \"0\": Disable poll sentinels.\n- \"1\": Enable poll sentinels. (default)\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_PREFERRED_LOCALES",
        short_name: "PREFERRED_LOCALES",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_PREFERRED_LOCALES) },
        doc: Some("Override for [`SDL_GetPreferredLocales()`].\n\nIf set, this will be favored over anything the OS might report for the\nuser's preferred locales. Changing this hint at runtime will not generate a\n[`SDL_EVENT_LOCALE_CHANGED`] event (but if you can change the hint, you can\npush your own event, if you want).\n\nThe format of this hint is a comma-separated list of language and locale,\ncombined with an underscore, as is a common format: \"en_GB\". Locale is\noptional: \"en\". So you might have a list like this: \"en_GB,jp,es_PT\"\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_QUIT_ON_LAST_WINDOW_CLOSE",
        short_name: "QUIT_ON_LAST_WINDOW_CLOSE",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_QUIT_ON_LAST_WINDOW_CLOSE) },
        doc: Some("A variable that decides whether to send [`SDL_EVENT_QUIT`] when closing the\nlast window.\n\nThe variable can be set to the following values:\n\n- \"0\": SDL will not send an [`SDL_EVENT_QUIT`] event when the last window is\nrequesting to close. Note that in this case, there are still other\nlegitimate reasons one might get an [`SDL_EVENT_QUIT`] event: choosing \"Quit\"\nfrom the macOS menu bar, sending a SIGINT (ctrl-c) on Unix, etc.\n- \"1\": SDL will send a quit event when the last window is requesting to\nclose. (default)\n\nIf there is at least one active system tray icon, [`SDL_EVENT_QUIT`] will\ninstead be sent when both the last window will be closed and the last tray\nicon will be destroyed.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_RENDER_DIRECT3D_THREADSAFE",
        short_name: "RENDER_DIRECT3D_THREADSAFE",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_RENDER_DIRECT3D_THREADSAFE) },
        doc: Some("A variable controlling whether the Direct3D device is initialized for\nthread-safe operations.\n\nThe variable can be set to the following values:\n\n- \"0\": Thread-safety is not enabled. (default)\n- \"1\": Thread-safety is enabled.\n\nThis hint should be set before creating a renderer.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_RENDER_DIRECT3D11_DEBUG",
        short_name: "RENDER_DIRECT3D11_DEBUG",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_RENDER_DIRECT3D11_DEBUG) },
        doc: Some("A variable controlling whether to enable Direct3D 11+'s Debug Layer.\n\nThis variable does not have any effect on the Direct3D 9 based renderer.\n\nThe variable can be set to the following values:\n\n- \"0\": Disable Debug Layer use. (default)\n- \"1\": Enable Debug Layer use.\n\nThis hint should be set before creating a renderer.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_RENDER_VULKAN_DEBUG",
        short_name: "RENDER_VULKAN_DEBUG",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_RENDER_VULKAN_DEBUG) },
        doc: Some("A variable controlling whether to enable Vulkan Validation Layers.\n\nThis variable can be set to the following values:\n\n- \"0\": Disable Validation Layer use\n- \"1\": Enable Validation Layer use\n\nBy default, SDL does not use Vulkan Validation Layers.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_RENDER_GPU_DEBUG",
        short_name: "RENDER_GPU_DEBUG",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_RENDER_GPU_DEBUG) },
        doc: Some("A variable controlling whether to create the GPU device in debug mode.\n\nThis variable can be set to the following values:\n\n- \"0\": Disable debug mode use (default)\n- \"1\": Enable debug mode use\n\nThis hint should be set before creating a renderer.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_RENDER_GPU_LOW_POWER",
        short_name: "RENDER_GPU_LOW_POWER",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_RENDER_GPU_LOW_POWER) },
        doc: Some("A variable controlling whether to prefer a low-power GPU on multi-GPU\nsystems.\n\nThis variable can be set to the following values:\n\n- \"0\": Prefer high-performance GPU (default)\n- \"1\": Prefer low-power GPU\n\nThis hint should be set before creating a renderer.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_RENDER_DRIVER",
        short_name: "RENDER_DRIVER",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_RENDER_DRIVER) },
        doc: Some("A variable specifying which render driver to use.\n\nIf the application doesn't pick a specific renderer to use, this variable\nspecifies the name of the preferred renderer. If the preferred renderer\ncan't be initialized, creating a renderer will fail.\n\nThis variable is case insensitive and can be set to the following values:\n\n- \"direct3d\"\n- \"direct3d11\"\n- \"direct3d12\"\n- \"opengl\"\n- \"opengles2\"\n- \"opengles\"\n- \"metal\"\n- \"vulkan\"\n- \"gpu\"\n- \"software\"\n\nThis hint accepts a comma-separated list of driver names, and each will be\ntried in the order listed when creating a renderer until one succeeds or\nall of them fail.\n\nThe default varies by platform, but it's the first one in the list that is\navailable on the current platform.\n\nThis hint should be set before creating a renderer.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_RENDER_LINE_METHOD",
        short_name: "RENDER_LINE_METHOD",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_RENDER_LINE_METHOD) },
        doc: Some("A variable controlling how the 2D render API renders lines.\n\nThe variable can be set to the following values:\n\n- \"0\": Use the default line drawing method (Bresenham's line algorithm)\n- \"1\": Use the driver point API using Bresenham's line algorithm (correct,\ndraws many points)\n- \"2\": Use the driver line API (occasionally misses line endpoints based on\nhardware driver quirks\n- \"3\": Use the driver geometry API (correct, draws thicker diagonal lines)\n\nThis hint should be set before creating a renderer.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_RENDER_METAL_PREFER_LOW_POWER_DEVICE",
        short_name: "RENDER_METAL_PREFER_LOW_POWER_DEVICE",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_RENDER_METAL_PREFER_LOW_POWER_DEVICE) },
        doc: Some("A variable controlling whether the Metal render driver select low power\ndevice over default one.\n\nThe variable can be set to the following values:\n\n- \"0\": Use the preferred OS device. (default)\n- \"1\": Select a low power device.\n\nThis hint should be set before creating a renderer.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_RENDER_VSYNC",
        short_name: "RENDER_VSYNC",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_RENDER_VSYNC) },
        doc: Some("A variable controlling whether updates to the SDL screen surface should be\nsynchronized with the vertical refresh, to avoid tearing.\n\nThis hint overrides the application preference when creating a renderer.\n\nThe variable can be set to the following values:\n\n- \"0\": Disable vsync. (default)\n- \"1\": Enable vsync.\n\nThis hint should be set before creating a renderer.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_RETURN_KEY_HIDES_IME",
        short_name: "RETURN_KEY_HIDES_IME",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_RETURN_KEY_HIDES_IME) },
        doc: Some("A variable to control whether the return key on the soft keyboard should\nhide the soft keyboard on Android and iOS.\n\nThis hint sets the default value of [`SDL_PROP_TEXTINPUT_MULTILINE_BOOLEAN`].\n\nThe variable can be set to the following values:\n\n- \"0\": The return key will be handled as a key event. (default)\n- \"1\": The return key will hide the keyboard.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_ROG_GAMEPAD_MICE",
        short_name: "ROG_GAMEPAD_MICE",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_ROG_GAMEPAD_MICE) },
        doc: Some("A variable containing a list of ROG gamepad capable mice.\n\nThe format of the string is a comma separated list of USB VID/PID pairs in\nhexadecimal form, e.g.\n\n`0xAAAA/0xBBBB,0xCCCC/0xDDDD`\n\nThe variable can also take the form of \"@file\", in which case the named\nfile will be loaded and interpreted as the value of the variable.\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n\n## See also\n- [`SDL_HINT_ROG_GAMEPAD_MICE_EXCLUDED`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_ROG_GAMEPAD_MICE_EXCLUDED",
        short_name: "ROG_GAMEPAD_MICE_EXCLUDED",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_ROG_GAMEPAD_MICE_EXCLUDED) },
        doc: Some("A variable containing a list of devices that are not ROG gamepad capable\nmice.\n\nThis will override [`SDL_HINT_ROG_GAMEPAD_MICE`] and the built in device list.\n\nThe format of the string is a comma separated list of USB VID/PID pairs in\nhexadecimal form, e.g.\n\n`0xAAAA/0xBBBB,0xCCCC/0xDDDD`\n\nThe variable can also take the form of \"@file\", in which case the named\nfile will be loaded and interpreted as the value of the variable.\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_RPI_VIDEO_LAYER",
        short_name: "RPI_VIDEO_LAYER",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_RPI_VIDEO_LAYER) },
        doc: Some("A variable controlling which Dispmanx layer to use on a Raspberry PI.\n\nAlso known as Z-order. The variable can take a negative or positive value.\nThe default is 10000.\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_SCREENSAVER_INHIBIT_ACTIVITY_NAME",
        short_name: "SCREENSAVER_INHIBIT_ACTIVITY_NAME",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_SCREENSAVER_INHIBIT_ACTIVITY_NAME) },
        doc: Some("Specify an \"activity name\" for screensaver inhibition.\n\nSome platforms, notably Linux desktops, list the applications which are\ninhibiting the screensaver or other power-saving features.\n\nThis hint lets you specify the \"activity name\" sent to the OS when\n[`SDL_DisableScreenSaver()`] is used (or the screensaver is automatically\ndisabled). The contents of this hint are used when the screensaver is\ndisabled. You should use a string that describes what your program is doing\n(and, therefore, why the screensaver is disabled). For example, \"Playing a\ngame\" or \"Watching a video\".\n\nSetting this to \"\" or leaving it unset will have SDL use a reasonable\ndefault: \"Playing a game\" or something similar.\n\nThis hint should be set before calling [`SDL_DisableScreenSaver()`]\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_SHUTDOWN_DBUS_ON_QUIT",
        short_name: "SHUTDOWN_DBUS_ON_QUIT",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_SHUTDOWN_DBUS_ON_QUIT) },
        doc: Some("A variable controlling whether SDL calls dbus_shutdown() on quit.\n\nThis is useful as a debug tool to validate memory leaks, but shouldn't ever\nbe set in production applications, as other libraries used by the\napplication might use dbus under the hood and this can cause crashes if\nthey continue after [`SDL_Quit()`].\n\nThe variable can be set to the following values:\n\n- \"0\": SDL will not call dbus_shutdown() on quit. (default)\n- \"1\": SDL will call dbus_shutdown() on quit.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_STORAGE_TITLE_DRIVER",
        short_name: "STORAGE_TITLE_DRIVER",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_STORAGE_TITLE_DRIVER) },
        doc: Some("A variable that specifies a backend to use for title storage.\n\nBy default, SDL will try all available storage backends in a reasonable\norder until it finds one that can work, but this hint allows the app or\nuser to force a specific target, such as \"pc\" if, say, you are on Steam but\nwant to avoid SteamRemoteStorage for title data.\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_STORAGE_USER_DRIVER",
        short_name: "STORAGE_USER_DRIVER",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_STORAGE_USER_DRIVER) },
        doc: Some("A variable that specifies a backend to use for user storage.\n\nBy default, SDL will try all available storage backends in a reasonable\norder until it finds one that can work, but this hint allows the app or\nuser to force a specific target, such as \"pc\" if, say, you are on Steam but\nwant to avoid SteamRemoteStorage for user data.\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_THREAD_FORCE_REALTIME_TIME_CRITICAL",
        short_name: "THREAD_FORCE_REALTIME_TIME_CRITICAL",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_THREAD_FORCE_REALTIME_TIME_CRITICAL) },
        doc: Some("Specifies whether [`SDL_THREAD_PRIORITY_TIME_CRITICAL`] should be treated as\nrealtime.\n\nOn some platforms, like Linux, a realtime priority thread may be subject to\nrestrictions that require special handling by the application. This hint\nexists to let SDL know that the app is prepared to handle said\nrestrictions.\n\nOn Linux, SDL will apply the following configuration to any thread that\nbecomes realtime:\n\n- The SCHED_RESET_ON_FORK bit will be set on the scheduling policy,\n- An RLIMIT_RTTIME budget will be configured to the rtkit specified limit.\n- Exceeding this limit will result in the kernel sending SIGKILL to the\napp, refer to the man pages for more information.\n\nThe variable can be set to the following values:\n\n- \"0\": default platform specific behaviour\n- \"1\": Force [`SDL_THREAD_PRIORITY_TIME_CRITICAL`] to a realtime scheduling\npolicy\n\nThis hint should be set before calling [`SDL_SetCurrentThreadPriority()`]\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_THREAD_PRIORITY_POLICY",
        short_name: "THREAD_PRIORITY_POLICY",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_THREAD_PRIORITY_POLICY) },
        doc: Some("A string specifying additional information to use with\n[`SDL_SetCurrentThreadPriority`].\n\nBy default [`SDL_SetCurrentThreadPriority`] will make appropriate system\nchanges in order to apply a thread priority. For example on systems using\npthreads the scheduler policy is changed automatically to a policy that\nworks well with a given priority. Code which has specific requirements can\noverride SDL's default behavior with this hint.\n\npthread hint values are \"current\", \"other\", \"fifo\" and \"rr\". Currently no\nother platform hint values are defined but may be in the future.\n\nOn Linux, the kernel may send SIGKILL to realtime tasks which exceed the\ndistro configured execution budget for rtkit. This budget can be queried\nthrough RLIMIT_RTTIME after calling [`SDL_SetCurrentThreadPriority()`].\n\nThis hint should be set before calling [`SDL_SetCurrentThreadPriority()`]\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_TIMER_RESOLUTION",
        short_name: "TIMER_RESOLUTION",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_TIMER_RESOLUTION) },
        doc: Some("A variable that controls the timer resolution, in milliseconds.\n\nThe higher resolution the timer, the more frequently the CPU services timer\ninterrupts, and the more precise delays are, but this takes up power and\nCPU time. This hint is only used on Windows.\n\nSee this blog post for more information:\n<http://randomascii.wordpress.com/2013/07/08/windows-timer-resolution-megawatts-wasted/>\n\nThe default value is \"1\".\n\nIf this variable is set to \"0\", the system timer resolution is not set.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_TOUCH_MOUSE_EVENTS",
        short_name: "TOUCH_MOUSE_EVENTS",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_TOUCH_MOUSE_EVENTS) },
        doc: Some("A variable controlling whether touch events should generate synthetic mouse\nevents.\n\nThe variable can be set to the following values:\n\n- \"0\": Touch events will not generate mouse events.\n- \"1\": Touch events will generate mouse events. (default)\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_TRACKPAD_IS_TOUCH_ONLY",
        short_name: "TRACKPAD_IS_TOUCH_ONLY",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_TRACKPAD_IS_TOUCH_ONLY) },
        doc: Some("A variable controlling whether trackpads should be treated as touch\ndevices.\n\nOn macOS (and possibly other platforms in the future), SDL will report\ntouches on a trackpad as mouse input, which is generally what users expect\nfrom this device; however, these are often actually full multitouch-capable\ntouch devices, so it might be preferable to some apps to treat them as\nsuch.\n\nThe variable can be set to the following values:\n\n- \"0\": Trackpad will send mouse events. (default)\n- \"1\": Trackpad will send touch events.\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_TV_REMOTE_AS_JOYSTICK",
        short_name: "TV_REMOTE_AS_JOYSTICK",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_TV_REMOTE_AS_JOYSTICK) },
        doc: Some("A variable controlling whether the Android / tvOS remotes should be listed\nas joystick devices, instead of sending keyboard events.\n\nThe variable can be set to the following values:\n\n- \"0\": Remotes send enter/escape/arrow key events.\n- \"1\": Remotes are available as 2 axis, 2 button joysticks. (default)\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_VIDEO_ALLOW_SCREENSAVER",
        short_name: "VIDEO_ALLOW_SCREENSAVER",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_VIDEO_ALLOW_SCREENSAVER) },
        doc: Some("A variable controlling whether the screensaver is enabled.\n\nThe variable can be set to the following values:\n\n- \"0\": Disable screensaver. (default)\n- \"1\": Enable screensaver.\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_VIDEO_DISPLAY_PRIORITY",
        short_name: "VIDEO_DISPLAY_PRIORITY",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_VIDEO_DISPLAY_PRIORITY) },
        doc: Some("A comma separated list containing the names of the displays that SDL should\nsort to the front of the display list.\n\nWhen this hint is set, displays with matching name strings will be\nprioritized in the list of displays, as exposed by calling\n[`SDL_GetDisplays()`], with the first listed becoming the primary display. The\nnaming convention can vary depending on the environment, but it is usually\na connector name (e.g. 'DP-1', 'DP-2', 'HDMI-A-1',etc...).\n\nOn Wayland and X11 desktops, the connector names associated with displays\ncan typically be found by using the `xrandr` utility.\n\nThis hint is currently supported on the following drivers:\n\n- KMSDRM (kmsdrm)\n- Wayland (wayland)\n- X11 (x11)\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_VIDEO_DOUBLE_BUFFER",
        short_name: "VIDEO_DOUBLE_BUFFER",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_VIDEO_DOUBLE_BUFFER) },
        doc: Some("Tell the video driver that we only want a double buffer.\n\nBy default, most lowlevel 2D APIs will use a triple buffer scheme that\nwastes no CPU time on waiting for vsync after issuing a flip, but\nintroduces a frame of latency. On the other hand, using a double buffer\nscheme instead is recommended for cases where low latency is an important\nfactor because we save a whole frame of latency.\n\nWe do so by waiting for vsync immediately after issuing a flip, usually\njust after eglSwapBuffers call in the backend's *_SwapWindow function.\n\nThis hint is currently supported on the following drivers:\n\n- Raspberry Pi (raspberrypi)\n- Wayland (wayland)\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_VIDEO_DRIVER",
        short_name: "VIDEO_DRIVER",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_VIDEO_DRIVER) },
        doc: Some("A variable that specifies a video backend to use.\n\nBy default, SDL will try all available video backends in a reasonable order\nuntil it finds one that can work, but this hint allows the app or user to\nforce a specific target, such as \"x11\" if, say, you are on Wayland but want\nto try talking to the X server instead.\n\nThis hint accepts a comma-separated list of driver names, and each will be\ntried in the order listed during init, until one succeeds or all of them\nfail.\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_VIDEO_DUMMY_SAVE_FRAMES",
        short_name: "VIDEO_DUMMY_SAVE_FRAMES",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_VIDEO_DUMMY_SAVE_FRAMES) },
        doc: Some("A variable controlling whether the dummy video driver saves output frames.\n\n- \"0\": Video frames are not saved to disk. (default)\n- \"1\": Video frames are saved to files in the format \"SDL_windowX-Y.bmp\",\nwhere X is the window ID, and Y is the frame number.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_VIDEO_EGL_ALLOW_GETDISPLAY_FALLBACK",
        short_name: "VIDEO_EGL_ALLOW_GETDISPLAY_FALLBACK",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_VIDEO_EGL_ALLOW_GETDISPLAY_FALLBACK) },
        doc: Some("If eglGetPlatformDisplay fails, fall back to calling eglGetDisplay.\n\nThe variable can be set to one of the following values:\n\n- \"0\": Do not fall back to eglGetDisplay.\n- \"1\": Fall back to eglGetDisplay if eglGetPlatformDisplay fails. (default)\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_VIDEO_FORCE_EGL",
        short_name: "VIDEO_FORCE_EGL",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_VIDEO_FORCE_EGL) },
        doc: Some("A variable controlling whether the OpenGL context should be created with\nEGL.\n\nThe variable can be set to the following values:\n\n- \"0\": Use platform-specific GL context creation API (GLX, WGL, CGL, etc).\n(default)\n- \"1\": Use EGL\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES",
        short_name: "VIDEO_MAC_FULLSCREEN_SPACES",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES) },
        doc: Some("A variable that specifies the policy for fullscreen Spaces on macOS.\n\nThe variable can be set to the following values:\n\n- \"0\": Disable Spaces support (FULLSCREEN_DESKTOP won't use them and\n[`SDL_WINDOW_RESIZABLE`] windows won't offer the \"fullscreen\" button on their\ntitlebars).\n- \"1\": Enable Spaces support (FULLSCREEN_DESKTOP will use them and\n[`SDL_WINDOW_RESIZABLE`] windows will offer the \"fullscreen\" button on their\ntitlebars). (default)\n\nThis hint should be set before creating a window.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_VIDEO_MAC_FULLSCREEN_MENU_VISIBILITY",
        short_name: "VIDEO_MAC_FULLSCREEN_MENU_VISIBILITY",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_VIDEO_MAC_FULLSCREEN_MENU_VISIBILITY) },
        doc: Some("A variable that specifies the menu visibility when a window is fullscreen\nin Spaces on macOS.\n\nThe variable can be set to the following values:\n\n- \"0\": The menu will be hidden when the window is in a fullscreen space,\nand not accessible by moving the mouse to the top of the screen.\n- \"1\": The menu will be accessible when the window is in a fullscreen\nspace.\n- \"auto\": The menu will be hidden if fullscreen mode was toggled on\nprogrammatically via `SDL_SetWindowFullscreen()`, and accessible if\nfullscreen was entered via the \"fullscreen\" button on the window title\nbar. (default)\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS",
        short_name: "VIDEO_MINIMIZE_ON_FOCUS_LOSS",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS) },
        doc: Some("A variable controlling whether fullscreen windows are minimized when they\nlose focus.\n\nThe variable can be set to the following values:\n\n- \"0\": Fullscreen windows will not be minimized when they lose focus.\n(default)\n- \"1\": Fullscreen windows are minimized when they lose focus.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_VIDEO_OFFSCREEN_SAVE_FRAMES",
        short_name: "VIDEO_OFFSCREEN_SAVE_FRAMES",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_VIDEO_OFFSCREEN_SAVE_FRAMES) },
        doc: Some("A variable controlling whether the offscreen video driver saves output\nframes.\n\nThis only saves frames that are generated using software rendering, not\naccelerated OpenGL rendering.\n\n- \"0\": Video frames are not saved to disk. (default)\n- \"1\": Video frames are saved to files in the format \"SDL_windowX-Y.bmp\",\nwhere X is the window ID, and Y is the frame number.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_VIDEO_SYNC_WINDOW_OPERATIONS",
        short_name: "VIDEO_SYNC_WINDOW_OPERATIONS",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_VIDEO_SYNC_WINDOW_OPERATIONS) },
        doc: Some("A variable controlling whether all window operations will block until\ncomplete.\n\nWindow systems that run asynchronously may not have the results of window\noperations that resize or move the window applied immediately upon the\nreturn of the requesting function. Setting this hint will cause such\noperations to block after every call until the pending operation has\ncompleted. Setting this to '1' is the equivalent of calling\n[`SDL_SyncWindow()`] after every function call.\n\nBe aware that amount of time spent blocking while waiting for window\noperations to complete can be quite lengthy, as animations may have to\ncomplete, which can take upwards of multiple seconds in some cases.\n\nThe variable can be set to the following values:\n\n- \"0\": Window operations are non-blocking. (default)\n- \"1\": Window operations will block until completed.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_VIDEO_WAYLAND_ALLOW_LIBDECOR",
        short_name: "VIDEO_WAYLAND_ALLOW_LIBDECOR",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_VIDEO_WAYLAND_ALLOW_LIBDECOR) },
        doc: Some("A variable controlling whether the libdecor Wayland backend is allowed to\nbe used.\n\nlibdecor is used over xdg-shell when xdg-decoration protocol is\nunavailable.\n\nThe variable can be set to the following values:\n\n- \"0\": libdecor use is disabled.\n- \"1\": libdecor use is enabled. (default)\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_VIDEO_WAYLAND_MODE_EMULATION",
        short_name: "VIDEO_WAYLAND_MODE_EMULATION",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_VIDEO_WAYLAND_MODE_EMULATION) },
        doc: Some("A variable controlling whether video mode emulation is enabled under\nWayland.\n\nWhen this hint is set, a standard set of emulated CVT video modes will be\nexposed for use by the application. If it is disabled, the only modes\nexposed will be the logical desktop size and, in the case of a scaled\ndesktop, the native display resolution.\n\nThe variable can be set to the following values:\n\n- \"0\": Video mode emulation is disabled.\n- \"1\": Video mode emulation is enabled. (default)\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_VIDEO_WAYLAND_MODE_SCALING",
        short_name: "VIDEO_WAYLAND_MODE_SCALING",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_VIDEO_WAYLAND_MODE_SCALING) },
        doc: Some("A variable controlling how modes with a non-native aspect ratio are\ndisplayed under Wayland.\n\nWhen this hint is set, the requested scaling will be used when displaying\nfullscreen video modes that don't match the display's native aspect ratio.\nThis is contingent on compositor viewport support.\n\nThe variable can be set to the following values:\n\n- \"aspect\" - Video modes will be displayed scaled, in their proper aspect\nratio, with black bars.\n- \"stretch\" - Video modes will be scaled to fill the entire display.\n(default)\n- \"none\" - Video modes will be displayed as 1:1 with no scaling.\n\nThis hint should be set before creating a window.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_VIDEO_WAYLAND_PREFER_LIBDECOR",
        short_name: "VIDEO_WAYLAND_PREFER_LIBDECOR",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_VIDEO_WAYLAND_PREFER_LIBDECOR) },
        doc: Some("A variable controlling whether the libdecor Wayland backend is preferred\nover native decorations.\n\nWhen this hint is set, libdecor will be used to provide window decorations,\neven if xdg-decoration is available. (Note that, by default, libdecor will\nuse xdg-decoration itself if available).\n\nThe variable can be set to the following values:\n\n- \"0\": libdecor is enabled only if server-side decorations are unavailable.\n(default)\n- \"1\": libdecor is always enabled if available.\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_VIDEO_WAYLAND_SCALE_TO_DISPLAY",
        short_name: "VIDEO_WAYLAND_SCALE_TO_DISPLAY",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_VIDEO_WAYLAND_SCALE_TO_DISPLAY) },
        doc: Some("A variable forcing non-DPI-aware Wayland windows to output at 1:1 scaling.\n\nThis must be set before initializing the video subsystem.\n\nWhen this hint is set, Wayland windows that are not flagged as being\nDPI-aware will be output with scaling designed to force 1:1 pixel mapping.\n\nThis is intended to allow legacy applications to be displayed without\ndesktop scaling being applied, and has issues with certain display\nconfigurations, as this forces the window to behave in a way that Wayland\ndesktops were not designed to accommodate:\n\n- Rounding errors can result with odd window sizes and/or desktop scales,\nwhich can cause the window contents to appear slightly blurry.\n- Positioning the window may be imprecise due to unit conversions and\nrounding.\n- The window may be unusably small on scaled desktops.\n- The window may jump in size when moving between displays of different\nscale factors.\n- Displays may appear to overlap when using a multi-monitor setup with\nscaling enabled.\n- Possible loss of cursor precision due to the logical size of the window\nbeing reduced.\n\nNew applications should be designed with proper DPI awareness handling\ninstead of enabling this.\n\nThe variable can be set to the following values:\n\n- \"0\": Windows will be scaled normally.\n- \"1\": Windows will be forced to scale to achieve 1:1 output.\n\nThis hint should be set before creating a window.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_VIDEO_WIN_D3DCOMPILER",
        short_name: "VIDEO_WIN_D3DCOMPILER",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_VIDEO_WIN_D3DCOMPILER) },
        doc: Some("A variable specifying which shader compiler to preload when using the\nChrome ANGLE binaries.\n\nSDL has EGL and OpenGL ES2 support on Windows via the ANGLE project. It can\nuse two different sets of binaries, those compiled by the user from source\nor those provided by the Chrome browser. In the later case, these binaries\nrequire that SDL loads a DLL providing the shader compiler.\n\nThe variable can be set to the following values:\n\n- \"d3dcompiler_46.dll\" - best for Vista or later. (default)\n- \"d3dcompiler_43.dll\" - for XP support.\n- \"none\" - do not load any library, useful if you compiled ANGLE from\nsource and included the compiler in your binaries.\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_VIDEO_X11_EXTERNAL_WINDOW_INPUT",
        short_name: "VIDEO_X11_EXTERNAL_WINDOW_INPUT",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_VIDEO_X11_EXTERNAL_WINDOW_INPUT) },
        doc: Some("A variable controlling whether SDL should call XSelectInput() to enable\ninput events on X11 windows wrapped by SDL windows.\n\nThe variable can be set to the following values:\n\n- \"0\": Don't call XSelectInput(), assuming the native window code has done\nit already.\n- \"1\": Call XSelectInput() to enable input events. (default)\n\nThis hint should be set before creating a window.\n\n## Availability\nThis hint is available since SDL 3.2.10.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 10)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR",
        short_name: "VIDEO_X11_NET_WM_BYPASS_COMPOSITOR",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR) },
        doc: Some("A variable controlling whether the X11 _NET_WM_BYPASS_COMPOSITOR hint\nshould be used.\n\nThe variable can be set to the following values:\n\n- \"0\": Disable _NET_WM_BYPASS_COMPOSITOR.\n- \"1\": Enable _NET_WM_BYPASS_COMPOSITOR. (default)\n\nThis hint should be set before creating a window.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_VIDEO_X11_NET_WM_PING",
        short_name: "VIDEO_X11_NET_WM_PING",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_VIDEO_X11_NET_WM_PING) },
        doc: Some("A variable controlling whether the X11 _NET_WM_PING protocol should be\nsupported.\n\nBy default SDL will use _NET_WM_PING, but for applications that know they\nwill not always be able to respond to ping requests in a timely manner they\ncan turn it off to avoid the window manager thinking the app is hung.\n\nThe variable can be set to the following values:\n\n- \"0\": Disable _NET_WM_PING.\n- \"1\": Enable _NET_WM_PING. (default)\n\nThis hint should be set before creating a window.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_VIDEO_X11_NODIRECTCOLOR",
        short_name: "VIDEO_X11_NODIRECTCOLOR",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_VIDEO_X11_NODIRECTCOLOR) },
        doc: Some("A variable controlling whether SDL uses DirectColor visuals.\n\nThe variable can be set to the following values:\n\n- \"0\": Disable DirectColor visuals.\n- \"1\": Enable DirectColor visuals. (default)\n\nThis hint should be set before initializing the video subsystem.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_VIDEO_X11_SCALING_FACTOR",
        short_name: "VIDEO_X11_SCALING_FACTOR",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_VIDEO_X11_SCALING_FACTOR) },
        doc: Some("A variable forcing the content scaling factor for X11 displays.\n\nThe variable can be set to a floating point value in the range 1.0-10.0f\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_VIDEO_X11_VISUALID",
        short_name: "VIDEO_X11_VISUALID",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_VIDEO_X11_VISUALID) },
        doc: Some("A variable forcing the visual ID used for X11 display modes.\n\nThis hint should be set before initializing the video subsystem.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_VIDEO_X11_WINDOW_VISUALID",
        short_name: "VIDEO_X11_WINDOW_VISUALID",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_VIDEO_X11_WINDOW_VISUALID) },
        doc: Some("A variable forcing the visual ID chosen for new X11 windows.\n\nThis hint should be set before creating a window.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_VIDEO_X11_XRANDR",
        short_name: "VIDEO_X11_XRANDR",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_VIDEO_X11_XRANDR) },
        doc: Some("A variable controlling whether the X11 XRandR extension should be used.\n\nThe variable can be set to the following values:\n\n- \"0\": Disable XRandR.\n- \"1\": Enable XRandR. (default)\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_VITA_ENABLE_BACK_TOUCH",
        short_name: "VITA_ENABLE_BACK_TOUCH",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_VITA_ENABLE_BACK_TOUCH) },
        doc: Some("A variable controlling whether touch should be enabled on the back panel of\nthe PlayStation Vita.\n\nThe variable can be set to the following values:\n\n- \"0\": Disable touch on the back panel.\n- \"1\": Enable touch on the back panel. (default)\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_VITA_ENABLE_FRONT_TOUCH",
        short_name: "VITA_ENABLE_FRONT_TOUCH",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_VITA_ENABLE_FRONT_TOUCH) },
        doc: Some("A variable controlling whether touch should be enabled on the front panel\nof the PlayStation Vita.\n\nThe variable can be set to the following values:\n\n- \"0\": Disable touch on the front panel.\n- \"1\": Enable touch on the front panel. (default)\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_VITA_MODULE_PATH",
        short_name: "VITA_MODULE_PATH",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_VITA_MODULE_PATH) },
        doc: Some("A variable controlling the module path on the PlayStation Vita.\n\nThis hint defaults to \"app0:module\"\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_VITA_PVR_INIT",
        short_name: "VITA_PVR_INIT",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_VITA_PVR_INIT) },
        doc: Some("A variable controlling whether to perform PVR initialization on the\nPlayStation Vita.\n\n- \"0\": Skip PVR initialization.\n- \"1\": Perform the normal PVR initialization. (default)\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_VITA_RESOLUTION",
        short_name: "VITA_RESOLUTION",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_VITA_RESOLUTION) },
        doc: Some("A variable overriding the resolution reported on the PlayStation Vita.\n\nThe variable can be set to the following values:\n\n- \"544\": 544p (default)\n- \"720\": 725p for PSTV\n- \"1080\": 1088i for PSTV\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_VITA_PVR_OPENGL",
        short_name: "VITA_PVR_OPENGL",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_VITA_PVR_OPENGL) },
        doc: Some("A variable controlling whether OpenGL should be used instead of OpenGL ES\non the PlayStation Vita.\n\nThe variable can be set to the following values:\n\n- \"0\": Use OpenGL ES. (default)\n- \"1\": Use OpenGL.\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_VITA_TOUCH_MOUSE_DEVICE",
        short_name: "VITA_TOUCH_MOUSE_DEVICE",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_VITA_TOUCH_MOUSE_DEVICE) },
        doc: Some("A variable controlling which touchpad should generate synthetic mouse\nevents.\n\nThe variable can be set to the following values:\n\n- \"0\": Only front touchpad should generate mouse events. (default)\n- \"1\": Only back touchpad should generate mouse events.\n- \"2\": Both touchpads should generate mouse events.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_VULKAN_DISPLAY",
        short_name: "VULKAN_DISPLAY",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_VULKAN_DISPLAY) },
        doc: Some("A variable overriding the display index used in [`SDL_Vulkan_CreateSurface()`]\n\nThe display index starts at 0, which is the default.\n\nThis hint should be set before calling [`SDL_Vulkan_CreateSurface()`]\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_VULKAN_LIBRARY",
        short_name: "VULKAN_LIBRARY",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_VULKAN_LIBRARY) },
        doc: Some("Specify the Vulkan library to load.\n\nThis hint should be set before creating a Vulkan window or calling\n[`SDL_Vulkan_LoadLibrary()`].\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_WAVE_FACT_CHUNK",
        short_name: "WAVE_FACT_CHUNK",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_WAVE_FACT_CHUNK) },
        doc: Some("A variable controlling how the fact chunk affects the loading of a WAVE\nfile.\n\nThe fact chunk stores information about the number of samples of a WAVE\nfile. The Standards Update from Microsoft notes that this value can be used\nto 'determine the length of the data in seconds'. This is especially useful\nfor compressed formats (for which this is a mandatory chunk) if they\nproduce multiple sample frames per block and truncating the block is not\nallowed. The fact chunk can exactly specify how many sample frames there\nshould be in this case.\n\nUnfortunately, most application seem to ignore the fact chunk and so SDL\nignores it by default as well.\n\nThe variable can be set to the following values:\n\n- \"truncate\" - Use the number of samples to truncate the wave data if the\nfact chunk is present and valid.\n- \"strict\" - Like \"truncate\", but raise an error if the fact chunk is\ninvalid, not present for non-PCM formats, or if the data chunk doesn't\nhave that many samples.\n- \"ignorezero\" - Like \"truncate\", but ignore fact chunk if the number of\nsamples is zero.\n- \"ignore\" - Ignore fact chunk entirely. (default)\n\nThis hint should be set before calling [`SDL_LoadWAV()`] or [`SDL_LoadWAV_IO()`]\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_WAVE_CHUNK_LIMIT",
        short_name: "WAVE_CHUNK_LIMIT",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_WAVE_CHUNK_LIMIT) },
        doc: Some("A variable controlling the maximum number of chunks in a WAVE file.\n\nThis sets an upper bound on the number of chunks in a WAVE file to avoid\nwasting time on malformed or corrupt WAVE files. This defaults to \"10000\".\n\nThis hint should be set before calling [`SDL_LoadWAV()`] or [`SDL_LoadWAV_IO()`]\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_WAVE_RIFF_CHUNK_SIZE",
        short_name: "WAVE_RIFF_CHUNK_SIZE",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_WAVE_RIFF_CHUNK_SIZE) },
        doc: Some("A variable controlling how the size of the RIFF chunk affects the loading\nof a WAVE file.\n\nThe size of the RIFF chunk (which includes all the sub-chunks of the WAVE\nfile) is not always reliable. In case the size is wrong, it's possible to\njust ignore it and step through the chunks until a fixed limit is reached.\n\nNote that files that have trailing data unrelated to the WAVE file or\ncorrupt files may slow down the loading process without a reliable\nboundary. By default, SDL stops after 10000 chunks to prevent wasting time.\nUse [`SDL_HINT_WAVE_CHUNK_LIMIT`] to adjust this value.\n\nThe variable can be set to the following values:\n\n- \"force\" - Always use the RIFF chunk size as a boundary for the chunk\nsearch.\n- \"ignorezero\" - Like \"force\", but a zero size searches up to 4 GiB.\n(default)\n- \"ignore\" - Ignore the RIFF chunk size and always search up to 4 GiB.\n- \"maximum\" - Search for chunks until the end of file. (not recommended)\n\nThis hint should be set before calling [`SDL_LoadWAV()`] or [`SDL_LoadWAV_IO()`]\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_WAVE_TRUNCATION",
        short_name: "WAVE_TRUNCATION",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_WAVE_TRUNCATION) },
        doc: Some("A variable controlling how a truncated WAVE file is handled.\n\nA WAVE file is considered truncated if any of the chunks are incomplete or\nthe data chunk size is not a multiple of the block size. By default, SDL\ndecodes until the first incomplete block, as most applications seem to do.\n\nThe variable can be set to the following values:\n\n- \"verystrict\" - Raise an error if the file is truncated.\n- \"strict\" - Like \"verystrict\", but the size of the RIFF chunk is ignored.\n- \"dropframe\" - Decode until the first incomplete sample frame.\n- \"dropblock\" - Decode until the first incomplete block. (default)\n\nThis hint should be set before calling [`SDL_LoadWAV()`] or [`SDL_LoadWAV_IO()`]\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_WINDOW_ACTIVATE_WHEN_RAISED",
        short_name: "WINDOW_ACTIVATE_WHEN_RAISED",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_WINDOW_ACTIVATE_WHEN_RAISED) },
        doc: Some("A variable controlling whether the window is activated when the\n[`SDL_RaiseWindow`] function is called.\n\nThe variable can be set to the following values:\n\n- \"0\": The window is not activated when the [`SDL_RaiseWindow`] function is\ncalled.\n- \"1\": The window is activated when the [`SDL_RaiseWindow`] function is called.\n(default)\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_WINDOW_ACTIVATE_WHEN_SHOWN",
        short_name: "WINDOW_ACTIVATE_WHEN_SHOWN",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_WINDOW_ACTIVATE_WHEN_SHOWN) },
        doc: Some("A variable controlling whether the window is activated when the\n[`SDL_ShowWindow`] function is called.\n\nThe variable can be set to the following values:\n\n- \"0\": The window is not activated when the [`SDL_ShowWindow`] function is\ncalled.\n- \"1\": The window is activated when the [`SDL_ShowWindow`] function is called.\n(default)\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_WINDOW_ALLOW_TOPMOST",
        short_name: "WINDOW_ALLOW_TOPMOST",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_WINDOW_ALLOW_TOPMOST) },
        doc: Some("If set to \"0\" then never set the top-most flag on an SDL Window even if the\napplication requests it.\n\nThis is a debugging aid for developers and not expected to be used by end\nusers.\n\nThe variable can be set to the following values:\n\n- \"0\": don't allow topmost\n- \"1\": allow topmost (default)\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN",
        short_name: "WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN) },
        doc: Some("A variable controlling whether the window frame and title bar are\ninteractive when the cursor is hidden.\n\nThe variable can be set to the following values:\n\n- \"0\": The window frame is not interactive when the cursor is hidden (no\nmove, resize, etc).\n- \"1\": The window frame is interactive when the cursor is hidden. (default)\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_WINDOWS_CLOSE_ON_ALT_F4",
        short_name: "WINDOWS_CLOSE_ON_ALT_F4",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_WINDOWS_CLOSE_ON_ALT_F4) },
        doc: Some("A variable controlling whether SDL generates window-close events for Alt+F4\non Windows.\n\nThe variable can be set to the following values:\n\n- \"0\": SDL will only do normal key handling for Alt+F4.\n- \"1\": SDL will generate a window-close event when it sees Alt+F4.\n(default)\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_WINDOWS_ENABLE_MENU_MNEMONICS",
        short_name: "WINDOWS_ENABLE_MENU_MNEMONICS",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_WINDOWS_ENABLE_MENU_MNEMONICS) },
        doc: Some("A variable controlling whether menus can be opened with their keyboard\nshortcut (Alt+mnemonic).\n\nIf the mnemonics are enabled, then menus can be opened by pressing the Alt\nkey and the corresponding mnemonic (for example, Alt+F opens the File\nmenu). However, in case an invalid mnemonic is pressed, Windows makes an\naudible beep to convey that nothing happened. This is true even if the\nwindow has no menu at all!\n\nBecause most SDL applications don't have menus, and some want to use the\nAlt key for other purposes, SDL disables mnemonics (and the beeping) by\ndefault.\n\nNote: This also affects keyboard events: with mnemonics enabled, when a\nmenu is opened from the keyboard, you will not receive a KEYUP event for\nthe mnemonic key, and *might* not receive one for Alt.\n\nThe variable can be set to the following values:\n\n- \"0\": Alt+mnemonic does nothing, no beeping. (default)\n- \"1\": Alt+mnemonic opens menus, invalid mnemonics produce a beep.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP",
        short_name: "WINDOWS_ENABLE_MESSAGELOOP",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP) },
        doc: Some("A variable controlling whether the windows message loop is processed by\nSDL.\n\nThe variable can be set to the following values:\n\n- \"0\": The window message loop is not run.\n- \"1\": The window message loop is processed in [`SDL_PumpEvents()`]. (default)\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_WINDOWS_GAMEINPUT",
        short_name: "WINDOWS_GAMEINPUT",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_WINDOWS_GAMEINPUT) },
        doc: Some("A variable controlling whether GameInput is used for raw keyboard and mouse\non Windows.\n\nThe variable can be set to the following values:\n\n- \"0\": GameInput is not used for raw keyboard and mouse events.\n- \"1\": GameInput is used for raw keyboard and mouse events, if available.\n(default)\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_WINDOWS_RAW_KEYBOARD",
        short_name: "WINDOWS_RAW_KEYBOARD",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_WINDOWS_RAW_KEYBOARD) },
        doc: Some("A variable controlling whether raw keyboard events are used on Windows.\n\nThe variable can be set to the following values:\n\n- \"0\": The Windows message loop is used for keyboard events. (default)\n- \"1\": Low latency raw keyboard events are used.\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_WINDOWS_FORCE_SEMAPHORE_KERNEL",
        short_name: "WINDOWS_FORCE_SEMAPHORE_KERNEL",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_WINDOWS_FORCE_SEMAPHORE_KERNEL) },
        doc: Some("A variable controlling whether SDL uses Kernel Semaphores on Windows.\n\nKernel Semaphores are inter-process and require a context switch on every\ninteraction. On Windows 8 and newer, the WaitOnAddress API is available.\nUsing that and atomics to implement semaphores increases performance. SDL\nwill fall back to Kernel Objects on older OS versions or if forced to by\nthis hint.\n\nThe variable can be set to the following values:\n\n- \"0\": Use Atomics and WaitOnAddress API when available, otherwise fall\nback to Kernel Objects. (default)\n- \"1\": Force the use of Kernel Objects in all cases.\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_WINDOWS_INTRESOURCE_ICON",
        short_name: "WINDOWS_INTRESOURCE_ICON",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_WINDOWS_INTRESOURCE_ICON) },
        doc: Some("A variable to specify custom icon resource id from RC file on Windows\nplatform.\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_WINDOWS_INTRESOURCE_ICON_SMALL",
        short_name: "WINDOWS_INTRESOURCE_ICON_SMALL",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_WINDOWS_INTRESOURCE_ICON_SMALL) },
        doc: Some("A variable to specify custom icon resource id from RC file on Windows\nplatform.\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_WINDOWS_USE_D3D9EX",
        short_name: "WINDOWS_USE_D3D9EX",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_WINDOWS_USE_D3D9EX) },
        doc: Some("A variable controlling whether SDL uses the D3D9Ex API introduced in\nWindows Vista, instead of normal D3D9.\n\nDirect3D 9Ex contains changes to state management that can eliminate device\nloss errors during scenarios like Alt+Tab or UAC prompts. D3D9Ex may\nrequire some changes to your application to cope with the new behavior, so\nthis is disabled by default.\n\nFor more information on Direct3D 9Ex, see:\n\n- <https://docs.microsoft.com/en-us/windows/win32/direct3darticles/graphics-apis-in-windows-vista#direct3d-9ex>\n- <https://docs.microsoft.com/en-us/windows/win32/direct3darticles/direct3d-9ex-improvements>\n\nThe variable can be set to the following values:\n\n- \"0\": Use the original Direct3D 9 API. (default)\n- \"1\": Use the Direct3D 9Ex API on Vista and later (and fall back if D3D9Ex\nis unavailable)\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_WINDOWS_ERASE_BACKGROUND_MODE",
        short_name: "WINDOWS_ERASE_BACKGROUND_MODE",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_WINDOWS_ERASE_BACKGROUND_MODE) },
        doc: Some("A variable controlling whether SDL will clear the window contents when the\nWM_ERASEBKGND message is received.\n\nThe variable can be set to the following values:\n\n- \"0\"/\"never\": Never clear the window.\n- \"1\"/\"initial\": Clear the window when the first WM_ERASEBKGND event fires.\n(default)\n- \"2\"/\"always\": Clear the window on every WM_ERASEBKGND event.\n\nThis hint should be set before creating a window.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_X11_FORCE_OVERRIDE_REDIRECT",
        short_name: "X11_FORCE_OVERRIDE_REDIRECT",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_X11_FORCE_OVERRIDE_REDIRECT) },
        doc: Some("A variable controlling whether X11 windows are marked as override-redirect.\n\nIf set, this _might_ increase framerate at the expense of the desktop not\nworking as expected. Override-redirect windows aren't noticed by the window\nmanager at all.\n\nYou should probably only use this for fullscreen windows, and you probably\nshouldn't even use it for that. But it's here if you want to try!\n\nThe variable can be set to the following values:\n\n- \"0\": Do not mark the window as override-redirect. (default)\n- \"1\": Mark the window as override-redirect.\n\nThis hint should be set before creating a window.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_X11_WINDOW_TYPE",
        short_name: "X11_WINDOW_TYPE",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_X11_WINDOW_TYPE) },
        doc: Some("A variable specifying the type of an X11 window.\n\nDuring [`SDL_CreateWindow`], SDL uses the _NET_WM_WINDOW_TYPE X11 property to\nreport to the window manager the type of window it wants to create. This\nmight be set to various things if [`SDL_WINDOW_TOOLTIP`] or\n[`SDL_WINDOW_POPUP_MENU`], etc, were specified. For \"normal\" windows that\nhaven't set a specific type, this hint can be used to specify a custom\ntype. For example, a dock window might set this to\n\"_NET_WM_WINDOW_TYPE_DOCK\".\n\nThis hint should be set before creating a window.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_X11_XCB_LIBRARY",
        short_name: "X11_XCB_LIBRARY",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_X11_XCB_LIBRARY) },
        doc: Some("Specify the XCB library to load for the X11 driver.\n\nThe default is platform-specific, often \"libX11-xcb.so.1\".\n\nThis hint should be set before initializing the video subsystem.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_XINPUT_ENABLED",
        short_name: "XINPUT_ENABLED",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_XINPUT_ENABLED) },
        doc: Some("A variable controlling whether XInput should be used for controller\nhandling.\n\nThe variable can be set to the following values:\n\n- \"0\": XInput is not enabled.\n- \"1\": XInput is enabled. (default)\n\nThis hint should be set before SDL is initialized.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_ASSERT",
        short_name: "ASSERT",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_ASSERT) },
        doc: Some("A variable controlling response to [`SDL_assert`] failures.\n\nThe variable can be set to the following case-sensitive values:\n\n- \"abort\": Program terminates immediately.\n- \"break\": Program triggers a debugger breakpoint.\n- \"retry\": Program reruns the SDL_assert's test again.\n- \"ignore\": Program continues on, ignoring this assertion failure this\ntime.\n- \"always_ignore\": Program continues on, ignoring this assertion failure\nfor the rest of the run.\n\nNote that [`SDL_SetAssertionHandler`] offers a programmatic means to deal with\nassertion failures through a callback, and this hint is largely intended to\nbe used via environment variables by end users and automated tools.\n\nThis hint should be set before an assertion failure is triggered and can be\nchanged at any time.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_PEN_MOUSE_EVENTS",
        short_name: "PEN_MOUSE_EVENTS",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_PEN_MOUSE_EVENTS) },
        doc: Some("A variable controlling whether pen events should generate synthetic mouse\nevents.\n\nThe variable can be set to the following values:\n\n- \"0\": Pen events will not generate mouse events.\n- \"1\": Pen events will generate mouse events. (default)\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
    Hint {
        module: "hints",
        name: "SDL_HINT_PEN_TOUCH_EVENTS",
        short_name: "PEN_TOUCH_EVENTS",
        value: unsafe { CStr::from_ptr(crate::hints::SDL_HINT_PEN_TOUCH_EVENTS) },
        doc: Some("A variable controlling whether pen events should generate synthetic touch\nevents.\n\nThe variable can be set to the following values:\n\n- \"0\": Pen events will not generate touch events.\n- \"1\": Pen events will generate touch events. (default)\n\nThis hint can be set anytime.\n\n## Availability\nThis hint is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
    },
];

/// Metadata for property constants in this crate
pub static PROPERTIES: &[Property] = &[
    Property {
        module: "dialog",
        name: "SDL_PROP_FILE_DIALOG_FILTERS_POINTER",
        short_name: "FILE_DIALOG_FILTERS",
        value: unsafe { CStr::from_ptr(crate::dialog::SDL_PROP_FILE_DIALOG_FILTERS_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "dialog",
        name: "SDL_PROP_FILE_DIALOG_NFILTERS_NUMBER",
        short_name: "FILE_DIALOG_NFILTERS",
        value: unsafe { CStr::from_ptr(crate::dialog::SDL_PROP_FILE_DIALOG_NFILTERS_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "dialog",
        name: "SDL_PROP_FILE_DIALOG_WINDOW_POINTER",
        short_name: "FILE_DIALOG_WINDOW",
        value: unsafe { CStr::from_ptr(crate::dialog::SDL_PROP_FILE_DIALOG_WINDOW_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "dialog",
        name: "SDL_PROP_FILE_DIALOG_LOCATION_STRING",
        short_name: "FILE_DIALOG_LOCATION",
        value: unsafe { CStr::from_ptr(crate::dialog::SDL_PROP_FILE_DIALOG_LOCATION_STRING) },
        ty: SDL_PropertyType::STRING,
        doc: None,
        available_since: None,
    },
    Property {
        module: "dialog",
        name: "SDL_PROP_FILE_DIALOG_MANY_BOOLEAN",
        short_name: "FILE_DIALOG_MANY",
        value: unsafe { CStr::from_ptr(crate::dialog::SDL_PROP_FILE_DIALOG_MANY_BOOLEAN) },
        ty: SDL_PropertyType::BOOLEAN,
        doc: None,
        available_since: None,
    },
    Property {
        module: "dialog",
        name: "SDL_PROP_FILE_DIALOG_TITLE_STRING",
        short_name: "FILE_DIALOG_TITLE",
        value: unsafe { CStr::from_ptr(crate::dialog::SDL_PROP_FILE_DIALOG_TITLE_STRING) },
        ty: SDL_PropertyType::STRING,
        doc: None,
        available_since: None,
    },
    Property {
        module: "dialog",
        name: "SDL_PROP_FILE_DIALOG_ACCEPT_STRING",
        short_name: "FILE_DIALOG_ACCEPT",
        value: unsafe { CStr::from_ptr(crate::dialog::SDL_PROP_FILE_DIALOG_ACCEPT_STRING) },
        ty: SDL_PropertyType::STRING,
        doc: None,
        available_since: None,
    },
    Property {
        module: "dialog",
        name: "SDL_PROP_FILE_DIALOG_CANCEL_STRING",
        short_name: "FILE_DIALOG_CANCEL",
        value: unsafe { CStr::from_ptr(crate::dialog::SDL_PROP_FILE_DIALOG_CANCEL_STRING) },
        ty: SDL_PropertyType::STRING,
        doc: None,
        available_since: None,
    },
    Property {
        module: "gamepad",
        name: "SDL_PROP_GAMEPAD_CAP_MONO_LED_BOOLEAN",
        short_name: "GAMEPAD_CAP_MONO_LED",
        value: unsafe { CStr::from_ptr(crate::gamepad::SDL_PROP_GAMEPAD_CAP_MONO_LED_BOOLEAN) },
        ty: SDL_PropertyType::BOOLEAN,
        doc: None,
        available_since: None,
    },
    Property {
        module: "gamepad",
        name: "SDL_PROP_GAMEPAD_CAP_RGB_LED_BOOLEAN",
        short_name: "GAMEPAD_CAP_RGB_LED",
        value: unsafe { CStr::from_ptr(crate::gamepad::SDL_PROP_GAMEPAD_CAP_RGB_LED_BOOLEAN) },
        ty: SDL_PropertyType::BOOLEAN,
        doc: None,
        available_since: None,
    },
    Property {
        module: "gamepad",
        name: "SDL_PROP_GAMEPAD_CAP_PLAYER_LED_BOOLEAN",
        short_name: "GAMEPAD_CAP_PLAYER_LED",
        value: unsafe { CStr::from_ptr(crate::gamepad::SDL_PROP_GAMEPAD_CAP_PLAYER_LED_BOOLEAN) },
        ty: SDL_PropertyType::BOOLEAN,
        doc: None,
        available_since: None,
    },
    Property {
        module: "gamepad",
        name: "SDL_PROP_GAMEPAD_CAP_RUMBLE_BOOLEAN",
        short_name: "GAMEPAD_CAP_RUMBLE",
        value: unsafe { CStr::from_ptr(crate::gamepad::SDL_PROP_GAMEPAD_CAP_RUMBLE_BOOLEAN) },
        ty: SDL_PropertyType::BOOLEAN,
        doc: None,
        available_since: None,
    },
    Property {
        module: "gamepad",
        name: "SDL_PROP_GAMEPAD_CAP_TRIGGER_RUMBLE_BOOLEAN",
        short_name: "GAMEPAD_CAP_TRIGGER_RUMBLE",
        value: unsafe { CStr::from_ptr(crate::gamepad::SDL_PROP_GAMEPAD_CAP_TRIGGER_RUMBLE_BOOLEAN) },
        ty: SDL_PropertyType::BOOLEAN,
        doc: None,
        available_since: None,
    },
    Property {
        module: "gpu",
        name: "SDL_PROP_GPU_DEVICE_CREATE_DEBUGMODE_BOOLEAN",
        short_name: "GPU_DEVICE_CREATE_DEBUGMODE",
        value: unsafe { CStr::from_ptr(crate::gpu::SDL_PROP_GPU_DEVICE_CREATE_DEBUGMODE_BOOLEAN) },
        ty: SDL_PropertyType::BOOLEAN,
        doc: None,
        available_since: None,
    },
    Property {
        module: "gpu",
        name: "SDL_PROP_GPU_DEVICE_CREATE_PREFERLOWPOWER_BOOLEAN",
        short_name: "GPU_DEVICE_CREATE_PREFERLOWPOWER",
        value: unsafe { CStr::from_ptr(crate::gpu::SDL_PROP_GPU_DEVICE_CREATE_PREFERLOWPOWER_BOOLEAN) },
        ty: SDL_PropertyType::BOOLEAN,
        doc: None,
        available_since: None,
    },
    Property {
        module: "gpu",
        name: "SDL_PROP_GPU_DEVICE_CREATE_NAME_STRING",
        short_name: "GPU_DEVICE_CREATE_NAME",
        value: unsafe { CStr::from_ptr(crate::gpu::SDL_PROP_GPU_DEVICE_CREATE_NAME_STRING) },
        ty: SDL_PropertyType::STRING,
        doc: None,
        available_since: None,
    },
    Property {
        module: "gpu",
        name: "SDL_PROP_GPU_DEVICE_CREATE_SHADERS_PRIVATE_BOOLEAN",
        short_name: "GPU_DEVICE_CREATE_SHADERS_PRIVATE",
        value: unsafe { CStr::from_ptr(crate::gpu::SDL_PROP_GPU_DEVICE_CREATE_SHADERS_PRIVATE_BOOLEAN) },
        ty: SDL_PropertyType::BOOLEAN,
        doc: None,
        available_since: None,
    },
    Property {
        module: "gpu",
        name: "SDL_PROP_GPU_DEVICE_CREATE_SHADERS_SPIRV_BOOLEAN",
        short_name: "GPU_DEVICE_CREATE_SHADERS_SPIRV",
        value: unsafe { CStr::from_ptr(crate::gpu::SDL_PROP_GPU_DEVICE_CREATE_SHADERS_SPIRV_BOOLEAN) },
        ty: SDL_PropertyType::BOOLEAN,
        doc: None,
        available_since: None,
    },
    Property {
        module: "gpu",
        name: "SDL_PROP_GPU_DEVICE_CREATE_SHADERS_DXBC_BOOLEAN",
        short_name: "GPU_DEVICE_CREATE_SHADERS_DXBC",
        value: unsafe { CStr::from_ptr(crate::gpu::SDL_PROP_GPU_DEVICE_CREATE_SHADERS_DXBC_BOOLEAN) },
        ty: SDL_PropertyType::BOOLEAN,
        doc: None,
        available_since: None,
    },
    Property {
        module: "gpu",
        name: "SDL_PROP_GPU_DEVICE_CREATE_SHADERS_DXIL_BOOLEAN",
        short_name: "GPU_DEVICE_CREATE_SHADERS_DXIL",
        value: unsafe { CStr::from_ptr(crate::gpu::SDL_PROP_GPU_DEVICE_CREATE_SHADERS_DXIL_BOOLEAN) },
        ty: SDL_PropertyType::BOOLEAN,
        doc: None,
        available_since: None,
    },
    Property {
        module: "gpu",
        name: "SDL_PROP_GPU_DEVICE_CREATE_SHADERS_MSL_BOOLEAN",
        short_name: "GPU_DEVICE_CREATE_SHADERS_MSL",
        value: unsafe { CStr::from_ptr(crate::gpu::SDL_PROP_GPU_DEVICE_CREATE_SHADERS_MSL_BOOLEAN) },
        ty: SDL_PropertyType::BOOLEAN,
        doc: None,
        available_since: None,
    },
    Property {
        module: "gpu",
        name: "SDL_PROP_GPU_DEVICE_CREATE_SHADERS_METALLIB_BOOLEAN",
        short_name: "GPU_DEVICE_CREATE_SHADERS_METALLIB",
        value: unsafe { CStr::from_ptr(crate::gpu::SDL_PROP_GPU_DEVICE_CREATE_SHADERS_METALLIB_BOOLEAN) },
        ty: SDL_PropertyType::BOOLEAN,
        doc: None,
        available_since: None,
    },
    Property {
        module: "gpu",
        name: "SDL_PROP_GPU_DEVICE_CREATE_D3D12_SEMANTIC_NAME_STRING",
        short_name: "GPU_DEVICE_CREATE_D3D12_SEMANTIC_NAME",
        value: unsafe { CStr::from_ptr(crate::gpu::SDL_PROP_GPU_DEVICE_CREATE_D3D12_SEMANTIC_NAME_STRING) },
        ty: SDL_PropertyType::STRING,
        doc: None,
        available_since: None,
    },
    Property {
        module: "gpu",
        name: "SDL_PROP_GPU_COMPUTEPIPELINE_CREATE_NAME_STRING",
        short_name: "GPU_COMPUTEPIPELINE_CREATE_NAME",
        value: unsafe { CStr::from_ptr(crate::gpu::SDL_PROP_GPU_COMPUTEPIPELINE_CREATE_NAME_STRING) },
        ty: SDL_PropertyType::STRING,
        doc: None,
        available_since: None,
    },
    Property {
        module: "gpu",
        name: "SDL_PROP_GPU_GRAPHICSPIPELINE_CREATE_NAME_STRING",
        short_name: "GPU_GRAPHICSPIPELINE_CREATE_NAME",
        value: unsafe { CStr::from_ptr(crate::gpu::SDL_PROP_GPU_GRAPHICSPIPELINE_CREATE_NAME_STRING) },
        ty: SDL_PropertyType::STRING,
        doc: None,
        available_since: None,
    },
    Property {
        module: "gpu",
        name: "SDL_PROP_GPU_SAMPLER_CREATE_NAME_STRING",
        short_name: "GPU_SAMPLER_CREATE_NAME",
        value: unsafe { CStr::from_ptr(crate::gpu::SDL_PROP_GPU_SAMPLER_CREATE_NAME_STRING) },
        ty: SDL_PropertyType::STRING,
        doc: None,
        available_since: None,
    },
    Property {
        module: "gpu",
        name: "SDL_PROP_GPU_SHADER_CREATE_NAME_STRING",
        short_name: "GPU_SHADER_CREATE_NAME",
        value: unsafe { CStr::from_ptr(crate::gpu::SDL_PROP_GPU_SHADER_CREATE_NAME_STRING) },
        ty: SDL_PropertyType::STRING,
        doc: None,
        available_since: None,
    },
    Property {
        module: "gpu",
        name: "SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_R_FLOAT",
        short_name: "GPU_TEXTURE_CREATE_D3D12_CLEAR_R",
        value: unsafe { CStr::from_ptr(crate::gpu::SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_R_FLOAT) },
        ty: SDL_PropertyType::FLOAT,
        doc: None,
        available_since: None,
    },
    Property {
        module: "gpu",
        name: "SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_G_FLOAT",
        short_name: "GPU_TEXTURE_CREATE_D3D12_CLEAR_G",
        value: unsafe { CStr::from_ptr(crate::gpu::SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_G_FLOAT) },
        ty: SDL_PropertyType::FLOAT,
        doc: None,
        available_since: None,
    },
    Property {
        module: "gpu",
        name: "SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_B_FLOAT",
        short_name: "GPU_TEXTURE_CREATE_D3D12_CLEAR_B",
        value: unsafe { CStr::from_ptr(crate::gpu::SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_B_FLOAT) },
        ty: SDL_PropertyType::FLOAT,
        doc: None,
        available_since: None,
    },
    Property {
        module: "gpu",
        name: "SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_A_FLOAT",
        short_name: "GPU_TEXTURE_CREATE_D3D12_CLEAR_A",
        value: unsafe { CStr::from_ptr(crate::gpu::SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_A_FLOAT) },
        ty: SDL_PropertyType::FLOAT,
        doc: None,
        available_since: None,
    },
    Property {
        module: "gpu",
        name: "SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_DEPTH_FLOAT",
        short_name: "GPU_TEXTURE_CREATE_D3D12_CLEAR_DEPTH",
        value: unsafe { CStr::from_ptr(crate::gpu::SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_DEPTH_FLOAT) },
        ty: SDL_PropertyType::FLOAT,
        doc: None,
        available_since: None,
    },
    Property {
        module: "gpu",
        name: "SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_STENCIL_UINT8",
        short_name: "GPU_TEXTURE_CREATE_D3D12_CLEAR_STENCIL_UINT8",
        value: unsafe { CStr::from_ptr(crate::gpu::SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_STENCIL_UINT8) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "gpu",
        name: "SDL_PROP_GPU_TEXTURE_CREATE_NAME_STRING",
        short_name: "GPU_TEXTURE_CREATE_NAME",
        value: unsafe { CStr::from_ptr(crate::gpu::SDL_PROP_GPU_TEXTURE_CREATE_NAME_STRING) },
        ty: SDL_PropertyType::STRING,
        doc: None,
        available_since: None,
    },
    Property {
        module: "gpu",
        name: "SDL_PROP_GPU_BUFFER_CREATE_NAME_STRING",
        short_name: "GPU_BUFFER_CREATE_NAME",
        value: unsafe { CStr::from_ptr(crate::gpu::SDL_PROP_GPU_BUFFER_CREATE_NAME_STRING) },
        ty: SDL_PropertyType::STRING,
        doc: None,
        available_since: None,
    },
    Property {
        module: "gpu",
        name: "SDL_PROP_GPU_TRANSFERBUFFER_CREATE_NAME_STRING",
        short_name: "GPU_TRANSFERBUFFER_CREATE_NAME",
        value: unsafe { CStr::from_ptr(crate::gpu::SDL_PROP_GPU_TRANSFERBUFFER_CREATE_NAME_STRING) },
        ty: SDL_PropertyType::STRING,
        doc: None,
        available_since: None,
    },
    Property {
        module: "init",
        name: "SDL_PROP_APP_METADATA_NAME_STRING",
        short_name: "APP_METADATA_NAME",
        value: unsafe { CStr::from_ptr(crate::init::SDL_PROP_APP_METADATA_NAME_STRING) },
        ty: SDL_PropertyType::STRING,
        doc: None,
        available_since: None,
    },
    Property {
        module: "init",
        name: "SDL_PROP_APP_METADATA_VERSION_STRING",
        short_name: "APP_METADATA_VERSION",
        value: unsafe { CStr::from_ptr(crate::init::SDL_PROP_APP_METADATA_VERSION_STRING) },
        ty: SDL_PropertyType::STRING,
        doc: None,
        available_since: None,
    },
    Property {
        module: "init",
        name: "SDL_PROP_APP_METADATA_IDENTIFIER_STRING",
        short_name: "APP_METADATA_IDENTIFIER",
        value: unsafe { CStr::from_ptr(crate::init::SDL_PROP_APP_METADATA_IDENTIFIER_STRING) },
        ty: SDL_PropertyType::STRING,
        doc: None,
        available_since: None,
    },
    Property {
        module: "init",
        name: "SDL_PROP_APP_METADATA_CREATOR_STRING",
        short_name: "APP_METADATA_CREATOR",
        value: unsafe { CStr::from_ptr(crate::init::SDL_PROP_APP_METADATA_CREATOR_STRING) },
        ty: SDL_PropertyType::STRING,
        doc: None,
        available_since: None,
    },
    Property {
        module: "init",
        name: "SDL_PROP_APP_METADATA_COPYRIGHT_STRING",
        short_name: "APP_METADATA_COPYRIGHT",
        value: unsafe { CStr::from_ptr(crate::init::SDL_PROP_APP_METADATA_COPYRIGHT_STRING) },
        ty: SDL_PropertyType::STRING,
        doc: None,
        available_since: None,
    },
    Property {
        module: "init",
        name: "SDL_PROP_APP_METADATA_URL_STRING",
        short_name: "APP_METADATA_URL",
        value: unsafe { CStr::from_ptr(crate::init::SDL_PROP_APP_METADATA_URL_STRING) },
        ty: SDL_PropertyType::STRING,
        doc: None,
        available_since: None,
    },
    Property {
        module: "init",
        name: "SDL_PROP_APP_METADATA_TYPE_STRING",
        short_name: "APP_METADATA_TYPE",
        value: unsafe { CStr::from_ptr(crate::init::SDL_PROP_APP_METADATA_TYPE_STRING) },
        ty: SDL_PropertyType::STRING,
        doc: None,
        available_since: None,
    },
    Property {
        module: "iostream",
        name: "SDL_PROP_IOSTREAM_WINDOWS_HANDLE_POINTER",
        short_name: "IOSTREAM_WINDOWS_HANDLE",
        value: unsafe { CStr::from_ptr(crate::iostream::SDL_PROP_IOSTREAM_WINDOWS_HANDLE_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "iostream",
        name: "SDL_PROP_IOSTREAM_STDIO_FILE_POINTER",
        short_name: "IOSTREAM_STDIO_FILE",
        value: unsafe { CStr::from_ptr(crate::iostream::SDL_PROP_IOSTREAM_STDIO_FILE_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "iostream",
        name: "SDL_PROP_IOSTREAM_FILE_DESCRIPTOR_NUMBER",
        short_name: "IOSTREAM_FILE_DESCRIPTOR",
        value: unsafe { CStr::from_ptr(crate::iostream::SDL_PROP_IOSTREAM_FILE_DESCRIPTOR_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "iostream",
        name: "SDL_PROP_IOSTREAM_ANDROID_AASSET_POINTER",
        short_name: "IOSTREAM_ANDROID_AASSET",
        value: unsafe { CStr::from_ptr(crate::iostream::SDL_PROP_IOSTREAM_ANDROID_AASSET_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "iostream",
        name: "SDL_PROP_IOSTREAM_MEMORY_POINTER",
        short_name: "IOSTREAM_MEMORY",
        value: unsafe { CStr::from_ptr(crate::iostream::SDL_PROP_IOSTREAM_MEMORY_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "iostream",
        name: "SDL_PROP_IOSTREAM_MEMORY_SIZE_NUMBER",
        short_name: "IOSTREAM_MEMORY_SIZE",
        value: unsafe { CStr::from_ptr(crate::iostream::SDL_PROP_IOSTREAM_MEMORY_SIZE_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "iostream",
        name: "SDL_PROP_IOSTREAM_DYNAMIC_MEMORY_POINTER",
        short_name: "IOSTREAM_DYNAMIC_MEMORY",
        value: unsafe { CStr::from_ptr(crate::iostream::SDL_PROP_IOSTREAM_DYNAMIC_MEMORY_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "iostream",
        name: "SDL_PROP_IOSTREAM_DYNAMIC_CHUNKSIZE_NUMBER",
        short_name: "IOSTREAM_DYNAMIC_CHUNKSIZE",
        value: unsafe { CStr::from_ptr(crate::iostream::SDL_PROP_IOSTREAM_DYNAMIC_CHUNKSIZE_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "joystick",
        name: "SDL_PROP_JOYSTICK_CAP_MONO_LED_BOOLEAN",
        short_name: "JOYSTICK_CAP_MONO_LED",
        value: unsafe { CStr::from_ptr(crate::joystick::SDL_PROP_JOYSTICK_CAP_MONO_LED_BOOLEAN) },
        ty: SDL_PropertyType::BOOLEAN,
        doc: None,
        available_since: None,
    },
    Property {
        module: "joystick",
        name: "SDL_PROP_JOYSTICK_CAP_RGB_LED_BOOLEAN",
        short_name: "JOYSTICK_CAP_RGB_LED",
        value: unsafe { CStr::from_ptr(crate::joystick::SDL_PROP_JOYSTICK_CAP_RGB_LED_BOOLEAN) },
        ty: SDL_PropertyType::BOOLEAN,
        doc: None,
        available_since: None,
    },
    Property {
        module: "joystick",
        name: "SDL_PROP_JOYSTICK_CAP_PLAYER_LED_BOOLEAN",
        short_name: "JOYSTICK_CAP_PLAYER_LED",
        value: unsafe { CStr::from_ptr(crate::joystick::SDL_PROP_JOYSTICK_CAP_PLAYER_LED_BOOLEAN) },
        ty: SDL_PropertyType::BOOLEAN,
        doc: None,
        available_since: None,
    },
    Property {
        module: "joystick",
        name: "SDL_PROP_JOYSTICK_CAP_RUMBLE_BOOLEAN",
        short_name: "JOYSTICK_CAP_RUMBLE",
        value: unsafe { CStr::from_ptr(crate::joystick::SDL_PROP_JOYSTICK_CAP_RUMBLE_BOOLEAN) },
        ty: SDL_PropertyType::BOOLEAN,
        doc: None,
        available_since: None,
    },
    Property {
        module: "joystick",
        name: "SDL_PROP_JOYSTICK_CAP_TRIGGER_RUMBLE_BOOLEAN",
        short_name: "JOYSTICK_CAP_TRIGGER_RUMBLE",
        value: unsafe { CStr::from_ptr(crate::joystick::SDL_PROP_JOYSTICK_CAP_TRIGGER_RUMBLE_BOOLEAN) },
        ty: SDL_PropertyType::BOOLEAN,
        doc: None,
        available_since: None,
    },
    Property {
        module: "keyboard",
        name: "SDL_PROP_TEXTINPUT_TYPE_NUMBER",
        short_name: "TEXTINPUT_TYPE",
        value: unsafe { CStr::from_ptr(crate::keyboard::SDL_PROP_TEXTINPUT_TYPE_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "keyboard",
        name: "SDL_PROP_TEXTINPUT_CAPITALIZATION_NUMBER",
        short_name: "TEXTINPUT_CAPITALIZATION",
        value: unsafe { CStr::from_ptr(crate::keyboard::SDL_PROP_TEXTINPUT_CAPITALIZATION_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "keyboard",
        name: "SDL_PROP_TEXTINPUT_AUTOCORRECT_BOOLEAN",
        short_name: "TEXTINPUT_AUTOCORRECT",
        value: unsafe { CStr::from_ptr(crate::keyboard::SDL_PROP_TEXTINPUT_AUTOCORRECT_BOOLEAN) },
        ty: SDL_PropertyType::BOOLEAN,
        doc: None,
        available_since: None,
    },
    Property {
        module: "keyboard",
        name: "SDL_PROP_TEXTINPUT_MULTILINE_BOOLEAN",
        short_name: "TEXTINPUT_MULTILINE",
        value: unsafe { CStr::from_ptr(crate::keyboard::SDL_PROP_TEXTINPUT_MULTILINE_BOOLEAN) },
        ty: SDL_PropertyType::BOOLEAN,
        doc: None,
        available_since: None,
    },
    Property {
        module: "keyboard",
        name: "SDL_PROP_TEXTINPUT_ANDROID_INPUTTYPE_NUMBER",
        short_name: "TEXTINPUT_ANDROID_INPUTTYPE",
        value: unsafe { CStr::from_ptr(crate::keyboard::SDL_PROP_TEXTINPUT_ANDROID_INPUTTYPE_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "process",
        name: "SDL_PROP_PROCESS_CREATE_ARGS_POINTER",
        short_name: "PROCESS_CREATE_ARGS",
        value: unsafe { CStr::from_ptr(crate::process::SDL_PROP_PROCESS_CREATE_ARGS_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "process",
        name: "SDL_PROP_PROCESS_CREATE_ENVIRONMENT_POINTER",
        short_name: "PROCESS_CREATE_ENVIRONMENT",
        value: unsafe { CStr::from_ptr(crate::process::SDL_PROP_PROCESS_CREATE_ENVIRONMENT_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "process",
        name: "SDL_PROP_PROCESS_CREATE_STDIN_NUMBER",
        short_name: "PROCESS_CREATE_STDIN",
        value: unsafe { CStr::from_ptr(crate::process::SDL_PROP_PROCESS_CREATE_STDIN_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "process",
        name: "SDL_PROP_PROCESS_CREATE_STDIN_POINTER",
        short_name: "PROCESS_CREATE_STDIN",
        value: unsafe { CStr::from_ptr(crate::process::SDL_PROP_PROCESS_CREATE_STDIN_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "process",
        name: "SDL_PROP_PROCESS_CREATE_STDOUT_NUMBER",
        short_name: "PROCESS_CREATE_STDOUT",
        value: unsafe { CStr::from_ptr(crate::process::SDL_PROP_PROCESS_CREATE_STDOUT_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "process",
        name: "SDL_PROP_PROCESS_CREATE_STDOUT_POINTER",
        short_name: "PROCESS_CREATE_STDOUT",
        value: unsafe { CStr::from_ptr(crate::process::SDL_PROP_PROCESS_CREATE_STDOUT_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "process",
        name: "SDL_PROP_PROCESS_CREATE_STDERR_NUMBER",
        short_name: "PROCESS_CREATE_STDERR",
        value: unsafe { CStr::from_ptr(crate::process::SDL_PROP_PROCESS_CREATE_STDERR_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "process",
        name: "SDL_PROP_PROCESS_CREATE_STDERR_POINTER",
        short_name: "PROCESS_CREATE_STDERR",
        value: unsafe { CStr::from_ptr(crate::process::SDL_PROP_PROCESS_CREATE_STDERR_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "process",
        name: "SDL_PROP_PROCESS_CREATE_STDERR_TO_STDOUT_BOOLEAN",
        short_name: "PROCESS_CREATE_STDERR_TO_STDOUT",
        value: unsafe { CStr::from_ptr(crate::process::SDL_PROP_PROCESS_CREATE_STDERR_TO_STDOUT_BOOLEAN) },
        ty: SDL_PropertyType::BOOLEAN,
        doc: None,
        available_since: None,
    },
    Property {
        module: "process",
        name: "SDL_PROP_PROCESS_CREATE_BACKGROUND_BOOLEAN",
        short_name: "PROCESS_CREATE_BACKGROUND",
        value: unsafe { CStr::from_ptr(crate::process::SDL_PROP_PROCESS_CREATE_BACKGROUND_BOOLEAN) },
        ty: SDL_PropertyType::BOOLEAN,
        doc: None,
        available_since: None,
    },
    Property {
        module: "process",
        name: "SDL_PROP_PROCESS_PID_NUMBER",
        short_name: "PROCESS_PID",
        value: unsafe { CStr::from_ptr(crate::process::SDL_PROP_PROCESS_PID_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "process",
        name: "SDL_PROP_PROCESS_STDIN_POINTER",
        short_name: "PROCESS_STDIN",
        value: unsafe { CStr::from_ptr(crate::process::SDL_PROP_PROCESS_STDIN_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "process",
        name: "SDL_PROP_PROCESS_STDOUT_POINTER",
        short_name: "PROCESS_STDOUT",
        value: unsafe { CStr::from_ptr(crate::process::SDL_PROP_PROCESS_STDOUT_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "process",
        name: "SDL_PROP_PROCESS_STDERR_POINTER",
        short_name: "PROCESS_STDERR",
        value: unsafe { CStr::from_ptr(crate::process::SDL_PROP_PROCESS_STDERR_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "process",
        name: "SDL_PROP_PROCESS_BACKGROUND_BOOLEAN",
        short_name: "PROCESS_BACKGROUND",
        value: unsafe { CStr::from_ptr(crate::process::SDL_PROP_PROCESS_BACKGROUND_BOOLEAN) },
        ty: SDL_PropertyType::BOOLEAN,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_RENDERER_CREATE_NAME_STRING",
        short_name: "RENDERER_CREATE_NAME",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_RENDERER_CREATE_NAME_STRING) },
        ty: SDL_PropertyType::STRING,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_RENDERER_CREATE_WINDOW_POINTER",
        short_name: "RENDERER_CREATE_WINDOW",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_RENDERER_CREATE_WINDOW_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_RENDERER_CREATE_SURFACE_POINTER",
        short_name: "RENDERER_CREATE_SURFACE",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_RENDERER_CREATE_SURFACE_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_RENDERER_CREATE_OUTPUT_COLORSPACE_NUMBER",
        short_name: "RENDERER_CREATE_OUTPUT_COLORSPACE",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_RENDERER_CREATE_OUTPUT_COLORSPACE_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_RENDERER_CREATE_PRESENT_VSYNC_NUMBER",
        short_name: "RENDERER_CREATE_PRESENT_VSYNC",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_RENDERER_CREATE_PRESENT_VSYNC_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_RENDERER_CREATE_VULKAN_INSTANCE_POINTER",
        short_name: "RENDERER_CREATE_VULKAN_INSTANCE",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_RENDERER_CREATE_VULKAN_INSTANCE_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_RENDERER_CREATE_VULKAN_SURFACE_NUMBER",
        short_name: "RENDERER_CREATE_VULKAN_SURFACE",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_RENDERER_CREATE_VULKAN_SURFACE_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_RENDERER_CREATE_VULKAN_PHYSICAL_DEVICE_POINTER",
        short_name: "RENDERER_CREATE_VULKAN_PHYSICAL_DEVICE",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_RENDERER_CREATE_VULKAN_PHYSICAL_DEVICE_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_RENDERER_CREATE_VULKAN_DEVICE_POINTER",
        short_name: "RENDERER_CREATE_VULKAN_DEVICE",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_RENDERER_CREATE_VULKAN_DEVICE_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_RENDERER_CREATE_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER",
        short_name: "RENDERER_CREATE_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_RENDERER_CREATE_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_RENDERER_CREATE_VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER",
        short_name: "RENDERER_CREATE_VULKAN_PRESENT_QUEUE_FAMILY_INDEX",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_RENDERER_CREATE_VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_RENDERER_NAME_STRING",
        short_name: "RENDERER_NAME",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_RENDERER_NAME_STRING) },
        ty: SDL_PropertyType::STRING,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_RENDERER_WINDOW_POINTER",
        short_name: "RENDERER_WINDOW",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_RENDERER_WINDOW_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_RENDERER_SURFACE_POINTER",
        short_name: "RENDERER_SURFACE",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_RENDERER_SURFACE_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_RENDERER_VSYNC_NUMBER",
        short_name: "RENDERER_VSYNC",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_RENDERER_VSYNC_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_RENDERER_MAX_TEXTURE_SIZE_NUMBER",
        short_name: "RENDERER_MAX_TEXTURE_SIZE",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_RENDERER_MAX_TEXTURE_SIZE_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_RENDERER_TEXTURE_FORMATS_POINTER",
        short_name: "RENDERER_TEXTURE_FORMATS",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_RENDERER_TEXTURE_FORMATS_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_RENDERER_OUTPUT_COLORSPACE_NUMBER",
        short_name: "RENDERER_OUTPUT_COLORSPACE",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_RENDERER_OUTPUT_COLORSPACE_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_RENDERER_HDR_ENABLED_BOOLEAN",
        short_name: "RENDERER_HDR_ENABLED",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_RENDERER_HDR_ENABLED_BOOLEAN) },
        ty: SDL_PropertyType::BOOLEAN,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_RENDERER_SDR_WHITE_POINT_FLOAT",
        short_name: "RENDERER_SDR_WHITE_POINT",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_RENDERER_SDR_WHITE_POINT_FLOAT) },
        ty: SDL_PropertyType::FLOAT,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_RENDERER_HDR_HEADROOM_FLOAT",
        short_name: "RENDERER_HDR_HEADROOM",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_RENDERER_HDR_HEADROOM_FLOAT) },
        ty: SDL_PropertyType::FLOAT,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_RENDERER_D3D9_DEVICE_POINTER",
        short_name: "RENDERER_D3D9_DEVICE",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_RENDERER_D3D9_DEVICE_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_RENDERER_D3D11_DEVICE_POINTER",
        short_name: "RENDERER_D3D11_DEVICE",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_RENDERER_D3D11_DEVICE_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_RENDERER_D3D11_SWAPCHAIN_POINTER",
        short_name: "RENDERER_D3D11_SWAPCHAIN",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_RENDERER_D3D11_SWAPCHAIN_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_RENDERER_D3D12_DEVICE_POINTER",
        short_name: "RENDERER_D3D12_DEVICE",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_RENDERER_D3D12_DEVICE_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_RENDERER_D3D12_SWAPCHAIN_POINTER",
        short_name: "RENDERER_D3D12_SWAPCHAIN",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_RENDERER_D3D12_SWAPCHAIN_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_RENDERER_D3D12_COMMAND_QUEUE_POINTER",
        short_name: "RENDERER_D3D12_COMMAND_QUEUE",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_RENDERER_D3D12_COMMAND_QUEUE_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_RENDERER_VULKAN_INSTANCE_POINTER",
        short_name: "RENDERER_VULKAN_INSTANCE",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_RENDERER_VULKAN_INSTANCE_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_RENDERER_VULKAN_SURFACE_NUMBER",
        short_name: "RENDERER_VULKAN_SURFACE",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_RENDERER_VULKAN_SURFACE_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_RENDERER_VULKAN_PHYSICAL_DEVICE_POINTER",
        short_name: "RENDERER_VULKAN_PHYSICAL_DEVICE",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_RENDERER_VULKAN_PHYSICAL_DEVICE_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_RENDERER_VULKAN_DEVICE_POINTER",
        short_name: "RENDERER_VULKAN_DEVICE",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_RENDERER_VULKAN_DEVICE_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_RENDERER_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER",
        short_name: "RENDERER_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_RENDERER_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_RENDERER_VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER",
        short_name: "RENDERER_VULKAN_PRESENT_QUEUE_FAMILY_INDEX",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_RENDERER_VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_RENDERER_VULKAN_SWAPCHAIN_IMAGE_COUNT_NUMBER",
        short_name: "RENDERER_VULKAN_SWAPCHAIN_IMAGE_COUNT",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_RENDERER_VULKAN_SWAPCHAIN_IMAGE_COUNT_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_RENDERER_GPU_DEVICE_POINTER",
        short_name: "RENDERER_GPU_DEVICE",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_RENDERER_GPU_DEVICE_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_TEXTURE_CREATE_COLORSPACE_NUMBER",
        short_name: "TEXTURE_CREATE_COLORSPACE",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_TEXTURE_CREATE_COLORSPACE_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_TEXTURE_CREATE_FORMAT_NUMBER",
        short_name: "TEXTURE_CREATE_FORMAT",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_TEXTURE_CREATE_FORMAT_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_TEXTURE_CREATE_ACCESS_NUMBER",
        short_name: "TEXTURE_CREATE_ACCESS",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_TEXTURE_CREATE_ACCESS_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_TEXTURE_CREATE_WIDTH_NUMBER",
        short_name: "TEXTURE_CREATE_WIDTH",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_TEXTURE_CREATE_WIDTH_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_TEXTURE_CREATE_HEIGHT_NUMBER",
        short_name: "TEXTURE_CREATE_HEIGHT",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_TEXTURE_CREATE_HEIGHT_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_TEXTURE_CREATE_SDR_WHITE_POINT_FLOAT",
        short_name: "TEXTURE_CREATE_SDR_WHITE_POINT",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_TEXTURE_CREATE_SDR_WHITE_POINT_FLOAT) },
        ty: SDL_PropertyType::FLOAT,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_TEXTURE_CREATE_HDR_HEADROOM_FLOAT",
        short_name: "TEXTURE_CREATE_HDR_HEADROOM",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_TEXTURE_CREATE_HDR_HEADROOM_FLOAT) },
        ty: SDL_PropertyType::FLOAT,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_POINTER",
        short_name: "TEXTURE_CREATE_D3D11_TEXTURE",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_U_POINTER",
        short_name: "TEXTURE_CREATE_D3D11_TEXTURE_U",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_U_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_V_POINTER",
        short_name: "TEXTURE_CREATE_D3D11_TEXTURE_V",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_V_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_POINTER",
        short_name: "TEXTURE_CREATE_D3D12_TEXTURE",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_U_POINTER",
        short_name: "TEXTURE_CREATE_D3D12_TEXTURE_U",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_U_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_V_POINTER",
        short_name: "TEXTURE_CREATE_D3D12_TEXTURE_V",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_V_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_TEXTURE_CREATE_METAL_PIXELBUFFER_POINTER",
        short_name: "TEXTURE_CREATE_METAL_PIXELBUFFER",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_TEXTURE_CREATE_METAL_PIXELBUFFER_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_NUMBER",
        short_name: "TEXTURE_CREATE_OPENGL_TEXTURE",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_UV_NUMBER",
        short_name: "TEXTURE_CREATE_OPENGL_TEXTURE_UV",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_UV_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_U_NUMBER",
        short_name: "TEXTURE_CREATE_OPENGL_TEXTURE_U",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_U_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_V_NUMBER",
        short_name: "TEXTURE_CREATE_OPENGL_TEXTURE_V",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_V_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_NUMBER",
        short_name: "TEXTURE_CREATE_OPENGLES2_TEXTURE",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_UV_NUMBER",
        short_name: "TEXTURE_CREATE_OPENGLES2_TEXTURE_UV",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_UV_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_U_NUMBER",
        short_name: "TEXTURE_CREATE_OPENGLES2_TEXTURE_U",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_U_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_V_NUMBER",
        short_name: "TEXTURE_CREATE_OPENGLES2_TEXTURE_V",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_V_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_TEXTURE_CREATE_VULKAN_TEXTURE_NUMBER",
        short_name: "TEXTURE_CREATE_VULKAN_TEXTURE",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_TEXTURE_CREATE_VULKAN_TEXTURE_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_TEXTURE_COLORSPACE_NUMBER",
        short_name: "TEXTURE_COLORSPACE",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_TEXTURE_COLORSPACE_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_TEXTURE_FORMAT_NUMBER",
        short_name: "TEXTURE_FORMAT",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_TEXTURE_FORMAT_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_TEXTURE_ACCESS_NUMBER",
        short_name: "TEXTURE_ACCESS",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_TEXTURE_ACCESS_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_TEXTURE_WIDTH_NUMBER",
        short_name: "TEXTURE_WIDTH",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_TEXTURE_WIDTH_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_TEXTURE_HEIGHT_NUMBER",
        short_name: "TEXTURE_HEIGHT",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_TEXTURE_HEIGHT_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_TEXTURE_SDR_WHITE_POINT_FLOAT",
        short_name: "TEXTURE_SDR_WHITE_POINT",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_TEXTURE_SDR_WHITE_POINT_FLOAT) },
        ty: SDL_PropertyType::FLOAT,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_TEXTURE_HDR_HEADROOM_FLOAT",
        short_name: "TEXTURE_HDR_HEADROOM",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_TEXTURE_HDR_HEADROOM_FLOAT) },
        ty: SDL_PropertyType::FLOAT,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_TEXTURE_D3D11_TEXTURE_POINTER",
        short_name: "TEXTURE_D3D11_TEXTURE",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_TEXTURE_D3D11_TEXTURE_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_TEXTURE_D3D11_TEXTURE_U_POINTER",
        short_name: "TEXTURE_D3D11_TEXTURE_U",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_TEXTURE_D3D11_TEXTURE_U_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_TEXTURE_D3D11_TEXTURE_V_POINTER",
        short_name: "TEXTURE_D3D11_TEXTURE_V",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_TEXTURE_D3D11_TEXTURE_V_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_TEXTURE_D3D12_TEXTURE_POINTER",
        short_name: "TEXTURE_D3D12_TEXTURE",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_TEXTURE_D3D12_TEXTURE_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_TEXTURE_D3D12_TEXTURE_U_POINTER",
        short_name: "TEXTURE_D3D12_TEXTURE_U",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_TEXTURE_D3D12_TEXTURE_U_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_TEXTURE_D3D12_TEXTURE_V_POINTER",
        short_name: "TEXTURE_D3D12_TEXTURE_V",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_TEXTURE_D3D12_TEXTURE_V_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_TEXTURE_OPENGL_TEXTURE_NUMBER",
        short_name: "TEXTURE_OPENGL_TEXTURE",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_TEXTURE_OPENGL_TEXTURE_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_TEXTURE_OPENGL_TEXTURE_UV_NUMBER",
        short_name: "TEXTURE_OPENGL_TEXTURE_UV",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_TEXTURE_OPENGL_TEXTURE_UV_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_TEXTURE_OPENGL_TEXTURE_U_NUMBER",
        short_name: "TEXTURE_OPENGL_TEXTURE_U",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_TEXTURE_OPENGL_TEXTURE_U_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_TEXTURE_OPENGL_TEXTURE_V_NUMBER",
        short_name: "TEXTURE_OPENGL_TEXTURE_V",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_TEXTURE_OPENGL_TEXTURE_V_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_TEXTURE_OPENGL_TEXTURE_TARGET_NUMBER",
        short_name: "TEXTURE_OPENGL_TEXTURE_TARGET",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_TEXTURE_OPENGL_TEXTURE_TARGET_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_TEXTURE_OPENGL_TEX_W_FLOAT",
        short_name: "TEXTURE_OPENGL_TEX_W",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_TEXTURE_OPENGL_TEX_W_FLOAT) },
        ty: SDL_PropertyType::FLOAT,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_TEXTURE_OPENGL_TEX_H_FLOAT",
        short_name: "TEXTURE_OPENGL_TEX_H",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_TEXTURE_OPENGL_TEX_H_FLOAT) },
        ty: SDL_PropertyType::FLOAT,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_NUMBER",
        short_name: "TEXTURE_OPENGLES2_TEXTURE",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_UV_NUMBER",
        short_name: "TEXTURE_OPENGLES2_TEXTURE_UV",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_UV_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_U_NUMBER",
        short_name: "TEXTURE_OPENGLES2_TEXTURE_U",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_U_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_V_NUMBER",
        short_name: "TEXTURE_OPENGLES2_TEXTURE_V",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_V_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_TARGET_NUMBER",
        short_name: "TEXTURE_OPENGLES2_TEXTURE_TARGET",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_TARGET_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "render",
        name: "SDL_PROP_TEXTURE_VULKAN_TEXTURE_NUMBER",
        short_name: "TEXTURE_VULKAN_TEXTURE",
        value: unsafe { CStr::from_ptr(crate::render::SDL_PROP_TEXTURE_VULKAN_TEXTURE_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "surface",
        name: "SDL_PROP_SURFACE_SDR_WHITE_POINT_FLOAT",
        short_name: "SURFACE_SDR_WHITE_POINT",
        value: unsafe { CStr::from_ptr(crate::surface::SDL_PROP_SURFACE_SDR_WHITE_POINT_FLOAT) },
        ty: SDL_PropertyType::FLOAT,
        doc: None,
        available_since: None,
    },
    Property {
        module: "surface",
        name: "SDL_PROP_SURFACE_HDR_HEADROOM_FLOAT",
        short_name: "SURFACE_HDR_HEADROOM",
        value: unsafe { CStr::from_ptr(crate::surface::SDL_PROP_SURFACE_HDR_HEADROOM_FLOAT) },
        ty: SDL_PropertyType::FLOAT,
        doc: None,
        available_since: None,
    },
    Property {
        module: "surface",
        name: "SDL_PROP_SURFACE_TONEMAP_OPERATOR_STRING",
        short_name: "SURFACE_TONEMAP_OPERATOR",
        value: unsafe { CStr::from_ptr(crate::surface::SDL_PROP_SURFACE_TONEMAP_OPERATOR_STRING) },
        ty: SDL_PropertyType::STRING,
        doc: None,
        available_since: None,
    },
    Property {
        module: "surface",
        name: "SDL_PROP_SURFACE_HOTSPOT_X_NUMBER",
        short_name: "SURFACE_HOTSPOT_X",
        value: unsafe { CStr::from_ptr(crate::surface::SDL_PROP_SURFACE_HOTSPOT_X_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "surface",
        name: "SDL_PROP_SURFACE_HOTSPOT_Y_NUMBER",
        short_name: "SURFACE_HOTSPOT_Y",
        value: unsafe { CStr::from_ptr(crate::surface::SDL_PROP_SURFACE_HOTSPOT_Y_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "thread",
        name: "SDL_PROP_THREAD_CREATE_ENTRY_FUNCTION_POINTER",
        short_name: "THREAD_CREATE_ENTRY_FUNCTION",
        value: unsafe { CStr::from_ptr(crate::thread::SDL_PROP_THREAD_CREATE_ENTRY_FUNCTION_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "thread",
        name: "SDL_PROP_THREAD_CREATE_NAME_STRING",
        short_name: "THREAD_CREATE_NAME",
        value: unsafe { CStr::from_ptr(crate::thread::SDL_PROP_THREAD_CREATE_NAME_STRING) },
        ty: SDL_PropertyType::STRING,
        doc: None,
        available_since: None,
    },
    Property {
        module: "thread",
        name: "SDL_PROP_THREAD_CREATE_USERDATA_POINTER",
        short_name: "THREAD_CREATE_USERDATA",
        value: unsafe { CStr::from_ptr(crate::thread::SDL_PROP_THREAD_CREATE_USERDATA_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "thread",
        name: "SDL_PROP_THREAD_CREATE_STACKSIZE_NUMBER",
        short_name: "THREAD_CREATE_STACKSIZE",
        value: unsafe { CStr::from_ptr(crate::thread::SDL_PROP_THREAD_CREATE_STACKSIZE_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_GLOBAL_VIDEO_WAYLAND_WL_DISPLAY_POINTER",
        short_name: "GLOBAL_VIDEO_WAYLAND_WL_DISPLAY",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_GLOBAL_VIDEO_WAYLAND_WL_DISPLAY_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: Some("The pointer to the global `wl_display` object used by the Wayland video\nbackend.\n\nCan be set before the video subsystem is initialized to import an external\n`wl_display` object from an application or toolkit for use in SDL, or read\nafter initialization to export the `wl_display` used by the Wayland video\nbackend. Setting this property after the video subsystem has been\ninitialized has no effect, and reading it when the video subsystem is\nuninitialized will either return the user provided value, if one was set\nprior to initialization, or NULL. See docs/README-wayland.md for more\ninformation.\n"),
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_DISPLAY_HDR_ENABLED_BOOLEAN",
        short_name: "DISPLAY_HDR_ENABLED",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_DISPLAY_HDR_ENABLED_BOOLEAN) },
        ty: SDL_PropertyType::BOOLEAN,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_DISPLAY_KMSDRM_PANEL_ORIENTATION_NUMBER",
        short_name: "DISPLAY_KMSDRM_PANEL_ORIENTATION",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_DISPLAY_KMSDRM_PANEL_ORIENTATION_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_CREATE_ALWAYS_ON_TOP_BOOLEAN",
        short_name: "WINDOW_CREATE_ALWAYS_ON_TOP",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_CREATE_ALWAYS_ON_TOP_BOOLEAN) },
        ty: SDL_PropertyType::BOOLEAN,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_CREATE_BORDERLESS_BOOLEAN",
        short_name: "WINDOW_CREATE_BORDERLESS",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_CREATE_BORDERLESS_BOOLEAN) },
        ty: SDL_PropertyType::BOOLEAN,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_CREATE_FOCUSABLE_BOOLEAN",
        short_name: "WINDOW_CREATE_FOCUSABLE",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_CREATE_FOCUSABLE_BOOLEAN) },
        ty: SDL_PropertyType::BOOLEAN,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_CREATE_EXTERNAL_GRAPHICS_CONTEXT_BOOLEAN",
        short_name: "WINDOW_CREATE_EXTERNAL_GRAPHICS_CONTEXT",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_CREATE_EXTERNAL_GRAPHICS_CONTEXT_BOOLEAN) },
        ty: SDL_PropertyType::BOOLEAN,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_CREATE_FLAGS_NUMBER",
        short_name: "WINDOW_CREATE_FLAGS",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_CREATE_FLAGS_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_CREATE_FULLSCREEN_BOOLEAN",
        short_name: "WINDOW_CREATE_FULLSCREEN",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_CREATE_FULLSCREEN_BOOLEAN) },
        ty: SDL_PropertyType::BOOLEAN,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_CREATE_HEIGHT_NUMBER",
        short_name: "WINDOW_CREATE_HEIGHT",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_CREATE_HEIGHT_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_CREATE_HIDDEN_BOOLEAN",
        short_name: "WINDOW_CREATE_HIDDEN",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_CREATE_HIDDEN_BOOLEAN) },
        ty: SDL_PropertyType::BOOLEAN,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_CREATE_HIGH_PIXEL_DENSITY_BOOLEAN",
        short_name: "WINDOW_CREATE_HIGH_PIXEL_DENSITY",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_CREATE_HIGH_PIXEL_DENSITY_BOOLEAN) },
        ty: SDL_PropertyType::BOOLEAN,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_CREATE_MAXIMIZED_BOOLEAN",
        short_name: "WINDOW_CREATE_MAXIMIZED",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_CREATE_MAXIMIZED_BOOLEAN) },
        ty: SDL_PropertyType::BOOLEAN,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_CREATE_MENU_BOOLEAN",
        short_name: "WINDOW_CREATE_MENU",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_CREATE_MENU_BOOLEAN) },
        ty: SDL_PropertyType::BOOLEAN,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_CREATE_METAL_BOOLEAN",
        short_name: "WINDOW_CREATE_METAL",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_CREATE_METAL_BOOLEAN) },
        ty: SDL_PropertyType::BOOLEAN,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_CREATE_MINIMIZED_BOOLEAN",
        short_name: "WINDOW_CREATE_MINIMIZED",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_CREATE_MINIMIZED_BOOLEAN) },
        ty: SDL_PropertyType::BOOLEAN,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_CREATE_MODAL_BOOLEAN",
        short_name: "WINDOW_CREATE_MODAL",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_CREATE_MODAL_BOOLEAN) },
        ty: SDL_PropertyType::BOOLEAN,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_CREATE_MOUSE_GRABBED_BOOLEAN",
        short_name: "WINDOW_CREATE_MOUSE_GRABBED",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_CREATE_MOUSE_GRABBED_BOOLEAN) },
        ty: SDL_PropertyType::BOOLEAN,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_CREATE_OPENGL_BOOLEAN",
        short_name: "WINDOW_CREATE_OPENGL",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_CREATE_OPENGL_BOOLEAN) },
        ty: SDL_PropertyType::BOOLEAN,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_CREATE_PARENT_POINTER",
        short_name: "WINDOW_CREATE_PARENT",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_CREATE_PARENT_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_CREATE_RESIZABLE_BOOLEAN",
        short_name: "WINDOW_CREATE_RESIZABLE",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_CREATE_RESIZABLE_BOOLEAN) },
        ty: SDL_PropertyType::BOOLEAN,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_CREATE_TITLE_STRING",
        short_name: "WINDOW_CREATE_TITLE",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_CREATE_TITLE_STRING) },
        ty: SDL_PropertyType::STRING,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_CREATE_TRANSPARENT_BOOLEAN",
        short_name: "WINDOW_CREATE_TRANSPARENT",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_CREATE_TRANSPARENT_BOOLEAN) },
        ty: SDL_PropertyType::BOOLEAN,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_CREATE_TOOLTIP_BOOLEAN",
        short_name: "WINDOW_CREATE_TOOLTIP",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_CREATE_TOOLTIP_BOOLEAN) },
        ty: SDL_PropertyType::BOOLEAN,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_CREATE_UTILITY_BOOLEAN",
        short_name: "WINDOW_CREATE_UTILITY",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_CREATE_UTILITY_BOOLEAN) },
        ty: SDL_PropertyType::BOOLEAN,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_CREATE_VULKAN_BOOLEAN",
        short_name: "WINDOW_CREATE_VULKAN",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_CREATE_VULKAN_BOOLEAN) },
        ty: SDL_PropertyType::BOOLEAN,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_CREATE_WIDTH_NUMBER",
        short_name: "WINDOW_CREATE_WIDTH",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_CREATE_WIDTH_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_CREATE_X_NUMBER",
        short_name: "WINDOW_CREATE_X",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_CREATE_X_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_CREATE_Y_NUMBER",
        short_name: "WINDOW_CREATE_Y",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_CREATE_Y_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_CREATE_COCOA_WINDOW_POINTER",
        short_name: "WINDOW_CREATE_COCOA_WINDOW",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_CREATE_COCOA_WINDOW_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_CREATE_COCOA_VIEW_POINTER",
        short_name: "WINDOW_CREATE_COCOA_VIEW",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_CREATE_COCOA_VIEW_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_CREATE_WAYLAND_SURFACE_ROLE_CUSTOM_BOOLEAN",
        short_name: "WINDOW_CREATE_WAYLAND_SURFACE_ROLE_CUSTOM",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_CREATE_WAYLAND_SURFACE_ROLE_CUSTOM_BOOLEAN) },
        ty: SDL_PropertyType::BOOLEAN,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_CREATE_WAYLAND_CREATE_EGL_WINDOW_BOOLEAN",
        short_name: "WINDOW_CREATE_WAYLAND_CREATE_EGL_WINDOW",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_CREATE_WAYLAND_CREATE_EGL_WINDOW_BOOLEAN) },
        ty: SDL_PropertyType::BOOLEAN,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_CREATE_WAYLAND_WL_SURFACE_POINTER",
        short_name: "WINDOW_CREATE_WAYLAND_WL_SURFACE",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_CREATE_WAYLAND_WL_SURFACE_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_CREATE_WIN32_HWND_POINTER",
        short_name: "WINDOW_CREATE_WIN32_HWND",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_CREATE_WIN32_HWND_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_CREATE_WIN32_PIXEL_FORMAT_HWND_POINTER",
        short_name: "WINDOW_CREATE_WIN32_PIXEL_FORMAT_HWND",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_CREATE_WIN32_PIXEL_FORMAT_HWND_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_CREATE_X11_WINDOW_NUMBER",
        short_name: "WINDOW_CREATE_X11_WINDOW",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_CREATE_X11_WINDOW_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_SHAPE_POINTER",
        short_name: "WINDOW_SHAPE",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_SHAPE_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_HDR_ENABLED_BOOLEAN",
        short_name: "WINDOW_HDR_ENABLED",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_HDR_ENABLED_BOOLEAN) },
        ty: SDL_PropertyType::BOOLEAN,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_SDR_WHITE_LEVEL_FLOAT",
        short_name: "WINDOW_SDR_WHITE_LEVEL",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_SDR_WHITE_LEVEL_FLOAT) },
        ty: SDL_PropertyType::FLOAT,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_HDR_HEADROOM_FLOAT",
        short_name: "WINDOW_HDR_HEADROOM",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_HDR_HEADROOM_FLOAT) },
        ty: SDL_PropertyType::FLOAT,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_ANDROID_WINDOW_POINTER",
        short_name: "WINDOW_ANDROID_WINDOW",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_ANDROID_WINDOW_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_ANDROID_SURFACE_POINTER",
        short_name: "WINDOW_ANDROID_SURFACE",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_ANDROID_SURFACE_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_UIKIT_WINDOW_POINTER",
        short_name: "WINDOW_UIKIT_WINDOW",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_UIKIT_WINDOW_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_UIKIT_METAL_VIEW_TAG_NUMBER",
        short_name: "WINDOW_UIKIT_METAL_VIEW_TAG",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_UIKIT_METAL_VIEW_TAG_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_UIKIT_OPENGL_FRAMEBUFFER_NUMBER",
        short_name: "WINDOW_UIKIT_OPENGL_FRAMEBUFFER",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_UIKIT_OPENGL_FRAMEBUFFER_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_UIKIT_OPENGL_RENDERBUFFER_NUMBER",
        short_name: "WINDOW_UIKIT_OPENGL_RENDERBUFFER",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_UIKIT_OPENGL_RENDERBUFFER_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_UIKIT_OPENGL_RESOLVE_FRAMEBUFFER_NUMBER",
        short_name: "WINDOW_UIKIT_OPENGL_RESOLVE_FRAMEBUFFER",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_UIKIT_OPENGL_RESOLVE_FRAMEBUFFER_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_KMSDRM_DEVICE_INDEX_NUMBER",
        short_name: "WINDOW_KMSDRM_DEVICE_INDEX",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_KMSDRM_DEVICE_INDEX_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_KMSDRM_DRM_FD_NUMBER",
        short_name: "WINDOW_KMSDRM_DRM_FD",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_KMSDRM_DRM_FD_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_KMSDRM_GBM_DEVICE_POINTER",
        short_name: "WINDOW_KMSDRM_GBM_DEVICE",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_KMSDRM_GBM_DEVICE_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_COCOA_WINDOW_POINTER",
        short_name: "WINDOW_COCOA_WINDOW",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_COCOA_WINDOW_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_COCOA_METAL_VIEW_TAG_NUMBER",
        short_name: "WINDOW_COCOA_METAL_VIEW_TAG",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_COCOA_METAL_VIEW_TAG_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_OPENVR_OVERLAY_ID",
        short_name: "WINDOW_OPENVR_OVERLAY_ID",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_OPENVR_OVERLAY_ID) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_VIVANTE_DISPLAY_POINTER",
        short_name: "WINDOW_VIVANTE_DISPLAY",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_VIVANTE_DISPLAY_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_VIVANTE_WINDOW_POINTER",
        short_name: "WINDOW_VIVANTE_WINDOW",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_VIVANTE_WINDOW_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_VIVANTE_SURFACE_POINTER",
        short_name: "WINDOW_VIVANTE_SURFACE",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_VIVANTE_SURFACE_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_WIN32_HWND_POINTER",
        short_name: "WINDOW_WIN32_HWND",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_WIN32_HWND_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_WIN32_HDC_POINTER",
        short_name: "WINDOW_WIN32_HDC",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_WIN32_HDC_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_WIN32_INSTANCE_POINTER",
        short_name: "WINDOW_WIN32_INSTANCE",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_WIN32_INSTANCE_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_WAYLAND_DISPLAY_POINTER",
        short_name: "WINDOW_WAYLAND_DISPLAY",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_WAYLAND_DISPLAY_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_WAYLAND_SURFACE_POINTER",
        short_name: "WINDOW_WAYLAND_SURFACE",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_WAYLAND_SURFACE_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_WAYLAND_VIEWPORT_POINTER",
        short_name: "WINDOW_WAYLAND_VIEWPORT",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_WAYLAND_VIEWPORT_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_WAYLAND_EGL_WINDOW_POINTER",
        short_name: "WINDOW_WAYLAND_EGL_WINDOW",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_WAYLAND_EGL_WINDOW_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_WAYLAND_XDG_SURFACE_POINTER",
        short_name: "WINDOW_WAYLAND_XDG_SURFACE",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_WAYLAND_XDG_SURFACE_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_POINTER",
        short_name: "WINDOW_WAYLAND_XDG_TOPLEVEL",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_EXPORT_HANDLE_STRING",
        short_name: "WINDOW_WAYLAND_XDG_TOPLEVEL_EXPORT_HANDLE",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_EXPORT_HANDLE_STRING) },
        ty: SDL_PropertyType::STRING,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_WAYLAND_XDG_POPUP_POINTER",
        short_name: "WINDOW_WAYLAND_XDG_POPUP",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_WAYLAND_XDG_POPUP_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_WAYLAND_XDG_POSITIONER_POINTER",
        short_name: "WINDOW_WAYLAND_XDG_POSITIONER",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_WAYLAND_XDG_POSITIONER_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_X11_DISPLAY_POINTER",
        short_name: "WINDOW_X11_DISPLAY",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_X11_DISPLAY_POINTER) },
        ty: SDL_PropertyType::POINTER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_X11_SCREEN_NUMBER",
        short_name: "WINDOW_X11_SCREEN",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_X11_SCREEN_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
    Property {
        module: "video",
        name: "SDL_PROP_WINDOW_X11_WINDOW_NUMBER",
        short_name: "WINDOW_X11_WINDOW",
        value: unsafe { CStr::from_ptr(crate::video::SDL_PROP_WINDOW_X11_WINDOW_NUMBER) },
        ty: SDL_PropertyType::NUMBER,
        doc: None,
        available_since: None,
    },
];

/// Metadata for groups in this crate
pub static GROUPS: &[Group] = &[
    Group {
        module: "assert",
        kind: GroupKind::Enum,
        name: "SDL_AssertState",
        short_name: "AssertState",
        doc: Some("Possible outcomes from a triggered assertion.\n\nWhen an enabled assertion triggers, it may call the assertion handler\n(possibly one provided by the app via [`SDL_SetAssertionHandler`]), which will\nreturn one of these values, possibly after asking the user.\n\nThen SDL will respond based on this outcome (loop around to retry the\ncondition, try to break in a debugger, kill the program, or ignore the\nproblem).\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_ASSERTION_RETRY",
                short_name: "RETRY",
                doc: Some("Retry the assert immediately.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_ASSERTION_BREAK",
                short_name: "BREAK",
                doc: Some("Make the debugger trigger a breakpoint.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_ASSERTION_ABORT",
                short_name: "ABORT",
                doc: Some("Terminate the program.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_ASSERTION_IGNORE",
                short_name: "IGNORE",
                doc: Some("Ignore the assert.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_ASSERTION_ALWAYS_IGNORE",
                short_name: "ALWAYS_IGNORE",
                doc: Some("Ignore the assert from now on.\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "asyncio",
        kind: GroupKind::Enum,
        name: "SDL_AsyncIOTaskType",
        short_name: "AsyncIOTaskType",
        doc: Some("Types of asynchronous I/O tasks.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_ASYNCIO_TASK_READ",
                short_name: "READ",
                doc: Some("A read operation.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_ASYNCIO_TASK_WRITE",
                short_name: "WRITE",
                doc: Some("A write operation.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_ASYNCIO_TASK_CLOSE",
                short_name: "CLOSE",
                doc: Some("A close operation.\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "asyncio",
        kind: GroupKind::Enum,
        name: "SDL_AsyncIOResult",
        short_name: "AsyncIOResult",
        doc: Some("Possible outcomes of an asynchronous I/O task.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_ASYNCIO_COMPLETE",
                short_name: "COMPLETE",
                doc: Some("request was completed without error\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_ASYNCIO_FAILURE",
                short_name: "FAILURE",
                doc: Some("request failed for some reason; check [`SDL_GetError()`]!\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_ASYNCIO_CANCELED",
                short_name: "CANCELED",
                doc: Some("request was canceled before completing.\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "atomic",
        kind: GroupKind::Lock,
        name: "SDL_SpinLock",
        short_name: "SpinLock",
        doc: Some("An atomic spinlock.\n\nThe atomic locks are efficient spinlocks using CPU instructions, but are\nvulnerable to starvation and can spin forever if a thread holding a lock\nhas been terminated. For this reason you should minimize the code executed\ninside an atomic lock and never do expensive things like API or system\ncalls while holding them.\n\nThey are also vulnerable to starvation if the thread holding the lock is\nlower priority than other threads and doesn't get scheduled. In general you\nshould use mutexes instead, since they have better performance and\ncontention behavior.\n\nThe atomic locks are not safe to lock recursively.\n\nPorting Note: The spin lock functions and type are required and can not be\nemulated because they are used in the atomic emulation code.\n"),
        available_since: None,
        values: &[
        ],
    },
    Group {
        module: "audio",
        kind: GroupKind::Enum,
        name: "SDL_AudioFormat",
        short_name: "AudioFormat",
        doc: Some("Audio format.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_AUDIO_BITSIZE`]\n- [`SDL_AUDIO_BYTESIZE`]\n- [`SDL_AUDIO_ISINT`]\n- [`SDL_AUDIO_ISFLOAT`]\n- [`SDL_AUDIO_ISBIGENDIAN`]\n- [`SDL_AUDIO_ISLITTLEENDIAN`]\n- [`SDL_AUDIO_ISSIGNED`]\n- [`SDL_AUDIO_ISUNSIGNED`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_AUDIO_UNKNOWN",
                short_name: "UNKNOWN",
                doc: Some("Unspecified audio format\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_AUDIO_U8",
                short_name: "U8",
                doc: Some("Unsigned 8-bit samples\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_AUDIO_S8",
                short_name: "S8",
                doc: Some("Signed 8-bit samples\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_AUDIO_S16LE",
                short_name: "S16LE",
                doc: Some("Signed 16-bit samples\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_AUDIO_S16BE",
                short_name: "S16BE",
                doc: Some("As above, but big-endian byte order\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_AUDIO_S32LE",
                short_name: "S32LE",
                doc: Some("32-bit integer samples\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_AUDIO_S32BE",
                short_name: "S32BE",
                doc: Some("As above, but big-endian byte order\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_AUDIO_F32LE",
                short_name: "F32LE",
                doc: Some("32-bit floating point samples\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_AUDIO_F32BE",
                short_name: "F32BE",
                doc: Some("As above, but big-endian byte order\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_AUDIO_S16",
                short_name: "S16",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_AUDIO_S32",
                short_name: "S32",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_AUDIO_F32",
                short_name: "F32",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_AUDIO_S16",
                short_name: "S16",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_AUDIO_S32",
                short_name: "S32",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_AUDIO_F32",
                short_name: "F32",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "audio",
        kind: GroupKind::Id,
        name: "SDL_AudioDeviceID",
        short_name: "AudioDeviceID",
        doc: Some("SDL Audio Device instance IDs.\n\nZero is used to signify an invalid/null device.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_AUDIO_DEVICE_DEFAULT_PLAYBACK",
                short_name: "DEFAULT_PLAYBACK",
                doc: Some("A value used to request a default playback audio device.\n\nSeveral functions that require an [`SDL_AudioDeviceID`] will accept this value\nto signify the app just wants the system to choose a default device instead\nof the app providing a specific one.\n\n## Availability\nThis macro is available since SDL 3.2.0.\n"),
                available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
            },
            GroupValue {
                name: "SDL_AUDIO_DEVICE_DEFAULT_RECORDING",
                short_name: "DEFAULT_RECORDING",
                doc: Some("A value used to request a default recording audio device.\n\nSeveral functions that require an [`SDL_AudioDeviceID`] will accept this value\nto signify the app just wants the system to choose a default device instead\nof the app providing a specific one.\n\n## Availability\nThis macro is available since SDL 3.2.0.\n"),
                available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
            },
        ],
    },
    Group {
        module: "blendmode",
        kind: GroupKind::Flags,
        name: "SDL_BlendMode",
        short_name: "BlendMode",
        doc: Some("A set of blend modes used in drawing operations.\n\nThese predefined blend modes are supported everywhere.\n\nAdditional values may be obtained from [`SDL_ComposeCustomBlendMode`].\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n\n## See also\n- [`SDL_ComposeCustomBlendMode`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_BLENDMODE_NONE",
                short_name: "NONE",
                doc: Some("no blending: dstRGBA = srcRGBA\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_BLENDMODE_BLEND",
                short_name: "BLEND",
                doc: Some("alpha blending: dstRGB = (srcRGB * srcA) + (dstRGB * (1-srcA)), dstA = srcA + (dstA * (1-srcA))\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_BLENDMODE_BLEND_PREMULTIPLIED",
                short_name: "BLEND_PREMULTIPLIED",
                doc: Some("pre-multiplied alpha blending: dstRGBA = srcRGBA + (dstRGBA * (1-srcA))\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_BLENDMODE_ADD",
                short_name: "ADD",
                doc: Some("additive blending: dstRGB = (srcRGB * srcA) + dstRGB, dstA = dstA\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_BLENDMODE_ADD_PREMULTIPLIED",
                short_name: "ADD_PREMULTIPLIED",
                doc: Some("pre-multiplied additive blending: dstRGB = srcRGB + dstRGB, dstA = dstA\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_BLENDMODE_MOD",
                short_name: "MOD",
                doc: Some("color modulate: dstRGB = srcRGB * dstRGB, dstA = dstA\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_BLENDMODE_MUL",
                short_name: "MUL",
                doc: Some("color multiply: dstRGB = (srcRGB * dstRGB) + (dstRGB * (1-srcA)), dstA = dstA\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_BLENDMODE_INVALID",
                short_name: "INVALID",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "blendmode",
        kind: GroupKind::Enum,
        name: "SDL_BlendOperation",
        short_name: "BlendOperation",
        doc: Some("The blend operation used when combining source and destination pixel\ncomponents.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_BLENDOPERATION_ADD",
                short_name: "ADD",
                doc: Some("dst + src: supported by all renderers\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_BLENDOPERATION_SUBTRACT",
                short_name: "SUBTRACT",
                doc: Some("src - dst : supported by D3D, OpenGL, OpenGLES, and Vulkan\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_BLENDOPERATION_REV_SUBTRACT",
                short_name: "REV_SUBTRACT",
                doc: Some("dst - src : supported by D3D, OpenGL, OpenGLES, and Vulkan\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_BLENDOPERATION_MINIMUM",
                short_name: "MINIMUM",
                doc: Some("min(dst, src) : supported by D3D, OpenGL, OpenGLES, and Vulkan\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_BLENDOPERATION_MAXIMUM",
                short_name: "MAXIMUM",
                doc: Some("max(dst, src) : supported by D3D, OpenGL, OpenGLES, and Vulkan\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "blendmode",
        kind: GroupKind::Enum,
        name: "SDL_BlendFactor",
        short_name: "BlendFactor",
        doc: Some("The normalized factor used to multiply pixel components.\n\nThe blend factors are multiplied with the pixels from a drawing operation\n(src) and the pixels from the render target (dst) before the blend\noperation. The comma-separated factors listed above are always applied in\nthe component order red, green, blue, and alpha.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_BLENDFACTOR_ZERO",
                short_name: "ZERO",
                doc: Some("0, 0, 0, 0\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_BLENDFACTOR_ONE",
                short_name: "ONE",
                doc: Some("1, 1, 1, 1\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_BLENDFACTOR_SRC_COLOR",
                short_name: "SRC_COLOR",
                doc: Some("srcR, srcG, srcB, srcA\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR",
                short_name: "ONE_MINUS_SRC_COLOR",
                doc: Some("1-srcR, 1-srcG, 1-srcB, 1-srcA\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_BLENDFACTOR_SRC_ALPHA",
                short_name: "SRC_ALPHA",
                doc: Some("srcA, srcA, srcA, srcA\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA",
                short_name: "ONE_MINUS_SRC_ALPHA",
                doc: Some("1-srcA, 1-srcA, 1-srcA, 1-srcA\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_BLENDFACTOR_DST_COLOR",
                short_name: "DST_COLOR",
                doc: Some("dstR, dstG, dstB, dstA\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR",
                short_name: "ONE_MINUS_DST_COLOR",
                doc: Some("1-dstR, 1-dstG, 1-dstB, 1-dstA\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_BLENDFACTOR_DST_ALPHA",
                short_name: "DST_ALPHA",
                doc: Some("dstA, dstA, dstA, dstA\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA",
                short_name: "ONE_MINUS_DST_ALPHA",
                doc: Some("1-dstA, 1-dstA, 1-dstA, 1-dstA\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "camera",
        kind: GroupKind::Id,
        name: "SDL_CameraID",
        short_name: "CameraID",
        doc: Some("This is a unique ID for a camera device for the time it is connected to the\nsystem, and is never reused for the lifetime of the application.\n\nIf the device is disconnected and reconnected, it will get a new ID.\n\nThe value 0 is an invalid ID.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n\n## See also\n- [`SDL_GetCameras`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
        ],
    },
    Group {
        module: "camera",
        kind: GroupKind::Enum,
        name: "SDL_CameraPosition",
        short_name: "CameraPosition",
        doc: Some("The position of camera in relation to system device.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_GetCameraPosition`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_CAMERA_POSITION_UNKNOWN",
                short_name: "UNKNOWN",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_CAMERA_POSITION_FRONT_FACING",
                short_name: "FRONT_FACING",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_CAMERA_POSITION_BACK_FACING",
                short_name: "BACK_FACING",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "dialog",
        kind: GroupKind::Enum,
        name: "SDL_FileDialogType",
        short_name: "FileDialogType",
        doc: Some("Various types of file dialogs.\n\nThis is used by [`SDL_ShowFileDialogWithProperties()`] to decide what kind of\ndialog to present to the user.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_ShowFileDialogWithProperties`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_FILEDIALOG_OPENFILE",
                short_name: "OPENFILE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_FILEDIALOG_SAVEFILE",
                short_name: "SAVEFILE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_FILEDIALOG_OPENFOLDER",
                short_name: "OPENFOLDER",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "events",
        kind: GroupKind::Enum,
        name: "SDL_EventType",
        short_name: "EventType",
        doc: Some("The types of events that can be delivered.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_EVENT_FIRST",
                short_name: "FIRST",
                doc: Some("Unused (do not remove)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_QUIT",
                short_name: "QUIT",
                doc: Some("User-requested quit\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_TERMINATING",
                short_name: "TERMINATING",
                doc: Some("The application is being terminated by the OS. This event must be handled in a callback set with [`SDL_AddEventWatch()`].\nCalled on iOS in applicationWillTerminate()\nCalled on Android in onDestroy()\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_LOW_MEMORY",
                short_name: "LOW_MEMORY",
                doc: Some("The application is low on memory, free memory if possible. This event must be handled in a callback set with [`SDL_AddEventWatch()`].\nCalled on iOS in applicationDidReceiveMemoryWarning()\nCalled on Android in onTrimMemory()\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WILL_ENTER_BACKGROUND",
                short_name: "WILL_ENTER_BACKGROUND",
                doc: Some("The application is about to enter the background. This event must be handled in a callback set with [`SDL_AddEventWatch()`].\nCalled on iOS in applicationWillResignActive()\nCalled on Android in onPause()\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_DID_ENTER_BACKGROUND",
                short_name: "DID_ENTER_BACKGROUND",
                doc: Some("The application did enter the background and may not get CPU for some time. This event must be handled in a callback set with [`SDL_AddEventWatch()`].\nCalled on iOS in applicationDidEnterBackground()\nCalled on Android in onPause()\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WILL_ENTER_FOREGROUND",
                short_name: "WILL_ENTER_FOREGROUND",
                doc: Some("The application is about to enter the foreground. This event must be handled in a callback set with [`SDL_AddEventWatch()`].\nCalled on iOS in applicationWillEnterForeground()\nCalled on Android in onResume()\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_DID_ENTER_FOREGROUND",
                short_name: "DID_ENTER_FOREGROUND",
                doc: Some("The application is now interactive. This event must be handled in a callback set with [`SDL_AddEventWatch()`].\nCalled on iOS in applicationDidBecomeActive()\nCalled on Android in onResume()\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_LOCALE_CHANGED",
                short_name: "LOCALE_CHANGED",
                doc: Some("The user's locale preferences have changed.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_SYSTEM_THEME_CHANGED",
                short_name: "SYSTEM_THEME_CHANGED",
                doc: Some("The system theme changed\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_DISPLAY_ORIENTATION",
                short_name: "DISPLAY_ORIENTATION",
                doc: Some("Display orientation has changed to data1\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_DISPLAY_ADDED",
                short_name: "DISPLAY_ADDED",
                doc: Some("Display has been added to the system\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_DISPLAY_REMOVED",
                short_name: "DISPLAY_REMOVED",
                doc: Some("Display has been removed from the system\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_DISPLAY_MOVED",
                short_name: "DISPLAY_MOVED",
                doc: Some("Display has changed position\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_DISPLAY_DESKTOP_MODE_CHANGED",
                short_name: "DISPLAY_DESKTOP_MODE_CHANGED",
                doc: Some("Display has changed desktop mode\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_DISPLAY_CURRENT_MODE_CHANGED",
                short_name: "DISPLAY_CURRENT_MODE_CHANGED",
                doc: Some("Display has changed current mode\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_DISPLAY_CONTENT_SCALE_CHANGED",
                short_name: "DISPLAY_CONTENT_SCALE_CHANGED",
                doc: Some("Display has changed content scale\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_DISPLAY_FIRST",
                short_name: "DISPLAY_FIRST",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_DISPLAY_LAST",
                short_name: "DISPLAY_LAST",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_SHOWN",
                short_name: "WINDOW_SHOWN",
                doc: Some("Window has been shown\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_HIDDEN",
                short_name: "WINDOW_HIDDEN",
                doc: Some("Window has been hidden\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_EXPOSED",
                short_name: "WINDOW_EXPOSED",
                doc: Some("Window has been exposed and should be redrawn, and can be redrawn directly from event watchers for this event\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_MOVED",
                short_name: "WINDOW_MOVED",
                doc: Some("Window has been moved to data1, data2\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_RESIZED",
                short_name: "WINDOW_RESIZED",
                doc: Some("Window has been resized to data1xdata2\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED",
                short_name: "WINDOW_PIXEL_SIZE_CHANGED",
                doc: Some("The pixel size of the window has changed to data1xdata2\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_METAL_VIEW_RESIZED",
                short_name: "WINDOW_METAL_VIEW_RESIZED",
                doc: Some("The pixel size of a Metal view associated with the window has changed\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_MINIMIZED",
                short_name: "WINDOW_MINIMIZED",
                doc: Some("Window has been minimized\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_MAXIMIZED",
                short_name: "WINDOW_MAXIMIZED",
                doc: Some("Window has been maximized\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_RESTORED",
                short_name: "WINDOW_RESTORED",
                doc: Some("Window has been restored to normal size and position\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_MOUSE_ENTER",
                short_name: "WINDOW_MOUSE_ENTER",
                doc: Some("Window has gained mouse focus\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_MOUSE_LEAVE",
                short_name: "WINDOW_MOUSE_LEAVE",
                doc: Some("Window has lost mouse focus\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_FOCUS_GAINED",
                short_name: "WINDOW_FOCUS_GAINED",
                doc: Some("Window has gained keyboard focus\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_FOCUS_LOST",
                short_name: "WINDOW_FOCUS_LOST",
                doc: Some("Window has lost keyboard focus\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_CLOSE_REQUESTED",
                short_name: "WINDOW_CLOSE_REQUESTED",
                doc: Some("The window manager requests that the window be closed\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_HIT_TEST",
                short_name: "WINDOW_HIT_TEST",
                doc: Some("Window had a hit test that wasn't [`SDL_HITTEST_NORMAL`]\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_ICCPROF_CHANGED",
                short_name: "WINDOW_ICCPROF_CHANGED",
                doc: Some("The ICC profile of the window's display has changed\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_DISPLAY_CHANGED",
                short_name: "WINDOW_DISPLAY_CHANGED",
                doc: Some("Window has been moved to display data1\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_DISPLAY_SCALE_CHANGED",
                short_name: "WINDOW_DISPLAY_SCALE_CHANGED",
                doc: Some("Window display scale has been changed\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_SAFE_AREA_CHANGED",
                short_name: "WINDOW_SAFE_AREA_CHANGED",
                doc: Some("The window safe area has been changed\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_OCCLUDED",
                short_name: "WINDOW_OCCLUDED",
                doc: Some("The window has been occluded\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_ENTER_FULLSCREEN",
                short_name: "WINDOW_ENTER_FULLSCREEN",
                doc: Some("The window has entered fullscreen mode\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_LEAVE_FULLSCREEN",
                short_name: "WINDOW_LEAVE_FULLSCREEN",
                doc: Some("The window has left fullscreen mode\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_DESTROYED",
                short_name: "WINDOW_DESTROYED",
                doc: Some("The window with the associated ID is being or has been destroyed. If this message is being handled\nin an event watcher, the window handle is still valid and can still be used to retrieve any properties\nassociated with the window. Otherwise, the handle has already been destroyed and all resources\nassociated with it are invalid\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_HDR_STATE_CHANGED",
                short_name: "WINDOW_HDR_STATE_CHANGED",
                doc: Some("Window HDR properties have changed\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_FIRST",
                short_name: "WINDOW_FIRST",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_WINDOW_LAST",
                short_name: "WINDOW_LAST",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_KEY_DOWN",
                short_name: "KEY_DOWN",
                doc: Some("Key pressed\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_KEY_UP",
                short_name: "KEY_UP",
                doc: Some("Key released\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_TEXT_EDITING",
                short_name: "TEXT_EDITING",
                doc: Some("Keyboard text editing (composition)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_TEXT_INPUT",
                short_name: "TEXT_INPUT",
                doc: Some("Keyboard text input\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_KEYMAP_CHANGED",
                short_name: "KEYMAP_CHANGED",
                doc: Some("Keymap changed due to a system event such as an\ninput language or keyboard layout change.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_KEYBOARD_ADDED",
                short_name: "KEYBOARD_ADDED",
                doc: Some("A new keyboard has been inserted into the system\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_KEYBOARD_REMOVED",
                short_name: "KEYBOARD_REMOVED",
                doc: Some("A keyboard has been removed\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_TEXT_EDITING_CANDIDATES",
                short_name: "TEXT_EDITING_CANDIDATES",
                doc: Some("Keyboard text editing candidates\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_MOUSE_MOTION",
                short_name: "MOUSE_MOTION",
                doc: Some("Mouse moved\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_MOUSE_BUTTON_DOWN",
                short_name: "MOUSE_BUTTON_DOWN",
                doc: Some("Mouse button pressed\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_MOUSE_BUTTON_UP",
                short_name: "MOUSE_BUTTON_UP",
                doc: Some("Mouse button released\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_MOUSE_WHEEL",
                short_name: "MOUSE_WHEEL",
                doc: Some("Mouse wheel motion\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_MOUSE_ADDED",
                short_name: "MOUSE_ADDED",
                doc: Some("A new mouse has been inserted into the system\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_MOUSE_REMOVED",
                short_name: "MOUSE_REMOVED",
                doc: Some("A mouse has been removed\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_JOYSTICK_AXIS_MOTION",
                short_name: "JOYSTICK_AXIS_MOTION",
                doc: Some("Joystick axis motion\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_JOYSTICK_BALL_MOTION",
                short_name: "JOYSTICK_BALL_MOTION",
                doc: Some("Joystick trackball motion\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_JOYSTICK_HAT_MOTION",
                short_name: "JOYSTICK_HAT_MOTION",
                doc: Some("Joystick hat position change\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_JOYSTICK_BUTTON_DOWN",
                short_name: "JOYSTICK_BUTTON_DOWN",
                doc: Some("Joystick button pressed\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_JOYSTICK_BUTTON_UP",
                short_name: "JOYSTICK_BUTTON_UP",
                doc: Some("Joystick button released\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_JOYSTICK_ADDED",
                short_name: "JOYSTICK_ADDED",
                doc: Some("A new joystick has been inserted into the system\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_JOYSTICK_REMOVED",
                short_name: "JOYSTICK_REMOVED",
                doc: Some("An opened joystick has been removed\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_JOYSTICK_BATTERY_UPDATED",
                short_name: "JOYSTICK_BATTERY_UPDATED",
                doc: Some("Joystick battery level change\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_JOYSTICK_UPDATE_COMPLETE",
                short_name: "JOYSTICK_UPDATE_COMPLETE",
                doc: Some("Joystick update is complete\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_GAMEPAD_AXIS_MOTION",
                short_name: "GAMEPAD_AXIS_MOTION",
                doc: Some("Gamepad axis motion\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_GAMEPAD_BUTTON_DOWN",
                short_name: "GAMEPAD_BUTTON_DOWN",
                doc: Some("Gamepad button pressed\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_GAMEPAD_BUTTON_UP",
                short_name: "GAMEPAD_BUTTON_UP",
                doc: Some("Gamepad button released\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_GAMEPAD_ADDED",
                short_name: "GAMEPAD_ADDED",
                doc: Some("A new gamepad has been inserted into the system\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_GAMEPAD_REMOVED",
                short_name: "GAMEPAD_REMOVED",
                doc: Some("A gamepad has been removed\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_GAMEPAD_REMAPPED",
                short_name: "GAMEPAD_REMAPPED",
                doc: Some("The gamepad mapping was updated\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_GAMEPAD_TOUCHPAD_DOWN",
                short_name: "GAMEPAD_TOUCHPAD_DOWN",
                doc: Some("Gamepad touchpad was touched\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_GAMEPAD_TOUCHPAD_MOTION",
                short_name: "GAMEPAD_TOUCHPAD_MOTION",
                doc: Some("Gamepad touchpad finger was moved\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_GAMEPAD_TOUCHPAD_UP",
                short_name: "GAMEPAD_TOUCHPAD_UP",
                doc: Some("Gamepad touchpad finger was lifted\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_GAMEPAD_SENSOR_UPDATE",
                short_name: "GAMEPAD_SENSOR_UPDATE",
                doc: Some("Gamepad sensor was updated\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_GAMEPAD_UPDATE_COMPLETE",
                short_name: "GAMEPAD_UPDATE_COMPLETE",
                doc: Some("Gamepad update is complete\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_GAMEPAD_STEAM_HANDLE_UPDATED",
                short_name: "GAMEPAD_STEAM_HANDLE_UPDATED",
                doc: Some("Gamepad Steam handle has changed\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_FINGER_DOWN",
                short_name: "FINGER_DOWN",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_FINGER_UP",
                short_name: "FINGER_UP",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_FINGER_MOTION",
                short_name: "FINGER_MOTION",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_FINGER_CANCELED",
                short_name: "FINGER_CANCELED",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_CLIPBOARD_UPDATE",
                short_name: "CLIPBOARD_UPDATE",
                doc: Some("The clipboard or primary selection changed\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_DROP_FILE",
                short_name: "DROP_FILE",
                doc: Some("The system requests a file open\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_DROP_TEXT",
                short_name: "DROP_TEXT",
                doc: Some("text/plain drag-and-drop event\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_DROP_BEGIN",
                short_name: "DROP_BEGIN",
                doc: Some("A new set of drops is beginning (NULL filename)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_DROP_COMPLETE",
                short_name: "DROP_COMPLETE",
                doc: Some("Current set of drops is now complete (NULL filename)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_DROP_POSITION",
                short_name: "DROP_POSITION",
                doc: Some("Position while moving over the window\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_AUDIO_DEVICE_ADDED",
                short_name: "AUDIO_DEVICE_ADDED",
                doc: Some("A new audio device is available\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_AUDIO_DEVICE_REMOVED",
                short_name: "AUDIO_DEVICE_REMOVED",
                doc: Some("An audio device has been removed.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_AUDIO_DEVICE_FORMAT_CHANGED",
                short_name: "AUDIO_DEVICE_FORMAT_CHANGED",
                doc: Some("An audio device's format has been changed by the system.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_SENSOR_UPDATE",
                short_name: "SENSOR_UPDATE",
                doc: Some("A sensor was updated\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_PEN_PROXIMITY_IN",
                short_name: "PEN_PROXIMITY_IN",
                doc: Some("Pressure-sensitive pen has become available\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_PEN_PROXIMITY_OUT",
                short_name: "PEN_PROXIMITY_OUT",
                doc: Some("Pressure-sensitive pen has become unavailable\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_PEN_DOWN",
                short_name: "PEN_DOWN",
                doc: Some("Pressure-sensitive pen touched drawing surface\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_PEN_UP",
                short_name: "PEN_UP",
                doc: Some("Pressure-sensitive pen stopped touching drawing surface\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_PEN_BUTTON_DOWN",
                short_name: "PEN_BUTTON_DOWN",
                doc: Some("Pressure-sensitive pen button pressed\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_PEN_BUTTON_UP",
                short_name: "PEN_BUTTON_UP",
                doc: Some("Pressure-sensitive pen button released\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_PEN_MOTION",
                short_name: "PEN_MOTION",
                doc: Some("Pressure-sensitive pen is moving on the tablet\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_PEN_AXIS",
                short_name: "PEN_AXIS",
                doc: Some("Pressure-sensitive pen angle/pressure/etc changed\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_CAMERA_DEVICE_ADDED",
                short_name: "CAMERA_DEVICE_ADDED",
                doc: Some("A new camera device is available\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_CAMERA_DEVICE_REMOVED",
                short_name: "CAMERA_DEVICE_REMOVED",
                doc: Some("A camera device has been removed.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_CAMERA_DEVICE_APPROVED",
                short_name: "CAMERA_DEVICE_APPROVED",
                doc: Some("A camera device has been approved for use by the user.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_CAMERA_DEVICE_DENIED",
                short_name: "CAMERA_DEVICE_DENIED",
                doc: Some("A camera device has been denied for use by the user.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_RENDER_TARGETS_RESET",
                short_name: "RENDER_TARGETS_RESET",
                doc: Some("The render targets have been reset and their contents need to be updated\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_RENDER_DEVICE_RESET",
                short_name: "RENDER_DEVICE_RESET",
                doc: Some("The device has been reset and all textures need to be recreated\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_RENDER_DEVICE_LOST",
                short_name: "RENDER_DEVICE_LOST",
                doc: Some("The device has been lost and can't be recovered.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_PRIVATE0",
                short_name: "PRIVATE0",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_PRIVATE1",
                short_name: "PRIVATE1",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_PRIVATE2",
                short_name: "PRIVATE2",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_PRIVATE3",
                short_name: "PRIVATE3",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_POLL_SENTINEL",
                short_name: "POLL_SENTINEL",
                doc: Some("Signals the end of an event poll cycle\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_USER",
                short_name: "USER",
                doc: Some("Events [`SDL_EVENT_USER`] through [`SDL_EVENT_LAST`] are for your use,\nand should be allocated with [`SDL_RegisterEvents()`]\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_LAST",
                short_name: "LAST",
                doc: Some("*  This last event is only for bounding internal arrays\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_EVENT_ENUM_PADDING",
                short_name: "ENUM_PADDING",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "events",
        kind: GroupKind::Enum,
        name: "SDL_EventAction",
        short_name: "EventAction",
        doc: Some("The type of action to request from [`SDL_PeepEvents()`].\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_ADDEVENT",
                short_name: "ADDEVENT",
                doc: Some("Add events to the back of the queue.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PEEKEVENT",
                short_name: "PEEKEVENT",
                doc: Some("Check but don't remove events from the queue front.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GETEVENT",
                short_name: "GETEVENT",
                doc: Some("Retrieve/remove events from the front of the queue.\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "filesystem",
        kind: GroupKind::Enum,
        name: "SDL_Folder",
        short_name: "Folder",
        doc: Some("The type of the OS-provided default folder for a specific purpose.\n\nNote that the Trash folder isn't included here, because trashing files\nusually involves extra OS-specific functionality to remember the file's\noriginal location.\n\nThe folders supported per platform are:\n\n|             | Windows | macOS/iOS | tvOS | Unix (XDG) | Haiku | Emscripten |\n| ----------- | ------- | --------- | ---- | ---------- | ----- | ---------- |\n| HOME        | X       | X         |      | X          | X     | X          |\n| DESKTOP     | X       | X         |      | X          | X     |            |\n| DOCUMENTS   | X       | X         |      | X          |       |            |\n| DOWNLOADS   | Vista+  | X         |      | X          |       |            |\n| MUSIC       | X       | X         |      | X          |       |            |\n| PICTURES    | X       | X         |      | X          |       |            |\n| PUBLICSHARE |         | X         |      | X          |       |            |\n| SAVEDGAMES  | Vista+  |           |      |            |       |            |\n| SCREENSHOTS | Vista+  |           |      |            |       |            |\n| TEMPLATES   | X       | X         |      | X          |       |            |\n| VIDEOS      | X       | X*        |      | X          |       |            |\n\nNote that on macOS/iOS, the Videos folder is called \"Movies\".\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_GetUserFolder`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_FOLDER_HOME",
                short_name: "HOME",
                doc: Some("The folder which contains all of the current user's data, preferences, and documents. It usually contains most of the other folders. If a requested folder does not exist, the home folder can be considered a safe fallback to store a user's documents.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_FOLDER_DESKTOP",
                short_name: "DESKTOP",
                doc: Some("The folder of files that are displayed on the desktop. Note that the existence of a desktop folder does not guarantee that the system does show icons on its desktop; certain GNU/Linux distros with a graphical environment may not have desktop icons.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_FOLDER_DOCUMENTS",
                short_name: "DOCUMENTS",
                doc: Some("User document files, possibly application-specific. This is a good place to save a user's projects.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_FOLDER_DOWNLOADS",
                short_name: "DOWNLOADS",
                doc: Some("Standard folder for user files downloaded from the internet.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_FOLDER_MUSIC",
                short_name: "MUSIC",
                doc: Some("Music files that can be played using a standard music player (mp3, ogg...).\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_FOLDER_PICTURES",
                short_name: "PICTURES",
                doc: Some("Image files that can be displayed using a standard viewer (png, jpg...).\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_FOLDER_PUBLICSHARE",
                short_name: "PUBLICSHARE",
                doc: Some("Files that are meant to be shared with other users on the same computer.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_FOLDER_SAVEDGAMES",
                short_name: "SAVEDGAMES",
                doc: Some("Save files for games.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_FOLDER_SCREENSHOTS",
                short_name: "SCREENSHOTS",
                doc: Some("Application screenshots.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_FOLDER_TEMPLATES",
                short_name: "TEMPLATES",
                doc: Some("Template files to be used when the user requests the desktop environment to create a new file in a certain folder, such as \"New Text File.txt\".  Any file in the Templates folder can be used as a starting point for a new file.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_FOLDER_VIDEOS",
                short_name: "VIDEOS",
                doc: Some("Video files that can be played using a standard video player (mp4, webm...).\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_FOLDER_COUNT",
                short_name: "COUNT",
                doc: Some("Total number of types in this enum, not a folder type by itself.\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "filesystem",
        kind: GroupKind::Enum,
        name: "SDL_PathType",
        short_name: "PathType",
        doc: Some("Types of filesystem entries.\n\nNote that there may be other sorts of items on a filesystem: devices,\nsymlinks, named pipes, etc. They are currently reported as\n[`SDL_PATHTYPE_OTHER`].\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_PathInfo`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_PATHTYPE_NONE",
                short_name: "NONE",
                doc: Some("path does not exist\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PATHTYPE_FILE",
                short_name: "FILE",
                doc: Some("a normal file\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PATHTYPE_DIRECTORY",
                short_name: "DIRECTORY",
                doc: Some("a directory\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PATHTYPE_OTHER",
                short_name: "OTHER",
                doc: Some("something completely different like a device node (not a symlink, those are always followed)\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "filesystem",
        kind: GroupKind::Flags,
        name: "SDL_GlobFlags",
        short_name: "GlobFlags",
        doc: Some("Flags for path matching.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n\n## See also\n- [`SDL_GlobDirectory`]\n- [`SDL_GlobStorageDirectory`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GLOB_CASEINSENSITIVE",
                short_name: "CASEINSENSITIVE",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "filesystem",
        kind: GroupKind::Enum,
        name: "SDL_EnumerationResult",
        short_name: "EnumerationResult",
        doc: Some("Possible results from an enumeration callback.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_EnumerateDirectoryCallback`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_ENUM_CONTINUE",
                short_name: "CONTINUE",
                doc: Some("Value that requests that enumeration continue.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_ENUM_SUCCESS",
                short_name: "SUCCESS",
                doc: Some("Value that requests that enumeration stop, successfully.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_ENUM_FAILURE",
                short_name: "FAILURE",
                doc: Some("Value that requests that enumeration stop, as a failure.\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "gamepad",
        kind: GroupKind::Enum,
        name: "SDL_GamepadType",
        short_name: "GamepadType",
        doc: Some("Standard gamepad types.\n\nThis type does not necessarily map to first-party controllers from\nMicrosoft/Sony/Nintendo; in many cases, third-party controllers can report\nas these, either because they were designed for a specific console, or they\nsimply most closely match that console's controllers (does it have A/B/X/Y\nbuttons or X/O/Square/Triangle? Does it have a touchpad? etc).\n"),
        available_since: None,
        values: &[
            GroupValue {
                name: "SDL_GAMEPAD_TYPE_UNKNOWN",
                short_name: "UNKNOWN",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_TYPE_STANDARD",
                short_name: "STANDARD",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_TYPE_XBOX360",
                short_name: "XBOX360",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_TYPE_XBOXONE",
                short_name: "XBOXONE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_TYPE_PS3",
                short_name: "PS3",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_TYPE_PS4",
                short_name: "PS4",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_TYPE_PS5",
                short_name: "PS5",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_PRO",
                short_name: "NINTENDO_SWITCH_PRO",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_LEFT",
                short_name: "NINTENDO_SWITCH_JOYCON_LEFT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT",
                short_name: "NINTENDO_SWITCH_JOYCON_RIGHT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_PAIR",
                short_name: "NINTENDO_SWITCH_JOYCON_PAIR",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_TYPE_COUNT",
                short_name: "COUNT",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "gamepad",
        kind: GroupKind::Enum,
        name: "SDL_GamepadButton",
        short_name: "GamepadButton",
        doc: Some("The list of buttons available on a gamepad\n\nFor controllers that use a diamond pattern for the face buttons, the\nsouth/east/west/north buttons below correspond to the locations in the\ndiamond pattern. For Xbox controllers, this would be A/B/X/Y, for Nintendo\nSwitch controllers, this would be B/A/Y/X, for PlayStation controllers this\nwould be Cross/Circle/Square/Triangle.\n\nFor controllers that don't use a diamond pattern for the face buttons, the\nsouth/east/west/north buttons indicate the buttons labeled A, B, C, D, or\n1, 2, 3, 4, or for controllers that aren't labeled, they are the primary,\nsecondary, etc. buttons.\n\nThe activate action is often the south button and the cancel action is\noften the east button, but in some regions this is reversed, so your game\nshould allow remapping actions based on user preferences.\n\nYou can query the labels for the face buttons using\n[`SDL_GetGamepadButtonLabel()`]\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_INVALID",
                short_name: "INVALID",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_SOUTH",
                short_name: "SOUTH",
                doc: Some("Bottom face button (e.g. Xbox A button)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_EAST",
                short_name: "EAST",
                doc: Some("Right face button (e.g. Xbox B button)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_WEST",
                short_name: "WEST",
                doc: Some("Left face button (e.g. Xbox X button)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_NORTH",
                short_name: "NORTH",
                doc: Some("Top face button (e.g. Xbox Y button)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_BACK",
                short_name: "BACK",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_GUIDE",
                short_name: "GUIDE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_START",
                short_name: "START",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_LEFT_STICK",
                short_name: "LEFT_STICK",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_RIGHT_STICK",
                short_name: "RIGHT_STICK",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_LEFT_SHOULDER",
                short_name: "LEFT_SHOULDER",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_RIGHT_SHOULDER",
                short_name: "RIGHT_SHOULDER",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_DPAD_UP",
                short_name: "DPAD_UP",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_DPAD_DOWN",
                short_name: "DPAD_DOWN",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_DPAD_LEFT",
                short_name: "DPAD_LEFT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_DPAD_RIGHT",
                short_name: "DPAD_RIGHT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_MISC1",
                short_name: "MISC1",
                doc: Some("Additional button (e.g. Xbox Series X share button, PS5 microphone button, Nintendo Switch Pro capture button, Amazon Luna microphone button, Google Stadia capture button)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_RIGHT_PADDLE1",
                short_name: "RIGHT_PADDLE1",
                doc: Some("Upper or primary paddle, under your right hand (e.g. Xbox Elite paddle P1)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_LEFT_PADDLE1",
                short_name: "LEFT_PADDLE1",
                doc: Some("Upper or primary paddle, under your left hand (e.g. Xbox Elite paddle P3)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_RIGHT_PADDLE2",
                short_name: "RIGHT_PADDLE2",
                doc: Some("Lower or secondary paddle, under your right hand (e.g. Xbox Elite paddle P2)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_LEFT_PADDLE2",
                short_name: "LEFT_PADDLE2",
                doc: Some("Lower or secondary paddle, under your left hand (e.g. Xbox Elite paddle P4)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_TOUCHPAD",
                short_name: "TOUCHPAD",
                doc: Some("PS4/PS5 touchpad button\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_MISC2",
                short_name: "MISC2",
                doc: Some("Additional button\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_MISC3",
                short_name: "MISC3",
                doc: Some("Additional button\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_MISC4",
                short_name: "MISC4",
                doc: Some("Additional button\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_MISC5",
                short_name: "MISC5",
                doc: Some("Additional button\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_MISC6",
                short_name: "MISC6",
                doc: Some("Additional button\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_COUNT",
                short_name: "COUNT",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "gamepad",
        kind: GroupKind::Enum,
        name: "SDL_GamepadButtonLabel",
        short_name: "GamepadButtonLabel",
        doc: Some("The set of gamepad button labels\n\nThis isn't a complete set, just the face buttons to make it easy to show\nbutton prompts.\n\nFor a complete set, you should look at the button and gamepad type and have\na set of symbols that work well with your art style.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_LABEL_UNKNOWN",
                short_name: "UNKNOWN",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_LABEL_A",
                short_name: "A",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_LABEL_B",
                short_name: "B",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_LABEL_X",
                short_name: "X",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_LABEL_Y",
                short_name: "Y",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_LABEL_CROSS",
                short_name: "CROSS",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_LABEL_CIRCLE",
                short_name: "CIRCLE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_LABEL_SQUARE",
                short_name: "SQUARE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BUTTON_LABEL_TRIANGLE",
                short_name: "TRIANGLE",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "gamepad",
        kind: GroupKind::Enum,
        name: "SDL_GamepadAxis",
        short_name: "GamepadAxis",
        doc: Some("The list of axes available on a gamepad\n\nThumbstick axis values range from [`SDL_JOYSTICK_AXIS_MIN`] to\n[`SDL_JOYSTICK_AXIS_MAX`], and are centered within ~8000 of zero, though\nadvanced UI will allow users to set or autodetect the dead zone, which\nvaries between gamepads.\n\nTrigger axis values range from 0 (released) to [`SDL_JOYSTICK_AXIS_MAX`] (fully\npressed) when reported by [`SDL_GetGamepadAxis()`]. Note that this is not the\nsame range that will be reported by the lower-level [`SDL_GetJoystickAxis()`].\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GAMEPAD_AXIS_INVALID",
                short_name: "INVALID",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_AXIS_LEFTX",
                short_name: "LEFTX",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_AXIS_LEFTY",
                short_name: "LEFTY",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_AXIS_RIGHTX",
                short_name: "RIGHTX",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_AXIS_RIGHTY",
                short_name: "RIGHTY",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_AXIS_LEFT_TRIGGER",
                short_name: "LEFT_TRIGGER",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_AXIS_RIGHT_TRIGGER",
                short_name: "RIGHT_TRIGGER",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_AXIS_COUNT",
                short_name: "COUNT",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "gamepad",
        kind: GroupKind::Enum,
        name: "SDL_GamepadBindingType",
        short_name: "GamepadBindingType",
        doc: Some("Types of gamepad control bindings.\n\nA gamepad is a collection of bindings that map arbitrary joystick buttons,\naxes and hat switches to specific positions on a generic console-style\ngamepad. This enum is used as part of [`SDL_GamepadBinding`] to specify those\nmappings.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GAMEPAD_BINDTYPE_NONE",
                short_name: "NONE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BINDTYPE_BUTTON",
                short_name: "BUTTON",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BINDTYPE_AXIS",
                short_name: "AXIS",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GAMEPAD_BINDTYPE_HAT",
                short_name: "HAT",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Enum,
        name: "SDL_GPUPrimitiveType",
        short_name: "GPUPrimitiveType",
        doc: Some("Specifies the primitive topology of a graphics pipeline.\n\nIf you are using POINTLIST you must include a point size output in the\nvertex shader.\n\n- For HLSL compiling to SPIRV you must decorate a float output with\n\\[\\[vk::builtin(\"PointSize\")\\]\\].\n- For GLSL you must set the gl_PointSize builtin.\n- For MSL you must include a float output with the \\[\\[point_size\\]\\]\ndecorator.\n\nNote that sized point topology is totally unsupported on D3D12. Any size\nother than 1 will be ignored. In general, you should avoid using point\ntopology for both compatibility and performance reasons. You WILL regret\nusing it.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_CreateGPUGraphicsPipeline`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_PRIMITIVETYPE_TRIANGLELIST",
                short_name: "TRIANGLELIST",
                doc: Some("A series of separate triangles.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_PRIMITIVETYPE_TRIANGLESTRIP",
                short_name: "TRIANGLESTRIP",
                doc: Some("A series of connected triangles.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_PRIMITIVETYPE_LINELIST",
                short_name: "LINELIST",
                doc: Some("A series of separate lines.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_PRIMITIVETYPE_LINESTRIP",
                short_name: "LINESTRIP",
                doc: Some("A series of connected lines.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_PRIMITIVETYPE_POINTLIST",
                short_name: "POINTLIST",
                doc: Some("A series of separate points.\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Enum,
        name: "SDL_GPULoadOp",
        short_name: "GPULoadOp",
        doc: Some("Specifies how the contents of a texture attached to a render pass are\ntreated at the beginning of the render pass.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_BeginGPURenderPass`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_LOADOP_LOAD",
                short_name: "LOAD",
                doc: Some("The previous contents of the texture will be preserved.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_LOADOP_CLEAR",
                short_name: "CLEAR",
                doc: Some("The contents of the texture will be cleared to a color.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_LOADOP_DONT_CARE",
                short_name: "DONT_CARE",
                doc: Some("The previous contents of the texture need not be preserved. The contents will be undefined.\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Enum,
        name: "SDL_GPUStoreOp",
        short_name: "GPUStoreOp",
        doc: Some("Specifies how the contents of a texture attached to a render pass are\ntreated at the end of the render pass.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_BeginGPURenderPass`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_STOREOP_STORE",
                short_name: "STORE",
                doc: Some("The contents generated during the render pass will be written to memory.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_STOREOP_DONT_CARE",
                short_name: "DONT_CARE",
                doc: Some("The contents generated during the render pass are not needed and may be discarded. The contents will be undefined.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_STOREOP_RESOLVE",
                short_name: "RESOLVE",
                doc: Some("The multisample contents generated during the render pass will be resolved to a non-multisample texture. The contents in the multisample texture may then be discarded and will be undefined.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_STOREOP_RESOLVE_AND_STORE",
                short_name: "RESOLVE_AND_STORE",
                doc: Some("The multisample contents generated during the render pass will be resolved to a non-multisample texture. The contents in the multisample texture will be written to memory.\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Enum,
        name: "SDL_GPUIndexElementSize",
        short_name: "GPUIndexElementSize",
        doc: Some("Specifies the size of elements in an index buffer.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_CreateGPUGraphicsPipeline`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_INDEXELEMENTSIZE_16BIT",
                short_name: "_16BIT",
                doc: Some("The index elements are 16-bit.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_INDEXELEMENTSIZE_32BIT",
                short_name: "_32BIT",
                doc: Some("The index elements are 32-bit.\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Enum,
        name: "SDL_GPUTextureFormat",
        short_name: "GPUTextureFormat",
        doc: Some("Specifies the pixel format of a texture.\n\nTexture format support varies depending on driver, hardware, and usage\nflags. In general, you should use [`SDL_GPUTextureSupportsFormat`] to query if\na format is supported before using it. However, there are a few guaranteed\nformats.\n\nFIXME: Check universal support for 32-bit component formats FIXME: Check\nuniversal support for SIMULTANEOUS_READ_WRITE\n\nFor SAMPLER usage, the following formats are universally supported:\n\n- R8G8B8A8_UNORM\n- B8G8R8A8_UNORM\n- R8_UNORM\n- R8_SNORM\n- R8G8_UNORM\n- R8G8_SNORM\n- R8G8B8A8_SNORM\n- R16_FLOAT\n- R16G16_FLOAT\n- R16G16B16A16_FLOAT\n- R32_FLOAT\n- R32G32_FLOAT\n- R32G32B32A32_FLOAT\n- R11G11B10_UFLOAT\n- R8G8B8A8_UNORM_SRGB\n- B8G8R8A8_UNORM_SRGB\n- D16_UNORM\n\nFor COLOR_TARGET usage, the following formats are universally supported:\n\n- R8G8B8A8_UNORM\n- B8G8R8A8_UNORM\n- R8_UNORM\n- R16_FLOAT\n- R16G16_FLOAT\n- R16G16B16A16_FLOAT\n- R32_FLOAT\n- R32G32_FLOAT\n- R32G32B32A32_FLOAT\n- R8_UINT\n- R8G8_UINT\n- R8G8B8A8_UINT\n- R16_UINT\n- R16G16_UINT\n- R16G16B16A16_UINT\n- R8_INT\n- R8G8_INT\n- R8G8B8A8_INT\n- R16_INT\n- R16G16_INT\n- R16G16B16A16_INT\n- R8G8B8A8_UNORM_SRGB\n- B8G8R8A8_UNORM_SRGB\n\nFor STORAGE usages, the following formats are universally supported:\n\n- R8G8B8A8_UNORM\n- R8G8B8A8_SNORM\n- R16G16B16A16_FLOAT\n- R32_FLOAT\n- R32G32_FLOAT\n- R32G32B32A32_FLOAT\n- R8G8B8A8_UINT\n- R16G16B16A16_UINT\n- R8G8B8A8_INT\n- R16G16B16A16_INT\n\nFor DEPTH_STENCIL_TARGET usage, the following formats are universally\nsupported:\n\n- D16_UNORM\n- Either (but not necessarily both!) D24_UNORM or D32_FLOAT\n- Either (but not necessarily both!) D24_UNORM_S8_UINT or D32_FLOAT_S8_UINT\n\nUnless D16_UNORM is sufficient for your purposes, always check which of\nD24/D32 is supported before creating a depth-stencil texture!\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_CreateGPUTexture`]\n- [`SDL_GPUTextureSupportsFormat`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_INVALID",
                short_name: "INVALID",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_A8_UNORM",
                short_name: "A8_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R8_UNORM",
                short_name: "R8_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R8G8_UNORM",
                short_name: "R8G8_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UNORM",
                short_name: "R8G8B8A8_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R16_UNORM",
                short_name: "R16_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R16G16_UNORM",
                short_name: "R16G16_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R16G16B16A16_UNORM",
                short_name: "R16G16B16A16_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R10G10B10A2_UNORM",
                short_name: "R10G10B10A2_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_B5G6R5_UNORM",
                short_name: "B5G6R5_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_B5G5R5A1_UNORM",
                short_name: "B5G5R5A1_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_B4G4R4A4_UNORM",
                short_name: "B4G4R4A4_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_B8G8R8A8_UNORM",
                short_name: "B8G8R8A8_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_BC1_RGBA_UNORM",
                short_name: "BC1_RGBA_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_BC2_RGBA_UNORM",
                short_name: "BC2_RGBA_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_BC3_RGBA_UNORM",
                short_name: "BC3_RGBA_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_BC4_R_UNORM",
                short_name: "BC4_R_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_BC5_RG_UNORM",
                short_name: "BC5_RG_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_BC7_RGBA_UNORM",
                short_name: "BC7_RGBA_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_BC6H_RGB_FLOAT",
                short_name: "BC6H_RGB_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_BC6H_RGB_UFLOAT",
                short_name: "BC6H_RGB_UFLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R8_SNORM",
                short_name: "R8_SNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R8G8_SNORM",
                short_name: "R8G8_SNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R8G8B8A8_SNORM",
                short_name: "R8G8B8A8_SNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R16_SNORM",
                short_name: "R16_SNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R16G16_SNORM",
                short_name: "R16G16_SNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R16G16B16A16_SNORM",
                short_name: "R16G16B16A16_SNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R16_FLOAT",
                short_name: "R16_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R16G16_FLOAT",
                short_name: "R16G16_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R16G16B16A16_FLOAT",
                short_name: "R16G16B16A16_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R32_FLOAT",
                short_name: "R32_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R32G32_FLOAT",
                short_name: "R32G32_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R32G32B32A32_FLOAT",
                short_name: "R32G32B32A32_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R11G11B10_UFLOAT",
                short_name: "R11G11B10_UFLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R8_UINT",
                short_name: "R8_UINT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R8G8_UINT",
                short_name: "R8G8_UINT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UINT",
                short_name: "R8G8B8A8_UINT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R16_UINT",
                short_name: "R16_UINT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R16G16_UINT",
                short_name: "R16G16_UINT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R16G16B16A16_UINT",
                short_name: "R16G16B16A16_UINT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R32_UINT",
                short_name: "R32_UINT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R32G32_UINT",
                short_name: "R32G32_UINT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R32G32B32A32_UINT",
                short_name: "R32G32B32A32_UINT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R8_INT",
                short_name: "R8_INT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R8G8_INT",
                short_name: "R8G8_INT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R8G8B8A8_INT",
                short_name: "R8G8B8A8_INT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R16_INT",
                short_name: "R16_INT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R16G16_INT",
                short_name: "R16G16_INT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R16G16B16A16_INT",
                short_name: "R16G16B16A16_INT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R32_INT",
                short_name: "R32_INT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R32G32_INT",
                short_name: "R32G32_INT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R32G32B32A32_INT",
                short_name: "R32G32B32A32_INT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UNORM_SRGB",
                short_name: "R8G8B8A8_UNORM_SRGB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_B8G8R8A8_UNORM_SRGB",
                short_name: "B8G8R8A8_UNORM_SRGB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_BC1_RGBA_UNORM_SRGB",
                short_name: "BC1_RGBA_UNORM_SRGB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_BC2_RGBA_UNORM_SRGB",
                short_name: "BC2_RGBA_UNORM_SRGB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_BC3_RGBA_UNORM_SRGB",
                short_name: "BC3_RGBA_UNORM_SRGB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_BC7_RGBA_UNORM_SRGB",
                short_name: "BC7_RGBA_UNORM_SRGB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_D16_UNORM",
                short_name: "D16_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_D24_UNORM",
                short_name: "D24_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_D32_FLOAT",
                short_name: "D32_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_D24_UNORM_S8_UINT",
                short_name: "D24_UNORM_S8_UINT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_D32_FLOAT_S8_UINT",
                short_name: "D32_FLOAT_S8_UINT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_4x4_UNORM",
                short_name: "ASTC_4x4_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_5x4_UNORM",
                short_name: "ASTC_5x4_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_5x5_UNORM",
                short_name: "ASTC_5x5_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_6x5_UNORM",
                short_name: "ASTC_6x5_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_6x6_UNORM",
                short_name: "ASTC_6x6_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_8x5_UNORM",
                short_name: "ASTC_8x5_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_8x6_UNORM",
                short_name: "ASTC_8x6_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_8x8_UNORM",
                short_name: "ASTC_8x8_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_10x5_UNORM",
                short_name: "ASTC_10x5_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_10x6_UNORM",
                short_name: "ASTC_10x6_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_10x8_UNORM",
                short_name: "ASTC_10x8_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_10x10_UNORM",
                short_name: "ASTC_10x10_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_12x10_UNORM",
                short_name: "ASTC_12x10_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_12x12_UNORM",
                short_name: "ASTC_12x12_UNORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_4x4_UNORM_SRGB",
                short_name: "ASTC_4x4_UNORM_SRGB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_5x4_UNORM_SRGB",
                short_name: "ASTC_5x4_UNORM_SRGB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_5x5_UNORM_SRGB",
                short_name: "ASTC_5x5_UNORM_SRGB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_6x5_UNORM_SRGB",
                short_name: "ASTC_6x5_UNORM_SRGB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_6x6_UNORM_SRGB",
                short_name: "ASTC_6x6_UNORM_SRGB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_8x5_UNORM_SRGB",
                short_name: "ASTC_8x5_UNORM_SRGB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_8x6_UNORM_SRGB",
                short_name: "ASTC_8x6_UNORM_SRGB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_8x8_UNORM_SRGB",
                short_name: "ASTC_8x8_UNORM_SRGB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_10x5_UNORM_SRGB",
                short_name: "ASTC_10x5_UNORM_SRGB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_10x6_UNORM_SRGB",
                short_name: "ASTC_10x6_UNORM_SRGB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_10x8_UNORM_SRGB",
                short_name: "ASTC_10x8_UNORM_SRGB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_10x10_UNORM_SRGB",
                short_name: "ASTC_10x10_UNORM_SRGB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_12x10_UNORM_SRGB",
                short_name: "ASTC_12x10_UNORM_SRGB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_12x12_UNORM_SRGB",
                short_name: "ASTC_12x12_UNORM_SRGB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_4x4_FLOAT",
                short_name: "ASTC_4x4_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_5x4_FLOAT",
                short_name: "ASTC_5x4_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_5x5_FLOAT",
                short_name: "ASTC_5x5_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_6x5_FLOAT",
                short_name: "ASTC_6x5_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_6x6_FLOAT",
                short_name: "ASTC_6x6_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_8x5_FLOAT",
                short_name: "ASTC_8x5_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_8x6_FLOAT",
                short_name: "ASTC_8x6_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_8x8_FLOAT",
                short_name: "ASTC_8x8_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_10x5_FLOAT",
                short_name: "ASTC_10x5_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_10x6_FLOAT",
                short_name: "ASTC_10x6_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_10x8_FLOAT",
                short_name: "ASTC_10x8_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_10x10_FLOAT",
                short_name: "ASTC_10x10_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_12x10_FLOAT",
                short_name: "ASTC_12x10_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREFORMAT_ASTC_12x12_FLOAT",
                short_name: "ASTC_12x12_FLOAT",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Flags,
        name: "SDL_GPUTextureUsageFlags",
        short_name: "GPUTextureUsageFlags",
        doc: Some("Specifies how a texture is intended to be used by the client.\n\nA texture must have at least one usage flag. Note that some usage flag\ncombinations are invalid.\n\nWith regards to compute storage usage, READ | WRITE means that you can have\nshader A that only writes into the texture and shader B that only reads\nfrom the texture and bind the same texture to either shader respectively.\nSIMULTANEOUS means that you can do reads and writes within the same shader\nor compute pass. It also implies that atomic ops can be used, since those\nare read-modify-write operations. If you use SIMULTANEOUS, you are\nresponsible for avoiding data races, as there is no data synchronization\nwithin a compute pass. Note that SIMULTANEOUS usage is only supported by a\nlimited number of texture formats.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n\n## See also\n- [`SDL_CreateGPUTexture`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_TEXTUREUSAGE_SAMPLER",
                short_name: "SAMPLER",
                doc: Some("Texture supports sampling.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREUSAGE_COLOR_TARGET",
                short_name: "COLOR_TARGET",
                doc: Some("Texture is a color render target.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREUSAGE_DEPTH_STENCIL_TARGET",
                short_name: "DEPTH_STENCIL_TARGET",
                doc: Some("Texture is a depth stencil target.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREUSAGE_GRAPHICS_STORAGE_READ",
                short_name: "GRAPHICS_STORAGE_READ",
                doc: Some("Texture supports storage reads in graphics stages.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREUSAGE_COMPUTE_STORAGE_READ",
                short_name: "COMPUTE_STORAGE_READ",
                doc: Some("Texture supports storage reads in the compute stage.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREUSAGE_COMPUTE_STORAGE_WRITE",
                short_name: "COMPUTE_STORAGE_WRITE",
                doc: Some("Texture supports storage writes in the compute stage.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTUREUSAGE_COMPUTE_STORAGE_SIMULTANEOUS_READ_WRITE",
                short_name: "COMPUTE_STORAGE_SIMULTANEOUS_READ_WRITE",
                doc: Some("Texture supports reads and writes in the same compute shader. This is NOT equivalent to READ | WRITE.\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Enum,
        name: "SDL_GPUTextureType",
        short_name: "GPUTextureType",
        doc: Some("Specifies the type of a texture.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_CreateGPUTexture`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_TEXTURETYPE_2D",
                short_name: "_2D",
                doc: Some("The texture is a 2-dimensional image.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTURETYPE_2D_ARRAY",
                short_name: "_2D_ARRAY",
                doc: Some("The texture is a 2-dimensional array image.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTURETYPE_3D",
                short_name: "_3D",
                doc: Some("The texture is a 3-dimensional image.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTURETYPE_CUBE",
                short_name: "CUBE",
                doc: Some("The texture is a cube image.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TEXTURETYPE_CUBE_ARRAY",
                short_name: "CUBE_ARRAY",
                doc: Some("The texture is a cube array image.\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Enum,
        name: "SDL_GPUSampleCount",
        short_name: "GPUSampleCount",
        doc: Some("Specifies the sample count of a texture.\n\nUsed in multisampling. Note that this value only applies when the texture\nis used as a render target.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_CreateGPUTexture`]\n- [`SDL_GPUTextureSupportsSampleCount`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_SAMPLECOUNT_1",
                short_name: "_1",
                doc: Some("No multisampling.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_SAMPLECOUNT_2",
                short_name: "_2",
                doc: Some("MSAA 2x\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_SAMPLECOUNT_4",
                short_name: "_4",
                doc: Some("MSAA 4x\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_SAMPLECOUNT_8",
                short_name: "_8",
                doc: Some("MSAA 8x\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Enum,
        name: "SDL_GPUCubeMapFace",
        short_name: "GPUCubeMapFace",
        doc: Some("Specifies the face of a cube map.\n\nCan be passed in as the layer field in texture-related structs.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_CUBEMAPFACE_POSITIVEX",
                short_name: "POSITIVEX",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_CUBEMAPFACE_NEGATIVEX",
                short_name: "NEGATIVEX",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_CUBEMAPFACE_POSITIVEY",
                short_name: "POSITIVEY",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_CUBEMAPFACE_NEGATIVEY",
                short_name: "NEGATIVEY",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_CUBEMAPFACE_POSITIVEZ",
                short_name: "POSITIVEZ",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_CUBEMAPFACE_NEGATIVEZ",
                short_name: "NEGATIVEZ",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Flags,
        name: "SDL_GPUBufferUsageFlags",
        short_name: "GPUBufferUsageFlags",
        doc: Some("Specifies how a buffer is intended to be used by the client.\n\nA buffer must have at least one usage flag. Note that some usage flag\ncombinations are invalid.\n\nUnlike textures, READ | WRITE can be used for simultaneous read-write\nusage. The same data synchronization concerns as textures apply.\n\nIf you use a STORAGE flag, the data in the buffer must respect std140\nlayout conventions. In practical terms this means you must ensure that vec3\nand vec4 fields are 16-byte aligned.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n\n## See also\n- [`SDL_CreateGPUBuffer`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_BUFFERUSAGE_VERTEX",
                short_name: "VERTEX",
                doc: Some("Buffer is a vertex buffer.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_BUFFERUSAGE_INDEX",
                short_name: "INDEX",
                doc: Some("Buffer is an index buffer.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_BUFFERUSAGE_INDIRECT",
                short_name: "INDIRECT",
                doc: Some("Buffer is an indirect buffer.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_BUFFERUSAGE_GRAPHICS_STORAGE_READ",
                short_name: "GRAPHICS_STORAGE_READ",
                doc: Some("Buffer supports storage reads in graphics stages.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_BUFFERUSAGE_COMPUTE_STORAGE_READ",
                short_name: "COMPUTE_STORAGE_READ",
                doc: Some("Buffer supports storage reads in the compute stage.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_BUFFERUSAGE_COMPUTE_STORAGE_WRITE",
                short_name: "COMPUTE_STORAGE_WRITE",
                doc: Some("Buffer supports storage writes in the compute stage.\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Enum,
        name: "SDL_GPUTransferBufferUsage",
        short_name: "GPUTransferBufferUsage",
        doc: Some("Specifies how a transfer buffer is intended to be used by the client.\n\nNote that mapping and copying FROM an upload transfer buffer or TO a\ndownload transfer buffer is undefined behavior.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_CreateGPUTransferBuffer`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_TRANSFERBUFFERUSAGE_UPLOAD",
                short_name: "UPLOAD",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_TRANSFERBUFFERUSAGE_DOWNLOAD",
                short_name: "DOWNLOAD",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Enum,
        name: "SDL_GPUShaderStage",
        short_name: "GPUShaderStage",
        doc: Some("Specifies which stage a shader program corresponds to.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_CreateGPUShader`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_SHADERSTAGE_VERTEX",
                short_name: "VERTEX",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_SHADERSTAGE_FRAGMENT",
                short_name: "FRAGMENT",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Flags,
        name: "SDL_GPUShaderFormat",
        short_name: "GPUShaderFormat",
        doc: Some("Specifies the format of shader code.\n\nEach format corresponds to a specific backend that accepts it.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n\n## See also\n- [`SDL_CreateGPUShader`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_SHADERFORMAT_INVALID",
                short_name: "INVALID",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_SHADERFORMAT_PRIVATE",
                short_name: "PRIVATE",
                doc: Some("Shaders for NDA'd platforms.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_SHADERFORMAT_SPIRV",
                short_name: "SPIRV",
                doc: Some("SPIR-V shaders for Vulkan.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_SHADERFORMAT_DXBC",
                short_name: "DXBC",
                doc: Some("DXBC SM5_1 shaders for D3D12.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_SHADERFORMAT_DXIL",
                short_name: "DXIL",
                doc: Some("DXIL SM6_0 shaders for D3D12.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_SHADERFORMAT_MSL",
                short_name: "MSL",
                doc: Some("MSL shaders for Metal.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_SHADERFORMAT_METALLIB",
                short_name: "METALLIB",
                doc: Some("Precompiled metallib shaders for Metal.\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Enum,
        name: "SDL_GPUVertexElementFormat",
        short_name: "GPUVertexElementFormat",
        doc: Some("Specifies the format of a vertex attribute.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_CreateGPUGraphicsPipeline`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_INVALID",
                short_name: "INVALID",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_INT",
                short_name: "INT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_INT2",
                short_name: "INT2",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_INT3",
                short_name: "INT3",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_INT4",
                short_name: "INT4",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_UINT",
                short_name: "UINT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_UINT2",
                short_name: "UINT2",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_UINT3",
                short_name: "UINT3",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_UINT4",
                short_name: "UINT4",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_FLOAT",
                short_name: "FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_FLOAT2",
                short_name: "FLOAT2",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_FLOAT3",
                short_name: "FLOAT3",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_FLOAT4",
                short_name: "FLOAT4",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_BYTE2",
                short_name: "BYTE2",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_BYTE4",
                short_name: "BYTE4",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_UBYTE2",
                short_name: "UBYTE2",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_UBYTE4",
                short_name: "UBYTE4",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_BYTE2_NORM",
                short_name: "BYTE2_NORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_BYTE4_NORM",
                short_name: "BYTE4_NORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_UBYTE2_NORM",
                short_name: "UBYTE2_NORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_UBYTE4_NORM",
                short_name: "UBYTE4_NORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_SHORT2",
                short_name: "SHORT2",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_SHORT4",
                short_name: "SHORT4",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_USHORT2",
                short_name: "USHORT2",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_USHORT4",
                short_name: "USHORT4",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_SHORT2_NORM",
                short_name: "SHORT2_NORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_SHORT4_NORM",
                short_name: "SHORT4_NORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_USHORT2_NORM",
                short_name: "USHORT2_NORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_USHORT4_NORM",
                short_name: "USHORT4_NORM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_HALF2",
                short_name: "HALF2",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXELEMENTFORMAT_HALF4",
                short_name: "HALF4",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Enum,
        name: "SDL_GPUVertexInputRate",
        short_name: "GPUVertexInputRate",
        doc: Some("Specifies the rate at which vertex attributes are pulled from buffers.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_CreateGPUGraphicsPipeline`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_VERTEXINPUTRATE_VERTEX",
                short_name: "VERTEX",
                doc: Some("Attribute addressing is a function of the vertex index.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_VERTEXINPUTRATE_INSTANCE",
                short_name: "INSTANCE",
                doc: Some("Attribute addressing is a function of the instance index.\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Enum,
        name: "SDL_GPUFillMode",
        short_name: "GPUFillMode",
        doc: Some("Specifies the fill mode of the graphics pipeline.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_CreateGPUGraphicsPipeline`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_FILLMODE_FILL",
                short_name: "FILL",
                doc: Some("Polygons will be rendered via rasterization.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_FILLMODE_LINE",
                short_name: "LINE",
                doc: Some("Polygon edges will be drawn as line segments.\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Enum,
        name: "SDL_GPUCullMode",
        short_name: "GPUCullMode",
        doc: Some("Specifies the facing direction in which triangle faces will be culled.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_CreateGPUGraphicsPipeline`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_CULLMODE_NONE",
                short_name: "NONE",
                doc: Some("No triangles are culled.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_CULLMODE_FRONT",
                short_name: "FRONT",
                doc: Some("Front-facing triangles are culled.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_CULLMODE_BACK",
                short_name: "BACK",
                doc: Some("Back-facing triangles are culled.\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Enum,
        name: "SDL_GPUFrontFace",
        short_name: "GPUFrontFace",
        doc: Some("Specifies the vertex winding that will cause a triangle to be determined to\nbe front-facing.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_CreateGPUGraphicsPipeline`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_FRONTFACE_COUNTER_CLOCKWISE",
                short_name: "COUNTER_CLOCKWISE",
                doc: Some("A triangle with counter-clockwise vertex winding will be considered front-facing.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_FRONTFACE_CLOCKWISE",
                short_name: "CLOCKWISE",
                doc: Some("A triangle with clockwise vertex winding will be considered front-facing.\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Enum,
        name: "SDL_GPUCompareOp",
        short_name: "GPUCompareOp",
        doc: Some("Specifies a comparison operator for depth, stencil and sampler operations.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_CreateGPUGraphicsPipeline`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_COMPAREOP_INVALID",
                short_name: "INVALID",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_COMPAREOP_NEVER",
                short_name: "NEVER",
                doc: Some("The comparison always evaluates false.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_COMPAREOP_LESS",
                short_name: "LESS",
                doc: Some("The comparison evaluates reference < test.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_COMPAREOP_EQUAL",
                short_name: "EQUAL",
                doc: Some("The comparison evaluates reference == test.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_COMPAREOP_LESS_OR_EQUAL",
                short_name: "LESS_OR_EQUAL",
                doc: Some("The comparison evaluates reference <= test.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_COMPAREOP_GREATER",
                short_name: "GREATER",
                doc: Some("The comparison evaluates reference > test.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_COMPAREOP_NOT_EQUAL",
                short_name: "NOT_EQUAL",
                doc: Some("The comparison evaluates reference != test.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_COMPAREOP_GREATER_OR_EQUAL",
                short_name: "GREATER_OR_EQUAL",
                doc: Some("The comparison evalutes reference >= test.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_COMPAREOP_ALWAYS",
                short_name: "ALWAYS",
                doc: Some("The comparison always evaluates true.\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Enum,
        name: "SDL_GPUStencilOp",
        short_name: "GPUStencilOp",
        doc: Some("Specifies what happens to a stored stencil value if stencil tests fail or\npass.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_CreateGPUGraphicsPipeline`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_STENCILOP_INVALID",
                short_name: "INVALID",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_STENCILOP_KEEP",
                short_name: "KEEP",
                doc: Some("Keeps the current value.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_STENCILOP_ZERO",
                short_name: "ZERO",
                doc: Some("Sets the value to 0.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_STENCILOP_REPLACE",
                short_name: "REPLACE",
                doc: Some("Sets the value to reference.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_STENCILOP_INCREMENT_AND_CLAMP",
                short_name: "INCREMENT_AND_CLAMP",
                doc: Some("Increments the current value and clamps to the maximum value.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_STENCILOP_DECREMENT_AND_CLAMP",
                short_name: "DECREMENT_AND_CLAMP",
                doc: Some("Decrements the current value and clamps to 0.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_STENCILOP_INVERT",
                short_name: "INVERT",
                doc: Some("Bitwise-inverts the current value.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_STENCILOP_INCREMENT_AND_WRAP",
                short_name: "INCREMENT_AND_WRAP",
                doc: Some("Increments the current value and wraps back to 0.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_STENCILOP_DECREMENT_AND_WRAP",
                short_name: "DECREMENT_AND_WRAP",
                doc: Some("Decrements the current value and wraps to the maximum value.\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Enum,
        name: "SDL_GPUBlendOp",
        short_name: "GPUBlendOp",
        doc: Some("Specifies the operator to be used when pixels in a render target are\nblended with existing pixels in the texture.\n\nThe source color is the value written by the fragment shader. The\ndestination color is the value currently existing in the texture.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_CreateGPUGraphicsPipeline`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_BLENDOP_INVALID",
                short_name: "INVALID",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_BLENDOP_ADD",
                short_name: "ADD",
                doc: Some("(source * source_factor) + (destination * destination_factor)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_BLENDOP_SUBTRACT",
                short_name: "SUBTRACT",
                doc: Some("(source * source_factor) - (destination * destination_factor)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_BLENDOP_REVERSE_SUBTRACT",
                short_name: "REVERSE_SUBTRACT",
                doc: Some("(destination * destination_factor) - (source * source_factor)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_BLENDOP_MIN",
                short_name: "MIN",
                doc: Some("min(source, destination)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_BLENDOP_MAX",
                short_name: "MAX",
                doc: Some("max(source, destination)\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Enum,
        name: "SDL_GPUBlendFactor",
        short_name: "GPUBlendFactor",
        doc: Some("Specifies a blending factor to be used when pixels in a render target are\nblended with existing pixels in the texture.\n\nThe source color is the value written by the fragment shader. The\ndestination color is the value currently existing in the texture.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_CreateGPUGraphicsPipeline`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_BLENDFACTOR_INVALID",
                short_name: "INVALID",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_BLENDFACTOR_ZERO",
                short_name: "ZERO",
                doc: Some("0\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_BLENDFACTOR_ONE",
                short_name: "ONE",
                doc: Some("1\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_BLENDFACTOR_SRC_COLOR",
                short_name: "SRC_COLOR",
                doc: Some("source color\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_BLENDFACTOR_ONE_MINUS_SRC_COLOR",
                short_name: "ONE_MINUS_SRC_COLOR",
                doc: Some("1 - source color\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_BLENDFACTOR_DST_COLOR",
                short_name: "DST_COLOR",
                doc: Some("destination color\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_BLENDFACTOR_ONE_MINUS_DST_COLOR",
                short_name: "ONE_MINUS_DST_COLOR",
                doc: Some("1 - destination color\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_BLENDFACTOR_SRC_ALPHA",
                short_name: "SRC_ALPHA",
                doc: Some("source alpha\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_BLENDFACTOR_ONE_MINUS_SRC_ALPHA",
                short_name: "ONE_MINUS_SRC_ALPHA",
                doc: Some("1 - source alpha\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_BLENDFACTOR_DST_ALPHA",
                short_name: "DST_ALPHA",
                doc: Some("destination alpha\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_BLENDFACTOR_ONE_MINUS_DST_ALPHA",
                short_name: "ONE_MINUS_DST_ALPHA",
                doc: Some("1 - destination alpha\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_BLENDFACTOR_CONSTANT_COLOR",
                short_name: "CONSTANT_COLOR",
                doc: Some("blend constant\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_BLENDFACTOR_ONE_MINUS_CONSTANT_COLOR",
                short_name: "ONE_MINUS_CONSTANT_COLOR",
                doc: Some("1 - blend constant\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_BLENDFACTOR_SRC_ALPHA_SATURATE",
                short_name: "SRC_ALPHA_SATURATE",
                doc: Some("min(source alpha, 1 - destination alpha)\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Flags,
        name: "SDL_GPUColorComponentFlags",
        short_name: "GPUColorComponentFlags",
        doc: Some("Specifies which color components are written in a graphics pipeline.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n\n## See also\n- [`SDL_CreateGPUGraphicsPipeline`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_COLORCOMPONENT_R",
                short_name: "R",
                doc: Some("the red component\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_COLORCOMPONENT_G",
                short_name: "G",
                doc: Some("the green component\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_COLORCOMPONENT_B",
                short_name: "B",
                doc: Some("the blue component\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_COLORCOMPONENT_A",
                short_name: "A",
                doc: Some("the alpha component\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Enum,
        name: "SDL_GPUFilter",
        short_name: "GPUFilter",
        doc: Some("Specifies a filter operation used by a sampler.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_CreateGPUSampler`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_FILTER_NEAREST",
                short_name: "NEAREST",
                doc: Some("Point filtering.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_FILTER_LINEAR",
                short_name: "LINEAR",
                doc: Some("Linear filtering.\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Enum,
        name: "SDL_GPUSamplerMipmapMode",
        short_name: "GPUSamplerMipmapMode",
        doc: Some("Specifies a mipmap mode used by a sampler.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_CreateGPUSampler`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_SAMPLERMIPMAPMODE_NEAREST",
                short_name: "NEAREST",
                doc: Some("Point filtering.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_SAMPLERMIPMAPMODE_LINEAR",
                short_name: "LINEAR",
                doc: Some("Linear filtering.\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Enum,
        name: "SDL_GPUSamplerAddressMode",
        short_name: "GPUSamplerAddressMode",
        doc: Some("Specifies behavior of texture sampling when the coordinates exceed the 0-1\nrange.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_CreateGPUSampler`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_SAMPLERADDRESSMODE_REPEAT",
                short_name: "REPEAT",
                doc: Some("Specifies that the coordinates will wrap around.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_SAMPLERADDRESSMODE_MIRRORED_REPEAT",
                short_name: "MIRRORED_REPEAT",
                doc: Some("Specifies that the coordinates will wrap around mirrored.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_SAMPLERADDRESSMODE_CLAMP_TO_EDGE",
                short_name: "CLAMP_TO_EDGE",
                doc: Some("Specifies that the coordinates will clamp to the 0-1 range.\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Enum,
        name: "SDL_GPUPresentMode",
        short_name: "GPUPresentMode",
        doc: Some("Specifies the timing that will be used to present swapchain textures to the\nOS.\n\nVSYNC mode will always be supported. IMMEDIATE and MAILBOX modes may not be\nsupported on certain systems.\n\nIt is recommended to query [`SDL_WindowSupportsGPUPresentMode`] after claiming\nthe window if you wish to change the present mode to IMMEDIATE or MAILBOX.\n\n- VSYNC: Waits for vblank before presenting. No tearing is possible. If\nthere is a pending image to present, the new image is enqueued for\npresentation. Disallows tearing at the cost of visual latency.\n- IMMEDIATE: Immediately presents. Lowest latency option, but tearing may\noccur.\n- MAILBOX: Waits for vblank before presenting. No tearing is possible. If\nthere is a pending image to present, the pending image is replaced by the\nnew image. Similar to VSYNC, but with reduced visual latency.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_SetGPUSwapchainParameters`]\n- [`SDL_WindowSupportsGPUPresentMode`]\n- [`SDL_WaitAndAcquireGPUSwapchainTexture`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_PRESENTMODE_VSYNC",
                short_name: "VSYNC",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_PRESENTMODE_IMMEDIATE",
                short_name: "IMMEDIATE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_PRESENTMODE_MAILBOX",
                short_name: "MAILBOX",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "gpu",
        kind: GroupKind::Enum,
        name: "SDL_GPUSwapchainComposition",
        short_name: "GPUSwapchainComposition",
        doc: Some("Specifies the texture format and colorspace of the swapchain textures.\n\nSDR will always be supported. Other compositions may not be supported on\ncertain systems.\n\nIt is recommended to query [`SDL_WindowSupportsGPUSwapchainComposition`] after\nclaiming the window if you wish to change the swapchain composition from\nSDR.\n\n- SDR: B8G8R8A8 or R8G8B8A8 swapchain. Pixel values are in sRGB encoding.\n- SDR_LINEAR: B8G8R8A8_SRGB or R8G8B8A8_SRGB swapchain. Pixel values are\nstored in memory in sRGB encoding but accessed in shaders in \"linear\nsRGB\" encoding which is sRGB but with a linear transfer function.\n- HDR_EXTENDED_LINEAR: R16G16B16A16_FLOAT swapchain. Pixel values are in\nextended linear sRGB encoding and permits values outside of the \\[0, 1\\]\nrange.\n- HDR10_ST2084: A2R10G10B10 or A2B10G10R10 swapchain. Pixel values are in\nBT.2020 ST2084 (PQ) encoding.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_SetGPUSwapchainParameters`]\n- [`SDL_WindowSupportsGPUSwapchainComposition`]\n- [`SDL_WaitAndAcquireGPUSwapchainTexture`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GPU_SWAPCHAINCOMPOSITION_SDR",
                short_name: "SDR",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_SWAPCHAINCOMPOSITION_SDR_LINEAR",
                short_name: "SDR_LINEAR",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_SWAPCHAINCOMPOSITION_HDR_EXTENDED_LINEAR",
                short_name: "HDR_EXTENDED_LINEAR",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GPU_SWAPCHAINCOMPOSITION_HDR10_ST2084",
                short_name: "HDR10_ST2084",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "haptic",
        kind: GroupKind::Id,
        name: "SDL_HapticID",
        short_name: "HapticID",
        doc: Some("This is a unique ID for a haptic device for the time it is connected to the\nsystem, and is never reused for the lifetime of the application.\n\nIf the haptic device is disconnected and reconnected, it will get a new ID.\n\nThe value 0 is an invalid ID.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
        ],
    },
    Group {
        module: "hidapi",
        kind: GroupKind::Enum,
        name: "SDL_hid_bus_type",
        short_name: "hid_bus_type",
        doc: Some("HID underlying bus types.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_HID_API_BUS_UNKNOWN",
                short_name: "UNKNOWN",
                doc: Some("Unknown bus type\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_HID_API_BUS_USB",
                short_name: "USB",
                doc: Some("USB bus\nSpecifications:\n<https://usb.org/hid>\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_HID_API_BUS_BLUETOOTH",
                short_name: "BLUETOOTH",
                doc: Some("Bluetooth or Bluetooth LE bus\nSpecifications:\n<https://www.bluetooth.com/specifications/specs/human-interface-device-profile-1-1-1/>\n<https://www.bluetooth.com/specifications/specs/hid-service-1-0/>\n<https://www.bluetooth.com/specifications/specs/hid-over-gatt-profile-1-0/>\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_HID_API_BUS_I2C",
                short_name: "I2C",
                doc: Some("I2C bus\nSpecifications:\n<https://docs.microsoft.com/previous-versions/windows/hardware/design/dn642101(v=vs.85)>\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_HID_API_BUS_SPI",
                short_name: "SPI",
                doc: Some("SPI bus\nSpecifications:\n<https://www.microsoft.com/download/details.aspx?id=103325>\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "hints",
        kind: GroupKind::Enum,
        name: "SDL_HintPriority",
        short_name: "HintPriority",
        doc: Some("An enumeration of hint priorities.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_HINT_DEFAULT",
                short_name: "DEFAULT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_HINT_NORMAL",
                short_name: "NORMAL",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_HINT_OVERRIDE",
                short_name: "OVERRIDE",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "init",
        kind: GroupKind::Flags,
        name: "SDL_InitFlags",
        short_name: "InitFlags",
        doc: Some("Initialization flags for [`SDL_Init`] and/or [`SDL_InitSubSystem`]\n\nThese are the flags which may be passed to [`SDL_Init()`]. You should specify\nthe subsystems which you will be using in your application.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n\n## See also\n- [`SDL_Init`]\n- [`SDL_Quit`]\n- [`SDL_InitSubSystem`]\n- [`SDL_QuitSubSystem`]\n- [`SDL_WasInit`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_INIT_AUDIO",
                short_name: "AUDIO",
                doc: Some("[`SDL_INIT_AUDIO`] implies [`SDL_INIT_EVENTS`]\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_INIT_VIDEO",
                short_name: "VIDEO",
                doc: Some("[`SDL_INIT_VIDEO`] implies [`SDL_INIT_EVENTS`], should be initialized on the main thread\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_INIT_JOYSTICK",
                short_name: "JOYSTICK",
                doc: Some("[`SDL_INIT_JOYSTICK`] implies [`SDL_INIT_EVENTS`], should be initialized on the same thread as [`SDL_INIT_VIDEO`] on Windows if you don't set [`SDL_HINT_JOYSTICK_THREAD`]\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_INIT_HAPTIC",
                short_name: "HAPTIC",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_INIT_GAMEPAD",
                short_name: "GAMEPAD",
                doc: Some("[`SDL_INIT_GAMEPAD`] implies [`SDL_INIT_JOYSTICK`]\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_INIT_EVENTS",
                short_name: "EVENTS",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_INIT_SENSOR",
                short_name: "SENSOR",
                doc: Some("[`SDL_INIT_SENSOR`] implies [`SDL_INIT_EVENTS`]\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_INIT_CAMERA",
                short_name: "CAMERA",
                doc: Some("[`SDL_INIT_CAMERA`] implies [`SDL_INIT_EVENTS`]\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "init",
        kind: GroupKind::Enum,
        name: "SDL_AppResult",
        short_name: "AppResult",
        doc: Some("Return values for optional main callbacks.\n\nReturning [`SDL_APP_SUCCESS`] or [`SDL_APP_FAILURE`] from [`SDL_AppInit`],\n[`SDL_AppEvent`], or [`SDL_AppIterate`] will terminate the program and report\nsuccess/failure to the operating system. What that means is\nplatform-dependent. On Unix, for example, on success, the process error\ncode will be zero, and on failure it will be 1. This interface doesn't\nallow you to return specific exit codes, just whether there was an error\ngenerally or not.\n\nReturning [`SDL_APP_CONTINUE`] from these functions will let the app continue\nto run.\n\nSee\n[Main callbacks in SDL3](https://wiki.libsdl.org/SDL3/README/main-functions#main-callbacks-in-sdl3)\nfor complete details.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_APP_CONTINUE",
                short_name: "CONTINUE",
                doc: Some("Value that requests that the app continue from the main callbacks.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_APP_SUCCESS",
                short_name: "SUCCESS",
                doc: Some("Value that requests termination with success from the main callbacks.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_APP_FAILURE",
                short_name: "FAILURE",
                doc: Some("Value that requests termination with error from the main callbacks.\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "iostream",
        kind: GroupKind::Enum,
        name: "SDL_IOStatus",
        short_name: "IOStatus",
        doc: Some("[`SDL_IOStream`] status, set by a read or write operation.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_IO_STATUS_READY",
                short_name: "READY",
                doc: Some("Everything is ready (no errors and not EOF).\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_IO_STATUS_ERROR",
                short_name: "ERROR",
                doc: Some("Read or write I/O error\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_IO_STATUS_EOF",
                short_name: "EOF",
                doc: Some("End of file\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_IO_STATUS_NOT_READY",
                short_name: "NOT_READY",
                doc: Some("Non blocking I/O, not ready\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_IO_STATUS_READONLY",
                short_name: "READONLY",
                doc: Some("Tried to write a read-only buffer\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_IO_STATUS_WRITEONLY",
                short_name: "WRITEONLY",
                doc: Some("Tried to read a write-only buffer\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "iostream",
        kind: GroupKind::Enum,
        name: "SDL_IOWhence",
        short_name: "IOWhence",
        doc: Some("Possible `whence` values for [`SDL_IOStream`] seeking.\n\nThese map to the same \"whence\" concept that `fseek` or `lseek` use in the\nstandard C runtime.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_IO_SEEK_SET",
                short_name: "SET",
                doc: Some("Seek from the beginning of data\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_IO_SEEK_CUR",
                short_name: "CUR",
                doc: Some("Seek relative to current read point\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_IO_SEEK_END",
                short_name: "END",
                doc: Some("Seek relative to the end of data\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "joystick",
        kind: GroupKind::Id,
        name: "SDL_JoystickID",
        short_name: "JoystickID",
        doc: Some("This is a unique ID for a joystick for the time it is connected to the\nsystem, and is never reused for the lifetime of the application.\n\nIf the joystick is disconnected and reconnected, it will get a new ID.\n\nThe value 0 is an invalid ID.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
        ],
    },
    Group {
        module: "joystick",
        kind: GroupKind::Enum,
        name: "SDL_JoystickType",
        short_name: "JoystickType",
        doc: Some("An enum of some common joystick types.\n\nIn some cases, SDL can identify a low-level joystick as being a certain\ntype of device, and will report it through [`SDL_GetJoystickType`] (or\n[`SDL_GetJoystickTypeForID`]).\n\nThis is by no means a complete list of everything that can be plugged into\na computer.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_JOYSTICK_TYPE_UNKNOWN",
                short_name: "UNKNOWN",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_JOYSTICK_TYPE_GAMEPAD",
                short_name: "GAMEPAD",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_JOYSTICK_TYPE_WHEEL",
                short_name: "WHEEL",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_JOYSTICK_TYPE_ARCADE_STICK",
                short_name: "ARCADE_STICK",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_JOYSTICK_TYPE_FLIGHT_STICK",
                short_name: "FLIGHT_STICK",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_JOYSTICK_TYPE_DANCE_PAD",
                short_name: "DANCE_PAD",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_JOYSTICK_TYPE_GUITAR",
                short_name: "GUITAR",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_JOYSTICK_TYPE_DRUM_KIT",
                short_name: "DRUM_KIT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_JOYSTICK_TYPE_ARCADE_PAD",
                short_name: "ARCADE_PAD",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_JOYSTICK_TYPE_THROTTLE",
                short_name: "THROTTLE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_JOYSTICK_TYPE_COUNT",
                short_name: "COUNT",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "joystick",
        kind: GroupKind::Enum,
        name: "SDL_JoystickConnectionState",
        short_name: "JoystickConnectionState",
        doc: Some("Possible connection states for a joystick device.\n\nThis is used by [`SDL_GetJoystickConnectionState`] to report how a device is\nconnected to the system.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_JOYSTICK_CONNECTION_INVALID",
                short_name: "INVALID",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_JOYSTICK_CONNECTION_UNKNOWN",
                short_name: "UNKNOWN",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_JOYSTICK_CONNECTION_WIRED",
                short_name: "WIRED",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_JOYSTICK_CONNECTION_WIRELESS",
                short_name: "WIRELESS",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "keyboard",
        kind: GroupKind::Id,
        name: "SDL_KeyboardID",
        short_name: "KeyboardID",
        doc: Some("This is a unique ID for a keyboard for the time it is connected to the\nsystem, and is never reused for the lifetime of the application.\n\nIf the keyboard is disconnected and reconnected, it will get a new ID.\n\nThe value 0 is an invalid ID.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
        ],
    },
    Group {
        module: "keyboard",
        kind: GroupKind::Enum,
        name: "SDL_TextInputType",
        short_name: "TextInputType",
        doc: Some("Text input type.\n\nThese are the valid values for [`SDL_PROP_TEXTINPUT_TYPE_NUMBER`]. Not every\nvalue is valid on every platform, but where a value isn't supported, a\nreasonable fallback will be used.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_StartTextInputWithProperties`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_TEXTINPUT_TYPE_TEXT",
                short_name: "TEXT",
                doc: Some("The input is text\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TEXTINPUT_TYPE_TEXT_NAME",
                short_name: "TEXT_NAME",
                doc: Some("The input is a person's name\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TEXTINPUT_TYPE_TEXT_EMAIL",
                short_name: "TEXT_EMAIL",
                doc: Some("The input is an e-mail address\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TEXTINPUT_TYPE_TEXT_USERNAME",
                short_name: "TEXT_USERNAME",
                doc: Some("The input is a username\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TEXTINPUT_TYPE_TEXT_PASSWORD_HIDDEN",
                short_name: "TEXT_PASSWORD_HIDDEN",
                doc: Some("The input is a secure password that is hidden\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TEXTINPUT_TYPE_TEXT_PASSWORD_VISIBLE",
                short_name: "TEXT_PASSWORD_VISIBLE",
                doc: Some("The input is a secure password that is visible\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TEXTINPUT_TYPE_NUMBER",
                short_name: "NUMBER",
                doc: Some("The input is a number\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TEXTINPUT_TYPE_NUMBER_PASSWORD_HIDDEN",
                short_name: "NUMBER_PASSWORD_HIDDEN",
                doc: Some("The input is a secure PIN that is hidden\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TEXTINPUT_TYPE_NUMBER_PASSWORD_VISIBLE",
                short_name: "NUMBER_PASSWORD_VISIBLE",
                doc: Some("The input is a secure PIN that is visible\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "keyboard",
        kind: GroupKind::Enum,
        name: "SDL_Capitalization",
        short_name: "Capitalization",
        doc: Some("Auto capitalization type.\n\nThese are the valid values for [`SDL_PROP_TEXTINPUT_CAPITALIZATION_NUMBER`].\nNot every value is valid on every platform, but where a value isn't\nsupported, a reasonable fallback will be used.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_StartTextInputWithProperties`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_CAPITALIZE_NONE",
                short_name: "NONE",
                doc: Some("No auto-capitalization will be done\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_CAPITALIZE_SENTENCES",
                short_name: "SENTENCES",
                doc: Some("The first letter of sentences will be capitalized\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_CAPITALIZE_WORDS",
                short_name: "WORDS",
                doc: Some("The first letter of words will be capitalized\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_CAPITALIZE_LETTERS",
                short_name: "LETTERS",
                doc: Some("All letters will be capitalized\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "keycode",
        kind: GroupKind::Id,
        name: "SDL_Keycode",
        short_name: "Keycode",
        doc: Some("The SDL virtual key representation.\n\nValues of this type are used to represent keyboard keys using the current\nlayout of the keyboard. These values include Unicode values representing\nthe unmodified character that would be generated by pressing the key, or an\n`SDLK_*` constant for those keys that do not generate characters.\n\nA special exception is the number keys at the top of the keyboard which map\nto SDLK_0...SDLK_9 on AZERTY layouts.\n\nKeys with the `SDLK_EXTENDED_MASK` bit set do not map to a scancode or\nunicode code point.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDLK_EXTENDED_MASK",
                short_name: "EXTENDED_MASK",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDLK_SCANCODE_MASK",
                short_name: "SCANCODE_MASK",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDLK_UNKNOWN",
                short_name: "UNKNOWN",
                doc: Some("0\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_RETURN",
                short_name: "RETURN",
                doc: Some("'\\r'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_ESCAPE",
                short_name: "ESCAPE",
                doc: Some("'\\x1B'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_BACKSPACE",
                short_name: "BACKSPACE",
                doc: Some("'\\b'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_TAB",
                short_name: "TAB",
                doc: Some("'\\t'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_SPACE",
                short_name: "SPACE",
                doc: Some("' '\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_EXCLAIM",
                short_name: "EXCLAIM",
                doc: Some("'!'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_DBLAPOSTROPHE",
                short_name: "DBLAPOSTROPHE",
                doc: Some("'\"'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_HASH",
                short_name: "HASH",
                doc: Some("'#'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_DOLLAR",
                short_name: "DOLLAR",
                doc: Some("'$'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_PERCENT",
                short_name: "PERCENT",
                doc: Some("'%'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_AMPERSAND",
                short_name: "AMPERSAND",
                doc: Some("'&'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_APOSTROPHE",
                short_name: "APOSTROPHE",
                doc: Some("'\\''\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_LEFTPAREN",
                short_name: "LEFTPAREN",
                doc: Some("'('\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_RIGHTPAREN",
                short_name: "RIGHTPAREN",
                doc: Some("')'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_ASTERISK",
                short_name: "ASTERISK",
                doc: Some("'*'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_PLUS",
                short_name: "PLUS",
                doc: Some("'+'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_COMMA",
                short_name: "COMMA",
                doc: Some("','\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_MINUS",
                short_name: "MINUS",
                doc: Some("'-'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_PERIOD",
                short_name: "PERIOD",
                doc: Some("'.'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_SLASH",
                short_name: "SLASH",
                doc: Some("'/'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_0",
                short_name: "_0",
                doc: Some("'0'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_1",
                short_name: "_1",
                doc: Some("'1'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_2",
                short_name: "_2",
                doc: Some("'2'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_3",
                short_name: "_3",
                doc: Some("'3'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_4",
                short_name: "_4",
                doc: Some("'4'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_5",
                short_name: "_5",
                doc: Some("'5'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_6",
                short_name: "_6",
                doc: Some("'6'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_7",
                short_name: "_7",
                doc: Some("'7'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_8",
                short_name: "_8",
                doc: Some("'8'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_9",
                short_name: "_9",
                doc: Some("'9'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_COLON",
                short_name: "COLON",
                doc: Some("':'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_SEMICOLON",
                short_name: "SEMICOLON",
                doc: Some("';'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_LESS",
                short_name: "LESS",
                doc: Some("'<'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_EQUALS",
                short_name: "EQUALS",
                doc: Some("'='\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_GREATER",
                short_name: "GREATER",
                doc: Some("'>'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_QUESTION",
                short_name: "QUESTION",
                doc: Some("'?'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_AT",
                short_name: "AT",
                doc: Some("'@'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_LEFTBRACKET",
                short_name: "LEFTBRACKET",
                doc: Some("'['\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_BACKSLASH",
                short_name: "BACKSLASH",
                doc: Some("'\\\\'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_RIGHTBRACKET",
                short_name: "RIGHTBRACKET",
                doc: Some("']'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_CARET",
                short_name: "CARET",
                doc: Some("'^'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_UNDERSCORE",
                short_name: "UNDERSCORE",
                doc: Some("'_'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_GRAVE",
                short_name: "GRAVE",
                doc: Some("'`'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_A",
                short_name: "A",
                doc: Some("'a'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_B",
                short_name: "B",
                doc: Some("'b'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_C",
                short_name: "C",
                doc: Some("'c'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_D",
                short_name: "D",
                doc: Some("'d'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_E",
                short_name: "E",
                doc: Some("'e'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_F",
                short_name: "F",
                doc: Some("'f'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_G",
                short_name: "G",
                doc: Some("'g'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_H",
                short_name: "H",
                doc: Some("'h'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_I",
                short_name: "I",
                doc: Some("'i'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_J",
                short_name: "J",
                doc: Some("'j'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_K",
                short_name: "K",
                doc: Some("'k'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_L",
                short_name: "L",
                doc: Some("'l'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_M",
                short_name: "M",
                doc: Some("'m'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_N",
                short_name: "N",
                doc: Some("'n'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_O",
                short_name: "O",
                doc: Some("'o'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_P",
                short_name: "P",
                doc: Some("'p'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_Q",
                short_name: "Q",
                doc: Some("'q'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_R",
                short_name: "R",
                doc: Some("'r'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_S",
                short_name: "S",
                doc: Some("'s'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_T",
                short_name: "T",
                doc: Some("'t'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_U",
                short_name: "U",
                doc: Some("'u'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_V",
                short_name: "V",
                doc: Some("'v'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_W",
                short_name: "W",
                doc: Some("'w'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_X",
                short_name: "X",
                doc: Some("'x'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_Y",
                short_name: "Y",
                doc: Some("'y'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_Z",
                short_name: "Z",
                doc: Some("'z'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_LEFTBRACE",
                short_name: "LEFTBRACE",
                doc: Some("'{'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_PIPE",
                short_name: "PIPE",
                doc: Some("'|'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_RIGHTBRACE",
                short_name: "RIGHTBRACE",
                doc: Some("'}'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_TILDE",
                short_name: "TILDE",
                doc: Some("'~'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_DELETE",
                short_name: "DELETE",
                doc: Some("'\\x7F'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_PLUSMINUS",
                short_name: "PLUSMINUS",
                doc: Some("'\\xB1'\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_CAPSLOCK",
                short_name: "CAPSLOCK",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CAPSLOCK`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_F1",
                short_name: "F1",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F1`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_F2",
                short_name: "F2",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F2`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_F3",
                short_name: "F3",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F3`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_F4",
                short_name: "F4",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F4`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_F5",
                short_name: "F5",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F5`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_F6",
                short_name: "F6",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F6`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_F7",
                short_name: "F7",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F7`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_F8",
                short_name: "F8",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F8`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_F9",
                short_name: "F9",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F9`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_F10",
                short_name: "F10",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F10`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_F11",
                short_name: "F11",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F11`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_F12",
                short_name: "F12",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F12`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_PRINTSCREEN",
                short_name: "PRINTSCREEN",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_PRINTSCREEN`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_SCROLLLOCK",
                short_name: "SCROLLLOCK",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_SCROLLLOCK`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_PAUSE",
                short_name: "PAUSE",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_PAUSE`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_INSERT",
                short_name: "INSERT",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_INSERT`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_HOME",
                short_name: "HOME",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_HOME`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_PAGEUP",
                short_name: "PAGEUP",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_PAGEUP`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_END",
                short_name: "END",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_END`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_PAGEDOWN",
                short_name: "PAGEDOWN",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_PAGEDOWN`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_RIGHT",
                short_name: "RIGHT",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_RIGHT`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_LEFT",
                short_name: "LEFT",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_LEFT`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_DOWN",
                short_name: "DOWN",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_DOWN`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_UP",
                short_name: "UP",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_UP`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_NUMLOCKCLEAR",
                short_name: "NUMLOCKCLEAR",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_NUMLOCKCLEAR`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_DIVIDE",
                short_name: "KP_DIVIDE",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_DIVIDE`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_MULTIPLY",
                short_name: "KP_MULTIPLY",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_MULTIPLY`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_MINUS",
                short_name: "KP_MINUS",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_MINUS`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_PLUS",
                short_name: "KP_PLUS",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_PLUS`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_ENTER",
                short_name: "KP_ENTER",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_ENTER`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_1",
                short_name: "KP_1",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_1`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_2",
                short_name: "KP_2",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_2`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_3",
                short_name: "KP_3",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_3`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_4",
                short_name: "KP_4",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_4`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_5",
                short_name: "KP_5",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_5`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_6",
                short_name: "KP_6",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_6`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_7",
                short_name: "KP_7",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_7`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_8",
                short_name: "KP_8",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_8`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_9",
                short_name: "KP_9",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_9`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_0",
                short_name: "KP_0",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_0`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_PERIOD",
                short_name: "KP_PERIOD",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_PERIOD`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_APPLICATION",
                short_name: "APPLICATION",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_APPLICATION`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_POWER",
                short_name: "POWER",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_POWER`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_EQUALS",
                short_name: "KP_EQUALS",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_EQUALS`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_F13",
                short_name: "F13",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F13`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_F14",
                short_name: "F14",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F14`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_F15",
                short_name: "F15",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F15`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_F16",
                short_name: "F16",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F16`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_F17",
                short_name: "F17",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F17`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_F18",
                short_name: "F18",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F18`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_F19",
                short_name: "F19",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F19`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_F20",
                short_name: "F20",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F20`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_F21",
                short_name: "F21",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F21`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_F22",
                short_name: "F22",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F22`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_F23",
                short_name: "F23",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F23`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_F24",
                short_name: "F24",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_F24`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_EXECUTE",
                short_name: "EXECUTE",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_EXECUTE`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_HELP",
                short_name: "HELP",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_HELP`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_MENU",
                short_name: "MENU",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MENU`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_SELECT",
                short_name: "SELECT",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_SELECT`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_STOP",
                short_name: "STOP",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_STOP`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_AGAIN",
                short_name: "AGAIN",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AGAIN`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_UNDO",
                short_name: "UNDO",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_UNDO`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_CUT",
                short_name: "CUT",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CUT`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_COPY",
                short_name: "COPY",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_COPY`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_PASTE",
                short_name: "PASTE",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_PASTE`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_FIND",
                short_name: "FIND",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_FIND`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_MUTE",
                short_name: "MUTE",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MUTE`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_VOLUMEUP",
                short_name: "VOLUMEUP",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_VOLUMEUP`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_VOLUMEDOWN",
                short_name: "VOLUMEDOWN",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_VOLUMEDOWN`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_COMMA",
                short_name: "KP_COMMA",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_COMMA`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_EQUALSAS400",
                short_name: "KP_EQUALSAS400",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_EQUALSAS400`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_ALTERASE",
                short_name: "ALTERASE",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_ALTERASE`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_SYSREQ",
                short_name: "SYSREQ",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_SYSREQ`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_CANCEL",
                short_name: "CANCEL",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CANCEL`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_CLEAR",
                short_name: "CLEAR",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CLEAR`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_PRIOR",
                short_name: "PRIOR",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_PRIOR`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_RETURN2",
                short_name: "RETURN2",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_RETURN2`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_SEPARATOR",
                short_name: "SEPARATOR",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_SEPARATOR`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_OUT",
                short_name: "OUT",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_OUT`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_OPER",
                short_name: "OPER",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_OPER`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_CLEARAGAIN",
                short_name: "CLEARAGAIN",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CLEARAGAIN`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_CRSEL",
                short_name: "CRSEL",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CRSEL`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_EXSEL",
                short_name: "EXSEL",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_EXSEL`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_00",
                short_name: "KP_00",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_00`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_000",
                short_name: "KP_000",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_000`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_THOUSANDSSEPARATOR",
                short_name: "THOUSANDSSEPARATOR",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_THOUSANDSSEPARATOR`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_DECIMALSEPARATOR",
                short_name: "DECIMALSEPARATOR",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_DECIMALSEPARATOR`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_CURRENCYUNIT",
                short_name: "CURRENCYUNIT",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CURRENCYUNIT`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_CURRENCYSUBUNIT",
                short_name: "CURRENCYSUBUNIT",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CURRENCYSUBUNIT`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_LEFTPAREN",
                short_name: "KP_LEFTPAREN",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_LEFTPAREN`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_RIGHTPAREN",
                short_name: "KP_RIGHTPAREN",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_RIGHTPAREN`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_LEFTBRACE",
                short_name: "KP_LEFTBRACE",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_LEFTBRACE`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_RIGHTBRACE",
                short_name: "KP_RIGHTBRACE",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_RIGHTBRACE`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_TAB",
                short_name: "KP_TAB",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_TAB`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_BACKSPACE",
                short_name: "KP_BACKSPACE",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_BACKSPACE`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_A",
                short_name: "KP_A",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_A`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_B",
                short_name: "KP_B",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_B`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_C",
                short_name: "KP_C",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_C`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_D",
                short_name: "KP_D",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_D`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_E",
                short_name: "KP_E",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_E`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_F",
                short_name: "KP_F",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_F`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_XOR",
                short_name: "KP_XOR",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_XOR`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_POWER",
                short_name: "KP_POWER",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_POWER`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_PERCENT",
                short_name: "KP_PERCENT",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_PERCENT`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_LESS",
                short_name: "KP_LESS",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_LESS`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_GREATER",
                short_name: "KP_GREATER",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_GREATER`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_AMPERSAND",
                short_name: "KP_AMPERSAND",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_AMPERSAND`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_DBLAMPERSAND",
                short_name: "KP_DBLAMPERSAND",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_DBLAMPERSAND`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_VERTICALBAR",
                short_name: "KP_VERTICALBAR",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_VERTICALBAR`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_DBLVERTICALBAR",
                short_name: "KP_DBLVERTICALBAR",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_DBLVERTICALBAR`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_COLON",
                short_name: "KP_COLON",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_COLON`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_HASH",
                short_name: "KP_HASH",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_HASH`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_SPACE",
                short_name: "KP_SPACE",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_SPACE`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_AT",
                short_name: "KP_AT",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_AT`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_EXCLAM",
                short_name: "KP_EXCLAM",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_EXCLAM`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_MEMSTORE",
                short_name: "KP_MEMSTORE",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_MEMSTORE`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_MEMRECALL",
                short_name: "KP_MEMRECALL",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_MEMRECALL`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_MEMCLEAR",
                short_name: "KP_MEMCLEAR",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_MEMCLEAR`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_MEMADD",
                short_name: "KP_MEMADD",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_MEMADD`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_MEMSUBTRACT",
                short_name: "KP_MEMSUBTRACT",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_MEMSUBTRACT`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_MEMMULTIPLY",
                short_name: "KP_MEMMULTIPLY",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_MEMMULTIPLY`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_MEMDIVIDE",
                short_name: "KP_MEMDIVIDE",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_MEMDIVIDE`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_PLUSMINUS",
                short_name: "KP_PLUSMINUS",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_PLUSMINUS`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_CLEAR",
                short_name: "KP_CLEAR",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_CLEAR`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_CLEARENTRY",
                short_name: "KP_CLEARENTRY",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_CLEARENTRY`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_BINARY",
                short_name: "KP_BINARY",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_BINARY`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_OCTAL",
                short_name: "KP_OCTAL",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_OCTAL`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_DECIMAL",
                short_name: "KP_DECIMAL",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_DECIMAL`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_KP_HEXADECIMAL",
                short_name: "KP_HEXADECIMAL",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_KP_HEXADECIMAL`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_LCTRL",
                short_name: "LCTRL",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_LCTRL`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_LSHIFT",
                short_name: "LSHIFT",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_LSHIFT`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_LALT",
                short_name: "LALT",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_LALT`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_LGUI",
                short_name: "LGUI",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_LGUI`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_RCTRL",
                short_name: "RCTRL",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_RCTRL`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_RSHIFT",
                short_name: "RSHIFT",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_RSHIFT`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_RALT",
                short_name: "RALT",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_RALT`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_RGUI",
                short_name: "RGUI",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_RGUI`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_MODE",
                short_name: "MODE",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MODE`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_SLEEP",
                short_name: "SLEEP",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_SLEEP`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_WAKE",
                short_name: "WAKE",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_WAKE`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_CHANNEL_INCREMENT",
                short_name: "CHANNEL_INCREMENT",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CHANNEL_INCREMENT`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_CHANNEL_DECREMENT",
                short_name: "CHANNEL_DECREMENT",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CHANNEL_DECREMENT`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_MEDIA_PLAY",
                short_name: "MEDIA_PLAY",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_PLAY`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_MEDIA_PAUSE",
                short_name: "MEDIA_PAUSE",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_PAUSE`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_MEDIA_RECORD",
                short_name: "MEDIA_RECORD",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_RECORD`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_MEDIA_FAST_FORWARD",
                short_name: "MEDIA_FAST_FORWARD",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_FAST_FORWARD`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_MEDIA_REWIND",
                short_name: "MEDIA_REWIND",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_REWIND`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_MEDIA_NEXT_TRACK",
                short_name: "MEDIA_NEXT_TRACK",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_NEXT_TRACK`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_MEDIA_PREVIOUS_TRACK",
                short_name: "MEDIA_PREVIOUS_TRACK",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_PREVIOUS_TRACK`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_MEDIA_STOP",
                short_name: "MEDIA_STOP",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_STOP`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_MEDIA_EJECT",
                short_name: "MEDIA_EJECT",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_EJECT`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_MEDIA_PLAY_PAUSE",
                short_name: "MEDIA_PLAY_PAUSE",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_PLAY_PAUSE`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_MEDIA_SELECT",
                short_name: "MEDIA_SELECT",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_MEDIA_SELECT`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_AC_NEW",
                short_name: "AC_NEW",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_NEW`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_AC_OPEN",
                short_name: "AC_OPEN",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_OPEN`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_AC_CLOSE",
                short_name: "AC_CLOSE",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_CLOSE`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_AC_EXIT",
                short_name: "AC_EXIT",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_EXIT`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_AC_SAVE",
                short_name: "AC_SAVE",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_SAVE`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_AC_PRINT",
                short_name: "AC_PRINT",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_PRINT`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_AC_PROPERTIES",
                short_name: "AC_PROPERTIES",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_PROPERTIES`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_AC_SEARCH",
                short_name: "AC_SEARCH",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_SEARCH`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_AC_HOME",
                short_name: "AC_HOME",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_HOME`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_AC_BACK",
                short_name: "AC_BACK",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_BACK`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_AC_FORWARD",
                short_name: "AC_FORWARD",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_FORWARD`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_AC_STOP",
                short_name: "AC_STOP",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_STOP`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_AC_REFRESH",
                short_name: "AC_REFRESH",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_REFRESH`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_AC_BOOKMARKS",
                short_name: "AC_BOOKMARKS",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_AC_BOOKMARKS`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_SOFTLEFT",
                short_name: "SOFTLEFT",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_SOFTLEFT`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_SOFTRIGHT",
                short_name: "SOFTRIGHT",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_SOFTRIGHT`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_CALL",
                short_name: "CALL",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_CALL`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_ENDCALL",
                short_name: "ENDCALL",
                doc: Some("SDL_SCANCODE_TO_KEYCODE([`SDL_SCANCODE_ENDCALL`])\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_LEFT_TAB",
                short_name: "LEFT_TAB",
                doc: Some("Extended key Left Tab\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_LEVEL5_SHIFT",
                short_name: "LEVEL5_SHIFT",
                doc: Some("Extended key Level 5 Shift\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_MULTI_KEY_COMPOSE",
                short_name: "MULTI_KEY_COMPOSE",
                doc: Some("Extended key Multi-key Compose\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_LMETA",
                short_name: "LMETA",
                doc: Some("Extended key Left Meta\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_RMETA",
                short_name: "RMETA",
                doc: Some("Extended key Right Meta\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_LHYPER",
                short_name: "LHYPER",
                doc: Some("Extended key Left Hyper\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDLK_RHYPER",
                short_name: "RHYPER",
                doc: Some("Extended key Right Hyper\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "keycode",
        kind: GroupKind::Flags,
        name: "SDL_Keymod",
        short_name: "Keymod",
        doc: Some("Valid key modifiers (possibly OR'd together).\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_KMOD_NONE",
                short_name: "NONE",
                doc: Some("no modifier is applicable.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_KMOD_LSHIFT",
                short_name: "LSHIFT",
                doc: Some("the left Shift key is down.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_KMOD_RSHIFT",
                short_name: "RSHIFT",
                doc: Some("the right Shift key is down.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_KMOD_LEVEL5",
                short_name: "LEVEL5",
                doc: Some("the Level 5 Shift key is down.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_KMOD_LCTRL",
                short_name: "LCTRL",
                doc: Some("the left Ctrl (Control) key is down.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_KMOD_RCTRL",
                short_name: "RCTRL",
                doc: Some("the right Ctrl (Control) key is down.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_KMOD_LALT",
                short_name: "LALT",
                doc: Some("the left Alt key is down.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_KMOD_RALT",
                short_name: "RALT",
                doc: Some("the right Alt key is down.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_KMOD_LGUI",
                short_name: "LGUI",
                doc: Some("the left GUI key (often the Windows key) is down.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_KMOD_RGUI",
                short_name: "RGUI",
                doc: Some("the right GUI key (often the Windows key) is down.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_KMOD_NUM",
                short_name: "NUM",
                doc: Some("the Num Lock key (may be located on an extended keypad) is down.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_KMOD_CAPS",
                short_name: "CAPS",
                doc: Some("the Caps Lock key is down.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_KMOD_MODE",
                short_name: "MODE",
                doc: Some("the !AltGr key is down.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_KMOD_SCROLL",
                short_name: "SCROLL",
                doc: Some("the Scroll Lock key is down.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_KMOD_CTRL",
                short_name: "CTRL",
                doc: Some("Any Ctrl key is down.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_KMOD_SHIFT",
                short_name: "SHIFT",
                doc: Some("Any Shift key is down.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_KMOD_ALT",
                short_name: "ALT",
                doc: Some("Any Alt key is down.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_KMOD_GUI",
                short_name: "GUI",
                doc: Some("Any GUI key is down.\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "log",
        kind: GroupKind::Enum,
        name: "SDL_LogCategory",
        short_name: "LogCategory",
        doc: Some("The predefined log categories\n\nBy default the application and gpu categories are enabled at the INFO\nlevel, the assert category is enabled at the WARN level, test is enabled at\nthe VERBOSE level and all other categories are enabled at the ERROR level.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_LOG_CATEGORY_APPLICATION",
                short_name: "APPLICATION",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_CATEGORY_ERROR",
                short_name: "ERROR",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_CATEGORY_ASSERT",
                short_name: "ASSERT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_CATEGORY_SYSTEM",
                short_name: "SYSTEM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_CATEGORY_AUDIO",
                short_name: "AUDIO",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_CATEGORY_VIDEO",
                short_name: "VIDEO",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_CATEGORY_RENDER",
                short_name: "RENDER",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_CATEGORY_INPUT",
                short_name: "INPUT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_CATEGORY_TEST",
                short_name: "TEST",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_CATEGORY_GPU",
                short_name: "GPU",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_CATEGORY_RESERVED2",
                short_name: "RESERVED2",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_CATEGORY_RESERVED3",
                short_name: "RESERVED3",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_CATEGORY_RESERVED4",
                short_name: "RESERVED4",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_CATEGORY_RESERVED5",
                short_name: "RESERVED5",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_CATEGORY_RESERVED6",
                short_name: "RESERVED6",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_CATEGORY_RESERVED7",
                short_name: "RESERVED7",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_CATEGORY_RESERVED8",
                short_name: "RESERVED8",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_CATEGORY_RESERVED9",
                short_name: "RESERVED9",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_CATEGORY_RESERVED10",
                short_name: "RESERVED10",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_CATEGORY_CUSTOM",
                short_name: "CUSTOM",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "log",
        kind: GroupKind::Enum,
        name: "SDL_LogPriority",
        short_name: "LogPriority",
        doc: Some("The predefined log priorities\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_LOG_PRIORITY_INVALID",
                short_name: "INVALID",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_PRIORITY_TRACE",
                short_name: "TRACE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_PRIORITY_VERBOSE",
                short_name: "VERBOSE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_PRIORITY_DEBUG",
                short_name: "DEBUG",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_PRIORITY_INFO",
                short_name: "INFO",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_PRIORITY_WARN",
                short_name: "WARN",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_PRIORITY_ERROR",
                short_name: "ERROR",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_PRIORITY_CRITICAL",
                short_name: "CRITICAL",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOG_PRIORITY_COUNT",
                short_name: "COUNT",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "messagebox",
        kind: GroupKind::Flags,
        name: "SDL_MessageBoxFlags",
        short_name: "MessageBoxFlags",
        doc: Some("Message box flags.\n\nIf supported will display warning icon, etc.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_MESSAGEBOX_ERROR",
                short_name: "ERROR",
                doc: Some("error dialog\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_MESSAGEBOX_WARNING",
                short_name: "WARNING",
                doc: Some("warning dialog\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_MESSAGEBOX_INFORMATION",
                short_name: "INFORMATION",
                doc: Some("informational dialog\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_MESSAGEBOX_BUTTONS_LEFT_TO_RIGHT",
                short_name: "BUTTONS_LEFT_TO_RIGHT",
                doc: Some("buttons placed left to right\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_MESSAGEBOX_BUTTONS_RIGHT_TO_LEFT",
                short_name: "BUTTONS_RIGHT_TO_LEFT",
                doc: Some("buttons placed right to left\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "messagebox",
        kind: GroupKind::Flags,
        name: "SDL_MessageBoxButtonFlags",
        short_name: "MessageBoxButtonFlags",
        doc: Some("[`SDL_MessageBoxButtonData`] flags.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT",
                short_name: "RETURNKEY_DEFAULT",
                doc: Some("Marks the default button when return is hit\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT",
                short_name: "ESCAPEKEY_DEFAULT",
                doc: Some("Marks the default button when escape is hit\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "messagebox",
        kind: GroupKind::Enum,
        name: "SDL_MessageBoxColorType",
        short_name: "MessageBoxColorType",
        doc: Some("An enumeration of indices inside the colors array of\n[`SDL_MessageBoxColorScheme`].\n"),
        available_since: None,
        values: &[
            GroupValue {
                name: "SDL_MESSAGEBOX_COLOR_BACKGROUND",
                short_name: "BACKGROUND",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_MESSAGEBOX_COLOR_TEXT",
                short_name: "TEXT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_MESSAGEBOX_COLOR_BUTTON_BORDER",
                short_name: "BUTTON_BORDER",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND",
                short_name: "BUTTON_BACKGROUND",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED",
                short_name: "BUTTON_SELECTED",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_MESSAGEBOX_COLOR_COUNT",
                short_name: "COUNT",
                doc: Some("Size of the colors array of [`SDL_MessageBoxColorScheme`].\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "mouse",
        kind: GroupKind::Id,
        name: "SDL_MouseID",
        short_name: "MouseID",
        doc: Some("This is a unique ID for a mouse for the time it is connected to the system,\nand is never reused for the lifetime of the application.\n\nIf the mouse is disconnected and reconnected, it will get a new ID.\n\nThe value 0 is an invalid ID.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
        ],
    },
    Group {
        module: "mouse",
        kind: GroupKind::Enum,
        name: "SDL_SystemCursor",
        short_name: "SystemCursor",
        doc: Some("Cursor types for [`SDL_CreateSystemCursor()`].\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_SYSTEM_CURSOR_DEFAULT",
                short_name: "DEFAULT",
                doc: Some("Default cursor. Usually an arrow.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SYSTEM_CURSOR_TEXT",
                short_name: "TEXT",
                doc: Some("Text selection. Usually an I-beam.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SYSTEM_CURSOR_WAIT",
                short_name: "WAIT",
                doc: Some("Wait. Usually an hourglass or watch or spinning ball.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SYSTEM_CURSOR_CROSSHAIR",
                short_name: "CROSSHAIR",
                doc: Some("Crosshair.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SYSTEM_CURSOR_PROGRESS",
                short_name: "PROGRESS",
                doc: Some("Program is busy but still interactive. Usually it's WAIT with an arrow.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SYSTEM_CURSOR_NWSE_RESIZE",
                short_name: "NWSE_RESIZE",
                doc: Some("Double arrow pointing northwest and southeast.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SYSTEM_CURSOR_NESW_RESIZE",
                short_name: "NESW_RESIZE",
                doc: Some("Double arrow pointing northeast and southwest.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SYSTEM_CURSOR_EW_RESIZE",
                short_name: "EW_RESIZE",
                doc: Some("Double arrow pointing west and east.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SYSTEM_CURSOR_NS_RESIZE",
                short_name: "NS_RESIZE",
                doc: Some("Double arrow pointing north and south.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SYSTEM_CURSOR_MOVE",
                short_name: "MOVE",
                doc: Some("Four pointed arrow pointing north, south, east, and west.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SYSTEM_CURSOR_NOT_ALLOWED",
                short_name: "NOT_ALLOWED",
                doc: Some("Not permitted. Usually a slashed circle or crossbones.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SYSTEM_CURSOR_POINTER",
                short_name: "POINTER",
                doc: Some("Pointer that indicates a link. Usually a pointing hand.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SYSTEM_CURSOR_NW_RESIZE",
                short_name: "NW_RESIZE",
                doc: Some("Window resize top-left. This may be a single arrow or a double arrow like NWSE_RESIZE.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SYSTEM_CURSOR_N_RESIZE",
                short_name: "N_RESIZE",
                doc: Some("Window resize top. May be NS_RESIZE.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SYSTEM_CURSOR_NE_RESIZE",
                short_name: "NE_RESIZE",
                doc: Some("Window resize top-right. May be NESW_RESIZE.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SYSTEM_CURSOR_E_RESIZE",
                short_name: "E_RESIZE",
                doc: Some("Window resize right. May be EW_RESIZE.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SYSTEM_CURSOR_SE_RESIZE",
                short_name: "SE_RESIZE",
                doc: Some("Window resize bottom-right. May be NWSE_RESIZE.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SYSTEM_CURSOR_S_RESIZE",
                short_name: "S_RESIZE",
                doc: Some("Window resize bottom. May be NS_RESIZE.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SYSTEM_CURSOR_SW_RESIZE",
                short_name: "SW_RESIZE",
                doc: Some("Window resize bottom-left. May be NESW_RESIZE.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SYSTEM_CURSOR_W_RESIZE",
                short_name: "W_RESIZE",
                doc: Some("Window resize left. May be EW_RESIZE.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SYSTEM_CURSOR_COUNT",
                short_name: "COUNT",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "mouse",
        kind: GroupKind::Enum,
        name: "SDL_MouseWheelDirection",
        short_name: "MouseWheelDirection",
        doc: Some("Scroll direction types for the Scroll event\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_MOUSEWHEEL_NORMAL",
                short_name: "NORMAL",
                doc: Some("The scroll direction is normal\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_MOUSEWHEEL_FLIPPED",
                short_name: "FLIPPED",
                doc: Some("The scroll direction is flipped / natural\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "mouse",
        kind: GroupKind::Flags,
        name: "SDL_MouseButtonFlags",
        short_name: "MouseButtonFlags",
        doc: Some("A bitmask of pressed mouse buttons, as reported by [`SDL_GetMouseState`], etc.\n\n- Button 1: Left mouse button\n- Button 2: Middle mouse button\n- Button 3: Right mouse button\n- Button 4: Side mouse button 1\n- Button 5: Side mouse button 2\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n\n## See also\n- [`SDL_GetMouseState`]\n- [`SDL_GetGlobalMouseState`]\n- [`SDL_GetRelativeMouseState`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_BUTTON_LMASK",
                short_name: "LMASK",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_BUTTON_MMASK",
                short_name: "MMASK",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_BUTTON_RMASK",
                short_name: "RMASK",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_BUTTON_X1MASK",
                short_name: "X1MASK",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_BUTTON_X2MASK",
                short_name: "X2MASK",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "mutex",
        kind: GroupKind::Enum,
        name: "SDL_InitStatus",
        short_name: "InitStatus",
        doc: Some("The current status of an [`SDL_InitState`] structure.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_INIT_STATUS_UNINITIALIZED",
                short_name: "UNINITIALIZED",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_INIT_STATUS_INITIALIZING",
                short_name: "INITIALIZING",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_INIT_STATUS_INITIALIZED",
                short_name: "INITIALIZED",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_INIT_STATUS_UNINITIALIZING",
                short_name: "UNINITIALIZING",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "pen",
        kind: GroupKind::Id,
        name: "SDL_PenID",
        short_name: "PenID",
        doc: Some("SDL pen instance IDs.\n\nZero is used to signify an invalid/null device.\n\nThese show up in pen events when SDL sees input from them. They remain\nconsistent as long as SDL can recognize a tool to be the same pen; but if a\npen physically leaves the area and returns, it might get a new ID.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
        ],
    },
    Group {
        module: "pen",
        kind: GroupKind::Flags,
        name: "SDL_PenInputFlags",
        short_name: "PenInputFlags",
        doc: Some("Pen input flags, as reported by various pen events' `pen_state` field.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_PEN_INPUT_DOWN",
                short_name: "DOWN",
                doc: Some("pen is pressed down\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PEN_INPUT_BUTTON_1",
                short_name: "BUTTON_1",
                doc: Some("button 1 is pressed\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PEN_INPUT_BUTTON_2",
                short_name: "BUTTON_2",
                doc: Some("button 2 is pressed\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PEN_INPUT_BUTTON_3",
                short_name: "BUTTON_3",
                doc: Some("button 3 is pressed\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PEN_INPUT_BUTTON_4",
                short_name: "BUTTON_4",
                doc: Some("button 4 is pressed\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PEN_INPUT_BUTTON_5",
                short_name: "BUTTON_5",
                doc: Some("button 5 is pressed\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PEN_INPUT_ERASER_TIP",
                short_name: "ERASER_TIP",
                doc: Some("eraser tip is used\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "pen",
        kind: GroupKind::Enum,
        name: "SDL_PenAxis",
        short_name: "PenAxis",
        doc: Some("Pen axis indices.\n\nThese are the valid values for the `axis` field in [`SDL_PenAxisEvent`]. All\naxes are either normalised to 0..1 or report a (positive or negative) angle\nin degrees, with 0.0 representing the centre. Not all pens/backends support\nall axes: unsupported axes are always zero.\n\nTo convert angles for tilt and rotation into vector representation, use\n[`SDL_sinf`] on the XTILT, YTILT, or ROTATION component, for example:\n\n`SDL_sinf(xtilt * SDL_PI_F / 180.0)`.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_PEN_AXIS_PRESSURE",
                short_name: "PRESSURE",
                doc: Some("Pen pressure.  Unidirectional: 0 to 1.0\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PEN_AXIS_XTILT",
                short_name: "XTILT",
                doc: Some("Pen horizontal tilt angle.  Bidirectional: -90.0 to 90.0 (left-to-right).\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PEN_AXIS_YTILT",
                short_name: "YTILT",
                doc: Some("Pen vertical tilt angle.  Bidirectional: -90.0 to 90.0 (top-to-down).\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PEN_AXIS_DISTANCE",
                short_name: "DISTANCE",
                doc: Some("Pen distance to drawing surface.  Unidirectional: 0.0 to 1.0\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PEN_AXIS_ROTATION",
                short_name: "ROTATION",
                doc: Some("Pen barrel rotation.  Bidirectional: -180 to 179.9 (clockwise, 0 is facing up, -180.0 is facing down).\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PEN_AXIS_SLIDER",
                short_name: "SLIDER",
                doc: Some("Pen finger wheel or slider (e.g., Airbrush Pen).  Unidirectional: 0 to 1.0\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PEN_AXIS_TANGENTIAL_PRESSURE",
                short_name: "TANGENTIAL_PRESSURE",
                doc: Some("Pressure from squeezing the pen (\"barrel pressure\").\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PEN_AXIS_COUNT",
                short_name: "COUNT",
                doc: Some("Total known pen axis types in this version of SDL. This number may grow in future releases!\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "pixels",
        kind: GroupKind::Enum,
        name: "SDL_PixelType",
        short_name: "PixelType",
        doc: Some("Pixel type.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_PIXELTYPE_UNKNOWN",
                short_name: "UNKNOWN",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELTYPE_INDEX1",
                short_name: "INDEX1",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELTYPE_INDEX4",
                short_name: "INDEX4",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELTYPE_INDEX8",
                short_name: "INDEX8",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELTYPE_PACKED8",
                short_name: "PACKED8",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELTYPE_PACKED16",
                short_name: "PACKED16",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELTYPE_PACKED32",
                short_name: "PACKED32",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELTYPE_ARRAYU8",
                short_name: "ARRAYU8",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELTYPE_ARRAYU16",
                short_name: "ARRAYU16",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELTYPE_ARRAYU32",
                short_name: "ARRAYU32",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELTYPE_ARRAYF16",
                short_name: "ARRAYF16",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELTYPE_ARRAYF32",
                short_name: "ARRAYF32",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELTYPE_INDEX2",
                short_name: "INDEX2",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "pixels",
        kind: GroupKind::Enum,
        name: "SDL_BitmapOrder",
        short_name: "BitmapOrder",
        doc: Some("Bitmap pixel order, high bit -> low bit.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_BITMAPORDER_NONE",
                short_name: "NONE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_BITMAPORDER_4321",
                short_name: "_4321",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_BITMAPORDER_1234",
                short_name: "_1234",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "pixels",
        kind: GroupKind::Enum,
        name: "SDL_PackedOrder",
        short_name: "PackedOrder",
        doc: Some("Packed component order, high bit -> low bit.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_PACKEDORDER_NONE",
                short_name: "NONE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PACKEDORDER_XRGB",
                short_name: "XRGB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PACKEDORDER_RGBX",
                short_name: "RGBX",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PACKEDORDER_ARGB",
                short_name: "ARGB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PACKEDORDER_RGBA",
                short_name: "RGBA",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PACKEDORDER_XBGR",
                short_name: "XBGR",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PACKEDORDER_BGRX",
                short_name: "BGRX",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PACKEDORDER_ABGR",
                short_name: "ABGR",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PACKEDORDER_BGRA",
                short_name: "BGRA",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "pixels",
        kind: GroupKind::Enum,
        name: "SDL_ArrayOrder",
        short_name: "ArrayOrder",
        doc: Some("Array component order, low byte -> high byte.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_ARRAYORDER_NONE",
                short_name: "NONE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_ARRAYORDER_RGB",
                short_name: "RGB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_ARRAYORDER_RGBA",
                short_name: "RGBA",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_ARRAYORDER_ARGB",
                short_name: "ARGB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_ARRAYORDER_BGR",
                short_name: "BGR",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_ARRAYORDER_BGRA",
                short_name: "BGRA",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_ARRAYORDER_ABGR",
                short_name: "ABGR",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "pixels",
        kind: GroupKind::Enum,
        name: "SDL_PackedLayout",
        short_name: "PackedLayout",
        doc: Some("Packed component layout.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_PACKEDLAYOUT_NONE",
                short_name: "NONE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PACKEDLAYOUT_332",
                short_name: "_332",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PACKEDLAYOUT_4444",
                short_name: "_4444",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PACKEDLAYOUT_1555",
                short_name: "_1555",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PACKEDLAYOUT_5551",
                short_name: "_5551",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PACKEDLAYOUT_565",
                short_name: "_565",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PACKEDLAYOUT_8888",
                short_name: "_8888",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PACKEDLAYOUT_2101010",
                short_name: "_2101010",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PACKEDLAYOUT_1010102",
                short_name: "_1010102",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "pixels",
        kind: GroupKind::Enum,
        name: "SDL_PixelFormat",
        short_name: "PixelFormat",
        doc: Some("Pixel format.\n\nSDL's pixel formats have the following naming convention:\n\n- Names with a list of components and a single bit count, such as RGB24 and\nABGR32, define a platform-independent encoding into bytes in the order\nspecified. For example, in RGB24 data, each pixel is encoded in 3 bytes\n(red, green, blue) in that order, and in ABGR32 data, each pixel is\nencoded in 4 bytes alpha, blue, green, red) in that order. Use these\nnames if the property of a format that is important to you is the order\nof the bytes in memory or on disk.\n- Names with a bit count per component, such as ARGB8888 and XRGB1555, are\n\"packed\" into an appropriately-sized integer in the platform's native\nendianness. For example, ARGB8888 is a sequence of 32-bit integers; in\neach integer, the most significant bits are alpha, and the least\nsignificant bits are blue. On a little-endian CPU such as x86, the least\nsignificant bits of each integer are arranged first in memory, but on a\nbig-endian CPU such as s390x, the most significant bits are arranged\nfirst. Use these names if the property of a format that is important to\nyou is the meaning of each bit position within a native-endianness\ninteger.\n- In indexed formats such as INDEX4LSB, each pixel is represented by\nencoding an index into the palette into the indicated number of bits,\nwith multiple pixels packed into each byte if appropriate. In LSB\nformats, the first (leftmost) pixel is stored in the least-significant\nbits of the byte; in MSB formats, it's stored in the most-significant\nbits. INDEX8 does not need LSB/MSB variants, because each pixel exactly\nfills one byte.\n\nThe 32-bit byte-array encodings such as RGBA32 are aliases for the\nappropriate 8888 encoding for the current platform. For example, RGBA32 is\nan alias for ABGR8888 on little-endian CPUs like x86, or an alias for\nRGBA8888 on big-endian CPUs.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_PIXELFORMAT_UNKNOWN",
                short_name: "UNKNOWN",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_INDEX1LSB",
                short_name: "INDEX1LSB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_INDEX1MSB",
                short_name: "INDEX1MSB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_INDEX2LSB",
                short_name: "INDEX2LSB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_INDEX2MSB",
                short_name: "INDEX2MSB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_INDEX4LSB",
                short_name: "INDEX4LSB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_INDEX4MSB",
                short_name: "INDEX4MSB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_INDEX8",
                short_name: "INDEX8",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_RGB332",
                short_name: "RGB332",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_XRGB4444",
                short_name: "XRGB4444",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_XBGR4444",
                short_name: "XBGR4444",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_XRGB1555",
                short_name: "XRGB1555",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_XBGR1555",
                short_name: "XBGR1555",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_ARGB4444",
                short_name: "ARGB4444",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_RGBA4444",
                short_name: "RGBA4444",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_ABGR4444",
                short_name: "ABGR4444",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_BGRA4444",
                short_name: "BGRA4444",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_ARGB1555",
                short_name: "ARGB1555",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_RGBA5551",
                short_name: "RGBA5551",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_ABGR1555",
                short_name: "ABGR1555",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_BGRA5551",
                short_name: "BGRA5551",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_RGB565",
                short_name: "RGB565",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_BGR565",
                short_name: "BGR565",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_RGB24",
                short_name: "RGB24",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_BGR24",
                short_name: "BGR24",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_XRGB8888",
                short_name: "XRGB8888",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_RGBX8888",
                short_name: "RGBX8888",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_XBGR8888",
                short_name: "XBGR8888",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_BGRX8888",
                short_name: "BGRX8888",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_ARGB8888",
                short_name: "ARGB8888",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_RGBA8888",
                short_name: "RGBA8888",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_ABGR8888",
                short_name: "ABGR8888",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_BGRA8888",
                short_name: "BGRA8888",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_XRGB2101010",
                short_name: "XRGB2101010",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_XBGR2101010",
                short_name: "XBGR2101010",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_ARGB2101010",
                short_name: "ARGB2101010",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_ABGR2101010",
                short_name: "ABGR2101010",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_RGB48",
                short_name: "RGB48",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_BGR48",
                short_name: "BGR48",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_RGBA64",
                short_name: "RGBA64",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_ARGB64",
                short_name: "ARGB64",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_BGRA64",
                short_name: "BGRA64",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_ABGR64",
                short_name: "ABGR64",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_RGB48_FLOAT",
                short_name: "RGB48_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_BGR48_FLOAT",
                short_name: "BGR48_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_RGBA64_FLOAT",
                short_name: "RGBA64_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_ARGB64_FLOAT",
                short_name: "ARGB64_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_BGRA64_FLOAT",
                short_name: "BGRA64_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_ABGR64_FLOAT",
                short_name: "ABGR64_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_RGB96_FLOAT",
                short_name: "RGB96_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_BGR96_FLOAT",
                short_name: "BGR96_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_RGBA128_FLOAT",
                short_name: "RGBA128_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_ARGB128_FLOAT",
                short_name: "ARGB128_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_BGRA128_FLOAT",
                short_name: "BGRA128_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_ABGR128_FLOAT",
                short_name: "ABGR128_FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_YV12",
                short_name: "YV12",
                doc: Some("Planar mode: Y + V + U  (3 planes)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_IYUV",
                short_name: "IYUV",
                doc: Some("Planar mode: Y + U + V  (3 planes)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_YUY2",
                short_name: "YUY2",
                doc: Some("Packed mode: Y0+U0+Y1+V0 (1 plane)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_UYVY",
                short_name: "UYVY",
                doc: Some("Packed mode: U0+Y0+V0+Y1 (1 plane)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_YVYU",
                short_name: "YVYU",
                doc: Some("Packed mode: Y0+V0+Y1+U0 (1 plane)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_NV12",
                short_name: "NV12",
                doc: Some("Planar mode: Y + U/V interleaved  (2 planes)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_NV21",
                short_name: "NV21",
                doc: Some("Planar mode: Y + V/U interleaved  (2 planes)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_P010",
                short_name: "P010",
                doc: Some("Planar mode: Y + U/V interleaved  (2 planes)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_EXTERNAL_OES",
                short_name: "EXTERNAL_OES",
                doc: Some("Android video texture format\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_MJPG",
                short_name: "MJPG",
                doc: Some("Motion JPEG\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_RGBA32",
                short_name: "RGBA32",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_ARGB32",
                short_name: "ARGB32",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_BGRA32",
                short_name: "BGRA32",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_ABGR32",
                short_name: "ABGR32",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_RGBX32",
                short_name: "RGBX32",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_XRGB32",
                short_name: "XRGB32",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_BGRX32",
                short_name: "BGRX32",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_XBGR32",
                short_name: "XBGR32",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_RGBA32",
                short_name: "RGBA32",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_ARGB32",
                short_name: "ARGB32",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_BGRA32",
                short_name: "BGRA32",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_ABGR32",
                short_name: "ABGR32",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_RGBX32",
                short_name: "RGBX32",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_XRGB32",
                short_name: "XRGB32",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_BGRX32",
                short_name: "BGRX32",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PIXELFORMAT_XBGR32",
                short_name: "XBGR32",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "pixels",
        kind: GroupKind::Enum,
        name: "SDL_ColorType",
        short_name: "ColorType",
        doc: Some("Colorspace color type.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_COLOR_TYPE_UNKNOWN",
                short_name: "UNKNOWN",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLOR_TYPE_RGB",
                short_name: "RGB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLOR_TYPE_YCBCR",
                short_name: "YCBCR",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "pixels",
        kind: GroupKind::Enum,
        name: "SDL_ColorRange",
        short_name: "ColorRange",
        doc: Some("Colorspace color range, as described by\n<https://www.itu.int/rec/R-REC-BT.2100-2-201807-I/en>\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_COLOR_RANGE_UNKNOWN",
                short_name: "UNKNOWN",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLOR_RANGE_LIMITED",
                short_name: "LIMITED",
                doc: Some("Narrow range, e.g. 16-235 for 8-bit RGB and luma, and 16-240 for 8-bit chroma\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLOR_RANGE_FULL",
                short_name: "FULL",
                doc: Some("Full range, e.g. 0-255 for 8-bit RGB and luma, and 1-255 for 8-bit chroma\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "pixels",
        kind: GroupKind::Enum,
        name: "SDL_ColorPrimaries",
        short_name: "ColorPrimaries",
        doc: Some("Colorspace color primaries, as described by\n<https://www.itu.int/rec/T-REC-H.273-201612-S/en>\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_COLOR_PRIMARIES_UNKNOWN",
                short_name: "UNKNOWN",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLOR_PRIMARIES_BT709",
                short_name: "BT709",
                doc: Some("ITU-R BT.709-6\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLOR_PRIMARIES_UNSPECIFIED",
                short_name: "UNSPECIFIED",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLOR_PRIMARIES_BT470M",
                short_name: "BT470M",
                doc: Some("ITU-R BT.470-6 System M\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLOR_PRIMARIES_BT470BG",
                short_name: "BT470BG",
                doc: Some("ITU-R BT.470-6 System B, G / ITU-R BT.601-7 625\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLOR_PRIMARIES_BT601",
                short_name: "BT601",
                doc: Some("ITU-R BT.601-7 525, SMPTE 170M\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLOR_PRIMARIES_SMPTE240",
                short_name: "SMPTE240",
                doc: Some("SMPTE 240M, functionally the same as [`SDL_COLOR_PRIMARIES_BT601`]\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLOR_PRIMARIES_GENERIC_FILM",
                short_name: "GENERIC_FILM",
                doc: Some("Generic film (color filters using Illuminant C)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLOR_PRIMARIES_BT2020",
                short_name: "BT2020",
                doc: Some("ITU-R BT.2020-2 / ITU-R BT.2100-0\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLOR_PRIMARIES_XYZ",
                short_name: "XYZ",
                doc: Some("SMPTE ST 428-1\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLOR_PRIMARIES_SMPTE431",
                short_name: "SMPTE431",
                doc: Some("SMPTE RP 431-2\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLOR_PRIMARIES_SMPTE432",
                short_name: "SMPTE432",
                doc: Some("SMPTE EG 432-1 / DCI P3\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLOR_PRIMARIES_EBU3213",
                short_name: "EBU3213",
                doc: Some("EBU Tech. 3213-E\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLOR_PRIMARIES_CUSTOM",
                short_name: "CUSTOM",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "pixels",
        kind: GroupKind::Enum,
        name: "SDL_TransferCharacteristics",
        short_name: "TransferCharacteristics",
        doc: Some("Colorspace transfer characteristics.\n\nThese are as described by <https://www.itu.int/rec/T-REC-H.273-201612-S/en>\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_TRANSFER_CHARACTERISTICS_UNKNOWN",
                short_name: "UNKNOWN",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_TRANSFER_CHARACTERISTICS_BT709",
                short_name: "BT709",
                doc: Some("Rec. ITU-R BT.709-6 / ITU-R BT1361\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TRANSFER_CHARACTERISTICS_UNSPECIFIED",
                short_name: "UNSPECIFIED",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_TRANSFER_CHARACTERISTICS_GAMMA22",
                short_name: "GAMMA22",
                doc: Some("ITU-R BT.470-6 System M / ITU-R BT1700 625 PAL & SECAM\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TRANSFER_CHARACTERISTICS_GAMMA28",
                short_name: "GAMMA28",
                doc: Some("ITU-R BT.470-6 System B, G\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TRANSFER_CHARACTERISTICS_BT601",
                short_name: "BT601",
                doc: Some("SMPTE ST 170M / ITU-R BT.601-7 525 or 625\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TRANSFER_CHARACTERISTICS_SMPTE240",
                short_name: "SMPTE240",
                doc: Some("SMPTE ST 240M\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TRANSFER_CHARACTERISTICS_LINEAR",
                short_name: "LINEAR",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_TRANSFER_CHARACTERISTICS_LOG100",
                short_name: "LOG100",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_TRANSFER_CHARACTERISTICS_LOG100_SQRT10",
                short_name: "LOG100_SQRT10",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_TRANSFER_CHARACTERISTICS_IEC61966",
                short_name: "IEC61966",
                doc: Some("IEC 61966-2-4\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TRANSFER_CHARACTERISTICS_BT1361",
                short_name: "BT1361",
                doc: Some("ITU-R BT1361 Extended Colour Gamut\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TRANSFER_CHARACTERISTICS_SRGB",
                short_name: "SRGB",
                doc: Some("IEC 61966-2-1 (sRGB or sYCC)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TRANSFER_CHARACTERISTICS_BT2020_10BIT",
                short_name: "BT2020_10BIT",
                doc: Some("ITU-R BT2020 for 10-bit system\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TRANSFER_CHARACTERISTICS_BT2020_12BIT",
                short_name: "BT2020_12BIT",
                doc: Some("ITU-R BT2020 for 12-bit system\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TRANSFER_CHARACTERISTICS_PQ",
                short_name: "PQ",
                doc: Some("SMPTE ST 2084 for 10-, 12-, 14- and 16-bit systems\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TRANSFER_CHARACTERISTICS_SMPTE428",
                short_name: "SMPTE428",
                doc: Some("SMPTE ST 428-1\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TRANSFER_CHARACTERISTICS_HLG",
                short_name: "HLG",
                doc: Some("ARIB STD-B67, known as \"hybrid log-gamma\" (HLG)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TRANSFER_CHARACTERISTICS_CUSTOM",
                short_name: "CUSTOM",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "pixels",
        kind: GroupKind::Enum,
        name: "SDL_MatrixCoefficients",
        short_name: "MatrixCoefficients",
        doc: Some("Colorspace matrix coefficients.\n\nThese are as described by <https://www.itu.int/rec/T-REC-H.273-201612-S/en>\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_MATRIX_COEFFICIENTS_IDENTITY",
                short_name: "IDENTITY",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_MATRIX_COEFFICIENTS_BT709",
                short_name: "BT709",
                doc: Some("ITU-R BT.709-6\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_MATRIX_COEFFICIENTS_UNSPECIFIED",
                short_name: "UNSPECIFIED",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_MATRIX_COEFFICIENTS_FCC",
                short_name: "FCC",
                doc: Some("US FCC Title 47\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_MATRIX_COEFFICIENTS_BT470BG",
                short_name: "BT470BG",
                doc: Some("ITU-R BT.470-6 System B, G / ITU-R BT.601-7 625, functionally the same as [`SDL_MATRIX_COEFFICIENTS_BT601`]\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_MATRIX_COEFFICIENTS_BT601",
                short_name: "BT601",
                doc: Some("ITU-R BT.601-7 525\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_MATRIX_COEFFICIENTS_SMPTE240",
                short_name: "SMPTE240",
                doc: Some("SMPTE 240M\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_MATRIX_COEFFICIENTS_YCGCO",
                short_name: "YCGCO",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_MATRIX_COEFFICIENTS_BT2020_NCL",
                short_name: "BT2020_NCL",
                doc: Some("ITU-R BT.2020-2 non-constant luminance\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_MATRIX_COEFFICIENTS_BT2020_CL",
                short_name: "BT2020_CL",
                doc: Some("ITU-R BT.2020-2 constant luminance\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_MATRIX_COEFFICIENTS_SMPTE2085",
                short_name: "SMPTE2085",
                doc: Some("SMPTE ST 2085\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_MATRIX_COEFFICIENTS_CHROMA_DERIVED_NCL",
                short_name: "CHROMA_DERIVED_NCL",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_MATRIX_COEFFICIENTS_CHROMA_DERIVED_CL",
                short_name: "CHROMA_DERIVED_CL",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_MATRIX_COEFFICIENTS_ICTCP",
                short_name: "ICTCP",
                doc: Some("ITU-R BT.2100-0 ICTCP\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_MATRIX_COEFFICIENTS_CUSTOM",
                short_name: "CUSTOM",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "pixels",
        kind: GroupKind::Enum,
        name: "SDL_ChromaLocation",
        short_name: "ChromaLocation",
        doc: Some("Colorspace chroma sample location.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_CHROMA_LOCATION_NONE",
                short_name: "NONE",
                doc: Some("RGB, no chroma sampling\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_CHROMA_LOCATION_LEFT",
                short_name: "LEFT",
                doc: Some("In MPEG-2, MPEG-4, and AVC, Cb and Cr are taken on midpoint of the left-edge of the 2x2 square. In other words, they have the same horizontal location as the top-left pixel, but is shifted one-half pixel down vertically.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_CHROMA_LOCATION_CENTER",
                short_name: "CENTER",
                doc: Some("In JPEG/JFIF, H.261, and MPEG-1, Cb and Cr are taken at the center of the 2x2 square. In other words, they are offset one-half pixel to the right and one-half pixel down compared to the top-left pixel.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_CHROMA_LOCATION_TOPLEFT",
                short_name: "TOPLEFT",
                doc: Some("In HEVC for BT.2020 and BT.2100 content (in particular on Blu-rays), Cb and Cr are sampled at the same location as the group's top-left Y pixel (\"co-sited\", \"co-located\").\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "pixels",
        kind: GroupKind::Enum,
        name: "SDL_Colorspace",
        short_name: "Colorspace",
        doc: Some("Colorspace definitions.\n\nSince similar colorspaces may vary in their details (matrix, transfer\nfunction, etc.), this is not an exhaustive list, but rather a\nrepresentative sample of the kinds of colorspaces supported in SDL.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_ColorPrimaries`]\n- [`SDL_ColorRange`]\n- [`SDL_ColorType`]\n- [`SDL_MatrixCoefficients`]\n- [`SDL_TransferCharacteristics`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_COLORSPACE_UNKNOWN",
                short_name: "UNKNOWN",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLORSPACE_SRGB",
                short_name: "SRGB",
                doc: Some("Equivalent to DXGI_COLOR_SPACE_RGB_FULL_G22_NONE_P709\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLORSPACE_SRGB_LINEAR",
                short_name: "SRGB_LINEAR",
                doc: Some("Equivalent to DXGI_COLOR_SPACE_RGB_FULL_G10_NONE_P709\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLORSPACE_HDR10",
                short_name: "HDR10",
                doc: Some("Equivalent to DXGI_COLOR_SPACE_RGB_FULL_G2084_NONE_P2020\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLORSPACE_JPEG",
                short_name: "JPEG",
                doc: Some("Equivalent to DXGI_COLOR_SPACE_YCBCR_FULL_G22_NONE_P709_X601\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLORSPACE_BT601_LIMITED",
                short_name: "BT601_LIMITED",
                doc: Some("Equivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P601\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLORSPACE_BT601_FULL",
                short_name: "BT601_FULL",
                doc: Some("Equivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P601\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLORSPACE_BT709_LIMITED",
                short_name: "BT709_LIMITED",
                doc: Some("Equivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P709\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLORSPACE_BT709_FULL",
                short_name: "BT709_FULL",
                doc: Some("Equivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P709\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLORSPACE_BT2020_LIMITED",
                short_name: "BT2020_LIMITED",
                doc: Some("Equivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P2020\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLORSPACE_BT2020_FULL",
                short_name: "BT2020_FULL",
                doc: Some("Equivalent to DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P2020\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLORSPACE_RGB_DEFAULT",
                short_name: "RGB_DEFAULT",
                doc: Some("The default colorspace for RGB surfaces if no colorspace is specified\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_COLORSPACE_YUV_DEFAULT",
                short_name: "YUV_DEFAULT",
                doc: Some("The default colorspace for YUV surfaces if no colorspace is specified\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "power",
        kind: GroupKind::Enum,
        name: "SDL_PowerState",
        short_name: "PowerState",
        doc: Some("The basic state for the system's power supply.\n\nThese are results returned by [`SDL_GetPowerInfo()`].\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_POWERSTATE_ERROR",
                short_name: "ERROR",
                doc: Some("error determining power status\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_POWERSTATE_UNKNOWN",
                short_name: "UNKNOWN",
                doc: Some("cannot determine power status\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_POWERSTATE_ON_BATTERY",
                short_name: "ON_BATTERY",
                doc: Some("Not plugged in, running on the battery\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_POWERSTATE_NO_BATTERY",
                short_name: "NO_BATTERY",
                doc: Some("Plugged in, no battery available\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_POWERSTATE_CHARGING",
                short_name: "CHARGING",
                doc: Some("Plugged in, charging battery\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_POWERSTATE_CHARGED",
                short_name: "CHARGED",
                doc: Some("Plugged in, battery charged\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "process",
        kind: GroupKind::Enum,
        name: "SDL_ProcessIO",
        short_name: "ProcessIO",
        doc: Some("Description of where standard I/O should be directed when creating a\nprocess.\n\nIf a standard I/O stream is set to [`SDL_PROCESS_STDIO_INHERITED`], it will go\nto the same place as the application's I/O stream. This is the default for\nstandard output and standard error.\n\nIf a standard I/O stream is set to [`SDL_PROCESS_STDIO_NULL`], it is connected\nto `NUL:` on Windows and `/dev/null` on POSIX systems. This is the default\nfor standard input.\n\nIf a standard I/O stream is set to [`SDL_PROCESS_STDIO_APP`], it is connected\nto a new [`SDL_IOStream`] that is available to the application. Standard input\nwill be available as [`SDL_PROP_PROCESS_STDIN_POINTER`] and allows\n[`SDL_GetProcessInput()`], standard output will be available as\n[`SDL_PROP_PROCESS_STDOUT_POINTER`] and allows [`SDL_ReadProcess()`] and\n[`SDL_GetProcessOutput()`], and standard error will be available as\n[`SDL_PROP_PROCESS_STDERR_POINTER`] in the properties for the created\nprocess.\n\nIf a standard I/O stream is set to [`SDL_PROCESS_STDIO_REDIRECT`], it is\nconnected to an existing [`SDL_IOStream`] provided by the application. Standard\ninput is provided using [`SDL_PROP_PROCESS_CREATE_STDIN_POINTER`], standard\noutput is provided using [`SDL_PROP_PROCESS_CREATE_STDOUT_POINTER`], and\nstandard error is provided using [`SDL_PROP_PROCESS_CREATE_STDERR_POINTER`]\nin the creation properties. These existing streams should be closed by the\napplication once the new process is created.\n\nIn order to use an [`SDL_IOStream`] with [`SDL_PROCESS_STDIO_REDIRECT`], it must\nhave [`SDL_PROP_IOSTREAM_WINDOWS_HANDLE_POINTER`] or\n[`SDL_PROP_IOSTREAM_FILE_DESCRIPTOR_NUMBER`] set. This is true for streams\nrepresenting files and process I/O.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_CreateProcessWithProperties`]\n- [`SDL_GetProcessProperties`]\n- [`SDL_ReadProcess`]\n- [`SDL_GetProcessInput`]\n- [`SDL_GetProcessOutput`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_PROCESS_STDIO_INHERITED",
                short_name: "INHERITED",
                doc: Some("The I/O stream is inherited from the application.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PROCESS_STDIO_NULL",
                short_name: "NULL",
                doc: Some("The I/O stream is ignored.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PROCESS_STDIO_APP",
                short_name: "APP",
                doc: Some("The I/O stream is connected to a new [`SDL_IOStream`] that the application can read or write\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_PROCESS_STDIO_REDIRECT",
                short_name: "REDIRECT",
                doc: Some("The I/O stream is redirected to an existing [`SDL_IOStream`].\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "properties",
        kind: GroupKind::Id,
        name: "SDL_PropertiesID",
        short_name: "PropertiesID",
        doc: Some("SDL properties ID\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
        ],
    },
    Group {
        module: "properties",
        kind: GroupKind::Enum,
        name: "SDL_PropertyType",
        short_name: "PropertyType",
        doc: Some("SDL property type\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_PROPERTY_TYPE_INVALID",
                short_name: "INVALID",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PROPERTY_TYPE_POINTER",
                short_name: "POINTER",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PROPERTY_TYPE_STRING",
                short_name: "STRING",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PROPERTY_TYPE_NUMBER",
                short_name: "NUMBER",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PROPERTY_TYPE_FLOAT",
                short_name: "FLOAT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_PROPERTY_TYPE_BOOLEAN",
                short_name: "BOOLEAN",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "render",
        kind: GroupKind::Enum,
        name: "SDL_TextureAccess",
        short_name: "TextureAccess",
        doc: Some("The access pattern allowed for a texture.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_TEXTUREACCESS_STATIC",
                short_name: "STATIC",
                doc: Some("Changes rarely, not lockable\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TEXTUREACCESS_STREAMING",
                short_name: "STREAMING",
                doc: Some("Changes frequently, lockable\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TEXTUREACCESS_TARGET",
                short_name: "TARGET",
                doc: Some("Texture can be used as a render target\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "render",
        kind: GroupKind::Enum,
        name: "SDL_RendererLogicalPresentation",
        short_name: "RendererLogicalPresentation",
        doc: Some("How the logical size is mapped to the output.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_LOGICAL_PRESENTATION_DISABLED",
                short_name: "DISABLED",
                doc: Some("There is no logical size in effect\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOGICAL_PRESENTATION_STRETCH",
                short_name: "STRETCH",
                doc: Some("The rendered content is stretched to the output resolution\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOGICAL_PRESENTATION_LETTERBOX",
                short_name: "LETTERBOX",
                doc: Some("The rendered content is fit to the largest dimension and the other dimension is letterboxed with black bars\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOGICAL_PRESENTATION_OVERSCAN",
                short_name: "OVERSCAN",
                doc: Some("The rendered content is fit to the smallest dimension and the other dimension extends beyond the output bounds\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_LOGICAL_PRESENTATION_INTEGER_SCALE",
                short_name: "INTEGER_SCALE",
                doc: Some("The rendered content is scaled up by integer multiples to fit the output resolution\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "scancode",
        kind: GroupKind::Enum,
        name: "SDL_Scancode",
        short_name: "Scancode",
        doc: Some("The SDL keyboard scancode representation.\n\nAn SDL scancode is the physical representation of a key on the keyboard,\nindependent of language and keyboard mapping.\n\nValues of this type are used to represent keyboard keys, among other places\nin the `scancode` field of the [`SDL_KeyboardEvent`] structure.\n\nThe values in this enumeration are based on the USB usage page standard:\n<https://usb.org/sites/default/files/hut1_5.pdf>\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_SCANCODE_UNKNOWN",
                short_name: "UNKNOWN",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_A",
                short_name: "A",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_B",
                short_name: "B",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_C",
                short_name: "C",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_D",
                short_name: "D",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_E",
                short_name: "E",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_F",
                short_name: "F",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_G",
                short_name: "G",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_H",
                short_name: "H",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_I",
                short_name: "I",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_J",
                short_name: "J",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_K",
                short_name: "K",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_L",
                short_name: "L",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_M",
                short_name: "M",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_N",
                short_name: "N",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_O",
                short_name: "O",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_P",
                short_name: "P",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_Q",
                short_name: "Q",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_R",
                short_name: "R",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_S",
                short_name: "S",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_T",
                short_name: "T",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_U",
                short_name: "U",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_V",
                short_name: "V",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_W",
                short_name: "W",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_X",
                short_name: "X",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_Y",
                short_name: "Y",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_Z",
                short_name: "Z",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_1",
                short_name: "_1",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_2",
                short_name: "_2",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_3",
                short_name: "_3",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_4",
                short_name: "_4",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_5",
                short_name: "_5",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_6",
                short_name: "_6",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_7",
                short_name: "_7",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_8",
                short_name: "_8",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_9",
                short_name: "_9",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_0",
                short_name: "_0",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_RETURN",
                short_name: "RETURN",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_ESCAPE",
                short_name: "ESCAPE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_BACKSPACE",
                short_name: "BACKSPACE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_TAB",
                short_name: "TAB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_SPACE",
                short_name: "SPACE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_MINUS",
                short_name: "MINUS",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_EQUALS",
                short_name: "EQUALS",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_LEFTBRACKET",
                short_name: "LEFTBRACKET",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_RIGHTBRACKET",
                short_name: "RIGHTBRACKET",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_BACKSLASH",
                short_name: "BACKSLASH",
                doc: Some("Located at the lower left of the return\nkey on ISO keyboards and at the right end\nof the QWERTY row on ANSI keyboards.\nProduces REVERSE SOLIDUS (backslash) and\nVERTICAL LINE in a US layout, REVERSE\nSOLIDUS and VERTICAL LINE in a UK Mac\nlayout, NUMBER SIGN and TILDE in a UK\nWindows layout, DOLLAR SIGN and POUND SIGN\nin a Swiss German layout, NUMBER SIGN and\nAPOSTROPHE in a German layout, GRAVE\nACCENT and POUND SIGN in a French Mac\nlayout, and ASTERISK and MICRO SIGN in a\nFrench Windows layout.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_NONUSHASH",
                short_name: "NONUSHASH",
                doc: Some("ISO USB keyboards actually use this code\ninstead of 49 for the same key, but all\nOSes I've seen treat the two codes\nidentically. So, as an implementor, unless\nyour keyboard generates both of those\ncodes and your OS treats them differently,\nyou should generate [`SDL_SCANCODE_BACKSLASH`]\ninstead of this code. As a user, you\nshould not rely on this code because SDL\nwill never generate it with most (all?)\nkeyboards.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_SEMICOLON",
                short_name: "SEMICOLON",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_APOSTROPHE",
                short_name: "APOSTROPHE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_GRAVE",
                short_name: "GRAVE",
                doc: Some("Located in the top left corner (on both ANSI\nand ISO keyboards). Produces GRAVE ACCENT and\nTILDE in a US Windows layout and in US and UK\nMac layouts on ANSI keyboards, GRAVE ACCENT\nand NOT SIGN in a UK Windows layout, SECTION\nSIGN and PLUS-MINUS SIGN in US and UK Mac\nlayouts on ISO keyboards, SECTION SIGN and\nDEGREE SIGN in a Swiss German layout (Mac:\nonly on ISO keyboards), CIRCUMFLEX ACCENT and\nDEGREE SIGN in a German layout (Mac: only on\nISO keyboards), SUPERSCRIPT TWO and TILDE in a\nFrench Windows layout, COMMERCIAL AT and\nNUMBER SIGN in a French Mac layout on ISO\nkeyboards, and LESS-THAN SIGN and GREATER-THAN\nSIGN in a Swiss German, German, or French Mac\nlayout on ANSI keyboards.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_COMMA",
                short_name: "COMMA",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_PERIOD",
                short_name: "PERIOD",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_SLASH",
                short_name: "SLASH",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_CAPSLOCK",
                short_name: "CAPSLOCK",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_F1",
                short_name: "F1",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_F2",
                short_name: "F2",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_F3",
                short_name: "F3",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_F4",
                short_name: "F4",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_F5",
                short_name: "F5",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_F6",
                short_name: "F6",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_F7",
                short_name: "F7",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_F8",
                short_name: "F8",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_F9",
                short_name: "F9",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_F10",
                short_name: "F10",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_F11",
                short_name: "F11",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_F12",
                short_name: "F12",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_PRINTSCREEN",
                short_name: "PRINTSCREEN",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_SCROLLLOCK",
                short_name: "SCROLLLOCK",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_PAUSE",
                short_name: "PAUSE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_INSERT",
                short_name: "INSERT",
                doc: Some("insert on PC, help on some Mac keyboards (but\ndoes send code 73, not 117)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_HOME",
                short_name: "HOME",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_PAGEUP",
                short_name: "PAGEUP",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_DELETE",
                short_name: "DELETE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_END",
                short_name: "END",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_PAGEDOWN",
                short_name: "PAGEDOWN",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_RIGHT",
                short_name: "RIGHT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_LEFT",
                short_name: "LEFT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_DOWN",
                short_name: "DOWN",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_UP",
                short_name: "UP",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_NUMLOCKCLEAR",
                short_name: "NUMLOCKCLEAR",
                doc: Some("num lock on PC, clear on Mac keyboards\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_DIVIDE",
                short_name: "KP_DIVIDE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_MULTIPLY",
                short_name: "KP_MULTIPLY",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_MINUS",
                short_name: "KP_MINUS",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_PLUS",
                short_name: "KP_PLUS",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_ENTER",
                short_name: "KP_ENTER",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_1",
                short_name: "KP_1",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_2",
                short_name: "KP_2",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_3",
                short_name: "KP_3",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_4",
                short_name: "KP_4",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_5",
                short_name: "KP_5",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_6",
                short_name: "KP_6",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_7",
                short_name: "KP_7",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_8",
                short_name: "KP_8",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_9",
                short_name: "KP_9",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_0",
                short_name: "KP_0",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_PERIOD",
                short_name: "KP_PERIOD",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_NONUSBACKSLASH",
                short_name: "NONUSBACKSLASH",
                doc: Some("This is the additional key that ISO\nkeyboards have over ANSI ones,\nlocated between left shift and Y.\nProduces GRAVE ACCENT and TILDE in a\nUS or UK Mac layout, REVERSE SOLIDUS\n(backslash) and VERTICAL LINE in a\nUS or UK Windows layout, and\nLESS-THAN SIGN and GREATER-THAN SIGN\nin a Swiss German, German, or French\nlayout.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_APPLICATION",
                short_name: "APPLICATION",
                doc: Some("windows contextual menu, compose\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_POWER",
                short_name: "POWER",
                doc: Some("The USB document says this is a status flag,\nnot a physical key - but some Mac keyboards\ndo have a power key.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_EQUALS",
                short_name: "KP_EQUALS",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_F13",
                short_name: "F13",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_F14",
                short_name: "F14",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_F15",
                short_name: "F15",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_F16",
                short_name: "F16",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_F17",
                short_name: "F17",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_F18",
                short_name: "F18",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_F19",
                short_name: "F19",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_F20",
                short_name: "F20",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_F21",
                short_name: "F21",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_F22",
                short_name: "F22",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_F23",
                short_name: "F23",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_F24",
                short_name: "F24",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_EXECUTE",
                short_name: "EXECUTE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_HELP",
                short_name: "HELP",
                doc: Some("AL Integrated Help Center\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_MENU",
                short_name: "MENU",
                doc: Some("Menu (show menu)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_SELECT",
                short_name: "SELECT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_STOP",
                short_name: "STOP",
                doc: Some("AC Stop\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_AGAIN",
                short_name: "AGAIN",
                doc: Some("AC Redo/Repeat\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_UNDO",
                short_name: "UNDO",
                doc: Some("AC Undo\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_CUT",
                short_name: "CUT",
                doc: Some("AC Cut\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_COPY",
                short_name: "COPY",
                doc: Some("AC Copy\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_PASTE",
                short_name: "PASTE",
                doc: Some("AC Paste\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_FIND",
                short_name: "FIND",
                doc: Some("AC Find\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_MUTE",
                short_name: "MUTE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_VOLUMEUP",
                short_name: "VOLUMEUP",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_VOLUMEDOWN",
                short_name: "VOLUMEDOWN",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_COMMA",
                short_name: "KP_COMMA",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_EQUALSAS400",
                short_name: "KP_EQUALSAS400",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_INTERNATIONAL1",
                short_name: "INTERNATIONAL1",
                doc: Some("used on Asian keyboards, see\nfootnotes in USB doc\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_INTERNATIONAL2",
                short_name: "INTERNATIONAL2",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_INTERNATIONAL3",
                short_name: "INTERNATIONAL3",
                doc: Some("Yen\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_INTERNATIONAL4",
                short_name: "INTERNATIONAL4",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_INTERNATIONAL5",
                short_name: "INTERNATIONAL5",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_INTERNATIONAL6",
                short_name: "INTERNATIONAL6",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_INTERNATIONAL7",
                short_name: "INTERNATIONAL7",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_INTERNATIONAL8",
                short_name: "INTERNATIONAL8",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_INTERNATIONAL9",
                short_name: "INTERNATIONAL9",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_LANG1",
                short_name: "LANG1",
                doc: Some("Hangul/English toggle\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_LANG2",
                short_name: "LANG2",
                doc: Some("Hanja conversion\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_LANG3",
                short_name: "LANG3",
                doc: Some("Katakana\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_LANG4",
                short_name: "LANG4",
                doc: Some("Hiragana\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_LANG5",
                short_name: "LANG5",
                doc: Some("Zenkaku/Hankaku\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_LANG6",
                short_name: "LANG6",
                doc: Some("reserved\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_LANG7",
                short_name: "LANG7",
                doc: Some("reserved\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_LANG8",
                short_name: "LANG8",
                doc: Some("reserved\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_LANG9",
                short_name: "LANG9",
                doc: Some("reserved\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_ALTERASE",
                short_name: "ALTERASE",
                doc: Some("Erase-Eaze\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_SYSREQ",
                short_name: "SYSREQ",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_CANCEL",
                short_name: "CANCEL",
                doc: Some("AC Cancel\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_CLEAR",
                short_name: "CLEAR",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_PRIOR",
                short_name: "PRIOR",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_RETURN2",
                short_name: "RETURN2",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_SEPARATOR",
                short_name: "SEPARATOR",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_OUT",
                short_name: "OUT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_OPER",
                short_name: "OPER",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_CLEARAGAIN",
                short_name: "CLEARAGAIN",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_CRSEL",
                short_name: "CRSEL",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_EXSEL",
                short_name: "EXSEL",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_00",
                short_name: "KP_00",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_000",
                short_name: "KP_000",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_THOUSANDSSEPARATOR",
                short_name: "THOUSANDSSEPARATOR",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_DECIMALSEPARATOR",
                short_name: "DECIMALSEPARATOR",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_CURRENCYUNIT",
                short_name: "CURRENCYUNIT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_CURRENCYSUBUNIT",
                short_name: "CURRENCYSUBUNIT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_LEFTPAREN",
                short_name: "KP_LEFTPAREN",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_RIGHTPAREN",
                short_name: "KP_RIGHTPAREN",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_LEFTBRACE",
                short_name: "KP_LEFTBRACE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_RIGHTBRACE",
                short_name: "KP_RIGHTBRACE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_TAB",
                short_name: "KP_TAB",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_BACKSPACE",
                short_name: "KP_BACKSPACE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_A",
                short_name: "KP_A",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_B",
                short_name: "KP_B",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_C",
                short_name: "KP_C",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_D",
                short_name: "KP_D",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_E",
                short_name: "KP_E",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_F",
                short_name: "KP_F",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_XOR",
                short_name: "KP_XOR",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_POWER",
                short_name: "KP_POWER",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_PERCENT",
                short_name: "KP_PERCENT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_LESS",
                short_name: "KP_LESS",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_GREATER",
                short_name: "KP_GREATER",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_AMPERSAND",
                short_name: "KP_AMPERSAND",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_DBLAMPERSAND",
                short_name: "KP_DBLAMPERSAND",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_VERTICALBAR",
                short_name: "KP_VERTICALBAR",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_DBLVERTICALBAR",
                short_name: "KP_DBLVERTICALBAR",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_COLON",
                short_name: "KP_COLON",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_HASH",
                short_name: "KP_HASH",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_SPACE",
                short_name: "KP_SPACE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_AT",
                short_name: "KP_AT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_EXCLAM",
                short_name: "KP_EXCLAM",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_MEMSTORE",
                short_name: "KP_MEMSTORE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_MEMRECALL",
                short_name: "KP_MEMRECALL",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_MEMCLEAR",
                short_name: "KP_MEMCLEAR",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_MEMADD",
                short_name: "KP_MEMADD",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_MEMSUBTRACT",
                short_name: "KP_MEMSUBTRACT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_MEMMULTIPLY",
                short_name: "KP_MEMMULTIPLY",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_MEMDIVIDE",
                short_name: "KP_MEMDIVIDE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_PLUSMINUS",
                short_name: "KP_PLUSMINUS",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_CLEAR",
                short_name: "KP_CLEAR",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_CLEARENTRY",
                short_name: "KP_CLEARENTRY",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_BINARY",
                short_name: "KP_BINARY",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_OCTAL",
                short_name: "KP_OCTAL",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_DECIMAL",
                short_name: "KP_DECIMAL",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_KP_HEXADECIMAL",
                short_name: "KP_HEXADECIMAL",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_LCTRL",
                short_name: "LCTRL",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_LSHIFT",
                short_name: "LSHIFT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_LALT",
                short_name: "LALT",
                doc: Some("alt, option\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_LGUI",
                short_name: "LGUI",
                doc: Some("windows, command (apple), meta\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_RCTRL",
                short_name: "RCTRL",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_RSHIFT",
                short_name: "RSHIFT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_RALT",
                short_name: "RALT",
                doc: Some("alt gr, option\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_RGUI",
                short_name: "RGUI",
                doc: Some("windows, command (apple), meta\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_MODE",
                short_name: "MODE",
                doc: Some("I'm not sure if this is really not covered\nby any of the above, but since there's a\nspecial [`SDL_KMOD_MODE`] for it I'm adding it here\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_SLEEP",
                short_name: "SLEEP",
                doc: Some("Sleep\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_WAKE",
                short_name: "WAKE",
                doc: Some("Wake\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_CHANNEL_INCREMENT",
                short_name: "CHANNEL_INCREMENT",
                doc: Some("Channel Increment\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_CHANNEL_DECREMENT",
                short_name: "CHANNEL_DECREMENT",
                doc: Some("Channel Decrement\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_MEDIA_PLAY",
                short_name: "MEDIA_PLAY",
                doc: Some("Play\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_MEDIA_PAUSE",
                short_name: "MEDIA_PAUSE",
                doc: Some("Pause\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_MEDIA_RECORD",
                short_name: "MEDIA_RECORD",
                doc: Some("Record\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_MEDIA_FAST_FORWARD",
                short_name: "MEDIA_FAST_FORWARD",
                doc: Some("Fast Forward\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_MEDIA_REWIND",
                short_name: "MEDIA_REWIND",
                doc: Some("Rewind\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_MEDIA_NEXT_TRACK",
                short_name: "MEDIA_NEXT_TRACK",
                doc: Some("Next Track\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_MEDIA_PREVIOUS_TRACK",
                short_name: "MEDIA_PREVIOUS_TRACK",
                doc: Some("Previous Track\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_MEDIA_STOP",
                short_name: "MEDIA_STOP",
                doc: Some("Stop\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_MEDIA_EJECT",
                short_name: "MEDIA_EJECT",
                doc: Some("Eject\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_MEDIA_PLAY_PAUSE",
                short_name: "MEDIA_PLAY_PAUSE",
                doc: Some("Play / Pause\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_MEDIA_SELECT",
                short_name: "MEDIA_SELECT",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_AC_NEW",
                short_name: "AC_NEW",
                doc: Some("AC New\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_AC_OPEN",
                short_name: "AC_OPEN",
                doc: Some("AC Open\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_AC_CLOSE",
                short_name: "AC_CLOSE",
                doc: Some("AC Close\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_AC_EXIT",
                short_name: "AC_EXIT",
                doc: Some("AC Exit\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_AC_SAVE",
                short_name: "AC_SAVE",
                doc: Some("AC Save\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_AC_PRINT",
                short_name: "AC_PRINT",
                doc: Some("AC Print\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_AC_PROPERTIES",
                short_name: "AC_PROPERTIES",
                doc: Some("AC Properties\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_AC_SEARCH",
                short_name: "AC_SEARCH",
                doc: Some("AC Search\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_AC_HOME",
                short_name: "AC_HOME",
                doc: Some("AC Home\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_AC_BACK",
                short_name: "AC_BACK",
                doc: Some("AC Back\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_AC_FORWARD",
                short_name: "AC_FORWARD",
                doc: Some("AC Forward\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_AC_STOP",
                short_name: "AC_STOP",
                doc: Some("AC Stop\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_AC_REFRESH",
                short_name: "AC_REFRESH",
                doc: Some("AC Refresh\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_AC_BOOKMARKS",
                short_name: "AC_BOOKMARKS",
                doc: Some("AC Bookmarks\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_SOFTLEFT",
                short_name: "SOFTLEFT",
                doc: Some("Usually situated below the display on phones and\nused as a multi-function feature key for selecting\na software defined function shown on the bottom left\nof the display.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_SOFTRIGHT",
                short_name: "SOFTRIGHT",
                doc: Some("Usually situated below the display on phones and\nused as a multi-function feature key for selecting\na software defined function shown on the bottom right\nof the display.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_CALL",
                short_name: "CALL",
                doc: Some("Used for accepting phone calls.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_ENDCALL",
                short_name: "ENDCALL",
                doc: Some("Used for rejecting phone calls.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_RESERVED",
                short_name: "RESERVED",
                doc: Some("400-500 reserved for dynamic keycodes\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCANCODE_COUNT",
                short_name: "COUNT",
                doc: Some("not a key, just marks the number of scancodes for array bounds\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "sensor",
        kind: GroupKind::Id,
        name: "SDL_SensorID",
        short_name: "SensorID",
        doc: Some("This is a unique ID for a sensor for the time it is connected to the\nsystem, and is never reused for the lifetime of the application.\n\nThe value 0 is an invalid ID.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
        ],
    },
    Group {
        module: "sensor",
        kind: GroupKind::Enum,
        name: "SDL_SensorType",
        short_name: "SensorType",
        doc: Some("The different sensors defined by SDL.\n\nAdditional sensors may be available, using platform dependent semantics.\n\nHere are the additional Android sensors:\n\n<https://developer.android.com/reference/android/hardware/SensorEvent.html#values>\n\nAccelerometer sensor notes:\n\nThe accelerometer returns the current acceleration in SI meters per second\nsquared. This measurement includes the force of gravity, so a device at\nrest will have an value of [`SDL_STANDARD_GRAVITY`] away from the center of the\nearth, which is a positive Y value.\n\n- `values[0]`: Acceleration on the x axis\n- `values[1]`: Acceleration on the y axis\n- `values[2]`: Acceleration on the z axis\n\nFor phones and tablets held in natural orientation and game controllers\nheld in front of you, the axes are defined as follows:\n\n- -X ... +X : left ... right\n- -Y ... +Y : bottom ... top\n- -Z ... +Z : farther ... closer\n\nThe accelerometer axis data is not changed when the device is rotated.\n\nGyroscope sensor notes:\n\nThe gyroscope returns the current rate of rotation in radians per second.\nThe rotation is positive in the counter-clockwise direction. That is, an\nobserver looking from a positive location on one of the axes would see\npositive rotation on that axis when it appeared to be rotating\ncounter-clockwise.\n\n- `values[0]`: Angular speed around the x axis (pitch)\n- `values[1]`: Angular speed around the y axis (yaw)\n- `values[2]`: Angular speed around the z axis (roll)\n\nFor phones and tablets held in natural orientation and game controllers\nheld in front of you, the axes are defined as follows:\n\n- -X ... +X : left ... right\n- -Y ... +Y : bottom ... top\n- -Z ... +Z : farther ... closer\n\nThe gyroscope axis data is not changed when the device is rotated.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_GetCurrentDisplayOrientation`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_SENSOR_INVALID",
                short_name: "INVALID",
                doc: Some("Returned for an invalid sensor\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SENSOR_UNKNOWN",
                short_name: "UNKNOWN",
                doc: Some("Unknown sensor type\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SENSOR_ACCEL",
                short_name: "ACCEL",
                doc: Some("Accelerometer\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SENSOR_GYRO",
                short_name: "GYRO",
                doc: Some("Gyroscope\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SENSOR_ACCEL_L",
                short_name: "ACCEL_L",
                doc: Some("Accelerometer for left Joy-Con controller and Wii nunchuk\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SENSOR_GYRO_L",
                short_name: "GYRO_L",
                doc: Some("Gyroscope for left Joy-Con controller\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SENSOR_ACCEL_R",
                short_name: "ACCEL_R",
                doc: Some("Accelerometer for right Joy-Con controller\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SENSOR_GYRO_R",
                short_name: "GYRO_R",
                doc: Some("Gyroscope for right Joy-Con controller\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "surface",
        kind: GroupKind::Flags,
        name: "SDL_SurfaceFlags",
        short_name: "SurfaceFlags",
        doc: Some("The flags on an [`SDL_Surface`].\n\nThese are generally considered read-only.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_SURFACE_PREALLOCATED",
                short_name: "PREALLOCATED",
                doc: Some("Surface uses preallocated pixel memory\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SURFACE_LOCK_NEEDED",
                short_name: "LOCK_NEEDED",
                doc: Some("Surface needs to be locked to access pixels\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SURFACE_LOCKED",
                short_name: "LOCKED",
                doc: Some("Surface is currently locked\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SURFACE_SIMD_ALIGNED",
                short_name: "SIMD_ALIGNED",
                doc: Some("Surface uses pixel memory allocated with [`SDL_aligned_alloc()`]\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "surface",
        kind: GroupKind::Enum,
        name: "SDL_ScaleMode",
        short_name: "ScaleMode",
        doc: Some("The scaling mode.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_SCALEMODE_INVALID",
                short_name: "INVALID",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCALEMODE_NEAREST",
                short_name: "NEAREST",
                doc: Some("nearest pixel sampling\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SCALEMODE_LINEAR",
                short_name: "LINEAR",
                doc: Some("linear filtering\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "surface",
        kind: GroupKind::Enum,
        name: "SDL_FlipMode",
        short_name: "FlipMode",
        doc: Some("The flip mode.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_FLIP_NONE",
                short_name: "NONE",
                doc: Some("Do not flip\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_FLIP_HORIZONTAL",
                short_name: "HORIZONTAL",
                doc: Some("flip horizontally\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_FLIP_VERTICAL",
                short_name: "VERTICAL",
                doc: Some("flip vertically\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "system",
        kind: GroupKind::Enum,
        name: "SDL_Sandbox",
        short_name: "Sandbox",
        doc: Some("Application sandbox environment.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_SANDBOX_NONE",
                short_name: "NONE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SANDBOX_UNKNOWN_CONTAINER",
                short_name: "UNKNOWN_CONTAINER",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SANDBOX_FLATPAK",
                short_name: "FLATPAK",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SANDBOX_SNAP",
                short_name: "SNAP",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_SANDBOX_MACOS",
                short_name: "MACOS",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "thread",
        kind: GroupKind::Id,
        name: "SDL_ThreadID",
        short_name: "ThreadID",
        doc: Some("A unique numeric ID that identifies a thread.\n\nThese are different from [`SDL_Thread`] objects, which are generally what an\napplication will operate on, but having a way to uniquely identify a thread\ncan be useful at times.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n\n## See also\n- [`SDL_GetThreadID`]\n- [`SDL_GetCurrentThreadID`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
        ],
    },
    Group {
        module: "thread",
        kind: GroupKind::Id,
        name: "SDL_TLSID",
        short_name: "TLSID",
        doc: Some("Thread local storage ID.\n\n0 is the invalid ID. An app can create these and then set data for these\nIDs that is unique to each thread.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n\n## See also\n- [`SDL_GetTLS`]\n- [`SDL_SetTLS`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
        ],
    },
    Group {
        module: "thread",
        kind: GroupKind::Enum,
        name: "SDL_ThreadPriority",
        short_name: "ThreadPriority",
        doc: Some("The SDL thread priority.\n\nSDL will make system changes as necessary in order to apply the thread\npriority. Code which attempts to control thread state related to priority\nshould be aware that calling [`SDL_SetCurrentThreadPriority`] may alter such\nstate. [`SDL_HINT_THREAD_PRIORITY_POLICY`] can be used to control aspects of\nthis behavior.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_THREAD_PRIORITY_LOW",
                short_name: "LOW",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_THREAD_PRIORITY_NORMAL",
                short_name: "NORMAL",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_THREAD_PRIORITY_HIGH",
                short_name: "HIGH",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_THREAD_PRIORITY_TIME_CRITICAL",
                short_name: "TIME_CRITICAL",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "thread",
        kind: GroupKind::Enum,
        name: "SDL_ThreadState",
        short_name: "ThreadState",
        doc: Some("The SDL thread state.\n\nThe current state of a thread can be checked by calling [`SDL_GetThreadState`].\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_GetThreadState`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_THREAD_UNKNOWN",
                short_name: "UNKNOWN",
                doc: Some("The thread is not valid\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_THREAD_ALIVE",
                short_name: "ALIVE",
                doc: Some("The thread is currently running\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_THREAD_DETACHED",
                short_name: "DETACHED",
                doc: Some("The thread is detached and can't be waited on\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_THREAD_COMPLETE",
                short_name: "COMPLETE",
                doc: Some("The thread has finished and should be cleaned up with [`SDL_WaitThread()`]\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "time",
        kind: GroupKind::Enum,
        name: "SDL_DateFormat",
        short_name: "DateFormat",
        doc: Some("The preferred date format of the current system locale.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_GetDateTimeLocalePreferences`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_DATE_FORMAT_YYYYMMDD",
                short_name: "YYYYMMDD",
                doc: Some("Year/Month/Day\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_DATE_FORMAT_DDMMYYYY",
                short_name: "DDMMYYYY",
                doc: Some("Day/Month/Year\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_DATE_FORMAT_MMDDYYYY",
                short_name: "MMDDYYYY",
                doc: Some("Month/Day/Year\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "time",
        kind: GroupKind::Enum,
        name: "SDL_TimeFormat",
        short_name: "TimeFormat",
        doc: Some("The preferred time format of the current system locale.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_GetDateTimeLocalePreferences`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_TIME_FORMAT_24HR",
                short_name: "_24HR",
                doc: Some("24 hour time\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TIME_FORMAT_12HR",
                short_name: "_12HR",
                doc: Some("12 hour time\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "timer",
        kind: GroupKind::Id,
        name: "SDL_TimerID",
        short_name: "TimerID",
        doc: Some("Definition of the timer ID type.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
        ],
    },
    Group {
        module: "touch",
        kind: GroupKind::Id,
        name: "SDL_TouchID",
        short_name: "TouchID",
        doc: Some("A unique ID for a touch device.\n\nThis ID is valid for the time the device is connected to the system, and is\nnever reused for the lifetime of the application.\n\nThe value 0 is an invalid ID.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
        ],
    },
    Group {
        module: "touch",
        kind: GroupKind::Id,
        name: "SDL_FingerID",
        short_name: "FingerID",
        doc: Some("A unique ID for a single finger on a touch device.\n\nThis ID is valid for the time the finger (stylus, etc) is touching and will\nbe unique for all fingers currently in contact, so this ID tracks the\nlifetime of a single continuous touch. This value may represent an index, a\npointer, or some other unique ID, depending on the platform.\n\nThe value 0 is an invalid ID.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
        ],
    },
    Group {
        module: "touch",
        kind: GroupKind::Enum,
        name: "SDL_TouchDeviceType",
        short_name: "TouchDeviceType",
        doc: Some("An enum that describes the type of a touch device.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_TOUCH_DEVICE_INVALID",
                short_name: "INVALID",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_TOUCH_DEVICE_DIRECT",
                short_name: "DIRECT",
                doc: Some("touch screen with window-relative coordinates\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TOUCH_DEVICE_INDIRECT_ABSOLUTE",
                short_name: "INDIRECT_ABSOLUTE",
                doc: Some("trackpad with absolute device coordinates\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TOUCH_DEVICE_INDIRECT_RELATIVE",
                short_name: "INDIRECT_RELATIVE",
                doc: Some("trackpad with screen cursor-relative coordinates\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "tray",
        kind: GroupKind::Flags,
        name: "SDL_TrayEntryFlags",
        short_name: "TrayEntryFlags",
        doc: Some("Flags that control the creation of system tray entries.\n\nSome of these flags are required; exactly one of them must be specified at\nthe time a tray entry is created. Other flags are optional; zero or more of\nthose can be OR'ed together with the required flag.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n\n## See also\n- [`SDL_InsertTrayEntryAt`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_TRAYENTRY_BUTTON",
                short_name: "BUTTON",
                doc: Some("Make the entry a simple button. Required.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TRAYENTRY_CHECKBOX",
                short_name: "CHECKBOX",
                doc: Some("Make the entry a checkbox. Required.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TRAYENTRY_SUBMENU",
                short_name: "SUBMENU",
                doc: Some("Prepare the entry to have a submenu. Required\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TRAYENTRY_DISABLED",
                short_name: "DISABLED",
                doc: Some("Make the entry disabled. Optional.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_TRAYENTRY_CHECKED",
                short_name: "CHECKED",
                doc: Some("Make the entry checked. This is valid only for checkboxes. Optional.\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "video",
        kind: GroupKind::Id,
        name: "SDL_DisplayID",
        short_name: "DisplayID",
        doc: Some("This is a unique ID for a display for the time it is connected to the\nsystem, and is never reused for the lifetime of the application.\n\nIf the display is disconnected and reconnected, it will get a new ID.\n\nThe value 0 is an invalid ID.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
        ],
    },
    Group {
        module: "video",
        kind: GroupKind::Id,
        name: "SDL_WindowID",
        short_name: "WindowID",
        doc: Some("This is a unique ID for a window.\n\nThe value 0 is an invalid ID.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
        ],
    },
    Group {
        module: "video",
        kind: GroupKind::Enum,
        name: "SDL_SystemTheme",
        short_name: "SystemTheme",
        doc: Some("System theme.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_SYSTEM_THEME_UNKNOWN",
                short_name: "UNKNOWN",
                doc: Some("Unknown system theme\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SYSTEM_THEME_LIGHT",
                short_name: "LIGHT",
                doc: Some("Light colored system theme\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_SYSTEM_THEME_DARK",
                short_name: "DARK",
                doc: Some("Dark colored system theme\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "video",
        kind: GroupKind::Enum,
        name: "SDL_DisplayOrientation",
        short_name: "DisplayOrientation",
        doc: Some("Display orientation values; the way a display is rotated.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_ORIENTATION_UNKNOWN",
                short_name: "UNKNOWN",
                doc: Some("The display orientation can't be determined\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_ORIENTATION_LANDSCAPE",
                short_name: "LANDSCAPE",
                doc: Some("The display is in landscape mode, with the right side up, relative to portrait mode\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_ORIENTATION_LANDSCAPE_FLIPPED",
                short_name: "LANDSCAPE_FLIPPED",
                doc: Some("The display is in landscape mode, with the left side up, relative to portrait mode\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_ORIENTATION_PORTRAIT",
                short_name: "PORTRAIT",
                doc: Some("The display is in portrait mode\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_ORIENTATION_PORTRAIT_FLIPPED",
                short_name: "PORTRAIT_FLIPPED",
                doc: Some("The display is in portrait mode, upside down\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "video",
        kind: GroupKind::Flags,
        name: "SDL_WindowFlags",
        short_name: "WindowFlags",
        doc: Some("The flags on a window.\n\nThese cover a lot of true/false, or on/off, window state. Some of it is\nimmutable after being set through [`SDL_CreateWindow()`], some of it can be\nchanged on existing windows by the app, and some of it might be altered by\nthe user or system outside of the app's control.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n\n## See also\n- [`SDL_GetWindowFlags`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_WINDOW_FULLSCREEN",
                short_name: "FULLSCREEN",
                doc: Some("window is in fullscreen mode\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_WINDOW_OPENGL",
                short_name: "OPENGL",
                doc: Some("window usable with OpenGL context\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_WINDOW_OCCLUDED",
                short_name: "OCCLUDED",
                doc: Some("window is occluded\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_WINDOW_HIDDEN",
                short_name: "HIDDEN",
                doc: Some("window is neither mapped onto the desktop nor shown in the taskbar/dock/window list; [`SDL_ShowWindow()`] is required for it to become visible\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_WINDOW_BORDERLESS",
                short_name: "BORDERLESS",
                doc: Some("no window decoration\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_WINDOW_RESIZABLE",
                short_name: "RESIZABLE",
                doc: Some("window can be resized\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_WINDOW_MINIMIZED",
                short_name: "MINIMIZED",
                doc: Some("window is minimized\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_WINDOW_MAXIMIZED",
                short_name: "MAXIMIZED",
                doc: Some("window is maximized\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_WINDOW_MOUSE_GRABBED",
                short_name: "MOUSE_GRABBED",
                doc: Some("window has grabbed mouse input\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_WINDOW_INPUT_FOCUS",
                short_name: "INPUT_FOCUS",
                doc: Some("window has input focus\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_WINDOW_MOUSE_FOCUS",
                short_name: "MOUSE_FOCUS",
                doc: Some("window has mouse focus\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_WINDOW_EXTERNAL",
                short_name: "EXTERNAL",
                doc: Some("window not created by SDL\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_WINDOW_MODAL",
                short_name: "MODAL",
                doc: Some("window is modal\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_WINDOW_HIGH_PIXEL_DENSITY",
                short_name: "HIGH_PIXEL_DENSITY",
                doc: Some("window uses high pixel density back buffer if possible\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_WINDOW_MOUSE_CAPTURE",
                short_name: "MOUSE_CAPTURE",
                doc: Some("window has mouse captured (unrelated to MOUSE_GRABBED)\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_WINDOW_MOUSE_RELATIVE_MODE",
                short_name: "MOUSE_RELATIVE_MODE",
                doc: Some("window has relative mode enabled\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_WINDOW_ALWAYS_ON_TOP",
                short_name: "ALWAYS_ON_TOP",
                doc: Some("window should always be above others\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_WINDOW_UTILITY",
                short_name: "UTILITY",
                doc: Some("window should be treated as a utility window, not showing in the task bar and window list\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_WINDOW_TOOLTIP",
                short_name: "TOOLTIP",
                doc: Some("window should be treated as a tooltip and does not get mouse or keyboard focus, requires a parent window\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_WINDOW_POPUP_MENU",
                short_name: "POPUP_MENU",
                doc: Some("window should be treated as a popup menu, requires a parent window\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_WINDOW_KEYBOARD_GRABBED",
                short_name: "KEYBOARD_GRABBED",
                doc: Some("window has grabbed keyboard input\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_WINDOW_VULKAN",
                short_name: "VULKAN",
                doc: Some("window usable for Vulkan surface\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_WINDOW_METAL",
                short_name: "METAL",
                doc: Some("window usable for Metal view\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_WINDOW_TRANSPARENT",
                short_name: "TRANSPARENT",
                doc: Some("window with transparent buffer\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_WINDOW_NOT_FOCUSABLE",
                short_name: "NOT_FOCUSABLE",
                doc: Some("window should not be focusable\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "video",
        kind: GroupKind::Enum,
        name: "SDL_FlashOperation",
        short_name: "FlashOperation",
        doc: Some("Window flash operation.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_FLASH_CANCEL",
                short_name: "CANCEL",
                doc: Some("Cancel any window flash state\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_FLASH_BRIEFLY",
                short_name: "BRIEFLY",
                doc: Some("Flash the window briefly to get attention\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_FLASH_UNTIL_FOCUSED",
                short_name: "UNTIL_FOCUSED",
                doc: Some("Flash the window until it gets focus\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "video",
        kind: GroupKind::Enum,
        name: "SDL_GLAttr",
        short_name: "GLAttr",
        doc: Some("An enumeration of OpenGL configuration attributes.\n\nWhile you can set most OpenGL attributes normally, the attributes listed\nabove must be known before SDL creates the window that will be used with\nthe OpenGL context. These attributes are set and read with\n[`SDL_GL_SetAttribute()`] and [`SDL_GL_GetAttribute()`].\n\nIn some cases, these attributes are minimum requests; the GL does not\npromise to give you exactly what you asked for. It's possible to ask for a\n16-bit depth buffer and get a 24-bit one instead, for example, or to ask\nfor no stencil buffer and still have one available. Context creation should\nfail if the GL can't provide your requested attributes at a minimum, but\nyou should check to see exactly what you got.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GL_RED_SIZE",
                short_name: "RED_SIZE",
                doc: Some("the minimum number of bits for the red channel of the color buffer; defaults to 3.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_GREEN_SIZE",
                short_name: "GREEN_SIZE",
                doc: Some("the minimum number of bits for the green channel of the color buffer; defaults to 3.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_BLUE_SIZE",
                short_name: "BLUE_SIZE",
                doc: Some("the minimum number of bits for the blue channel of the color buffer; defaults to 2.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_ALPHA_SIZE",
                short_name: "ALPHA_SIZE",
                doc: Some("the minimum number of bits for the alpha channel of the color buffer; defaults to 0.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_BUFFER_SIZE",
                short_name: "BUFFER_SIZE",
                doc: Some("the minimum number of bits for frame buffer size; defaults to 0.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_DOUBLEBUFFER",
                short_name: "DOUBLEBUFFER",
                doc: Some("whether the output is single or double buffered; defaults to double buffering on.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_DEPTH_SIZE",
                short_name: "DEPTH_SIZE",
                doc: Some("the minimum number of bits in the depth buffer; defaults to 16.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_STENCIL_SIZE",
                short_name: "STENCIL_SIZE",
                doc: Some("the minimum number of bits in the stencil buffer; defaults to 0.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_ACCUM_RED_SIZE",
                short_name: "ACCUM_RED_SIZE",
                doc: Some("the minimum number of bits for the red channel of the accumulation buffer; defaults to 0.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_ACCUM_GREEN_SIZE",
                short_name: "ACCUM_GREEN_SIZE",
                doc: Some("the minimum number of bits for the green channel of the accumulation buffer; defaults to 0.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_ACCUM_BLUE_SIZE",
                short_name: "ACCUM_BLUE_SIZE",
                doc: Some("the minimum number of bits for the blue channel of the accumulation buffer; defaults to 0.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_ACCUM_ALPHA_SIZE",
                short_name: "ACCUM_ALPHA_SIZE",
                doc: Some("the minimum number of bits for the alpha channel of the accumulation buffer; defaults to 0.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_STEREO",
                short_name: "STEREO",
                doc: Some("whether the output is stereo 3D; defaults to off.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_MULTISAMPLEBUFFERS",
                short_name: "MULTISAMPLEBUFFERS",
                doc: Some("the number of buffers used for multisample anti-aliasing; defaults to 0.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_MULTISAMPLESAMPLES",
                short_name: "MULTISAMPLESAMPLES",
                doc: Some("the number of samples used around the current pixel used for multisample anti-aliasing.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_ACCELERATED_VISUAL",
                short_name: "ACCELERATED_VISUAL",
                doc: Some("set to 1 to require hardware acceleration, set to 0 to force software rendering; defaults to allow either.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_RETAINED_BACKING",
                short_name: "RETAINED_BACKING",
                doc: Some("not used (deprecated).\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_CONTEXT_MAJOR_VERSION",
                short_name: "CONTEXT_MAJOR_VERSION",
                doc: Some("OpenGL context major version.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_CONTEXT_MINOR_VERSION",
                short_name: "CONTEXT_MINOR_VERSION",
                doc: Some("OpenGL context minor version.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_CONTEXT_FLAGS",
                short_name: "CONTEXT_FLAGS",
                doc: Some("some combination of 0 or more of elements of the [`SDL_GLContextFlag`] enumeration; defaults to 0.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_CONTEXT_PROFILE_MASK",
                short_name: "CONTEXT_PROFILE_MASK",
                doc: Some("type of GL context (Core, Compatibility, ES). See [`SDL_GLProfile`]; default value depends on platform.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_SHARE_WITH_CURRENT_CONTEXT",
                short_name: "SHARE_WITH_CURRENT_CONTEXT",
                doc: Some("OpenGL context sharing; defaults to 0.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_FRAMEBUFFER_SRGB_CAPABLE",
                short_name: "FRAMEBUFFER_SRGB_CAPABLE",
                doc: Some("requests sRGB capable visual; defaults to 0.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_CONTEXT_RELEASE_BEHAVIOR",
                short_name: "CONTEXT_RELEASE_BEHAVIOR",
                doc: Some("sets context the release behavior. See [`SDL_GLContextReleaseFlag`]; defaults to FLUSH.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_CONTEXT_RESET_NOTIFICATION",
                short_name: "CONTEXT_RESET_NOTIFICATION",
                doc: Some("set context reset notification. See [`SDL_GLContextResetNotification`]; defaults to NO_NOTIFICATION.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_CONTEXT_NO_ERROR",
                short_name: "CONTEXT_NO_ERROR",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_FLOATBUFFERS",
                short_name: "FLOATBUFFERS",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_EGL_PLATFORM",
                short_name: "EGL_PLATFORM",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "video",
        kind: GroupKind::Flags,
        name: "SDL_GLProfile",
        short_name: "GLProfile",
        doc: Some("Possible values to be set for the [`SDL_GL_CONTEXT_PROFILE_MASK`] attribute.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GL_CONTEXT_PROFILE_CORE",
                short_name: "CORE",
                doc: Some("OpenGL Core Profile context\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_CONTEXT_PROFILE_COMPATIBILITY",
                short_name: "COMPATIBILITY",
                doc: Some("OpenGL Compatibility Profile context\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_CONTEXT_PROFILE_ES",
                short_name: "ES",
                doc: Some("GLX_CONTEXT_ES2_PROFILE_BIT_EXT\n"),
                available_since: None,
            },
        ],
    },
    Group {
        module: "video",
        kind: GroupKind::Flags,
        name: "SDL_GLContextFlag",
        short_name: "GLContextFlag",
        doc: Some("Possible flags to be set for the [`SDL_GL_CONTEXT_FLAGS`] attribute.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GL_CONTEXT_DEBUG_FLAG",
                short_name: "DEBUG_FLAG",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG",
                short_name: "FORWARD_COMPATIBLE_FLAG",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG",
                short_name: "ROBUST_ACCESS_FLAG",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_CONTEXT_RESET_ISOLATION_FLAG",
                short_name: "RESET_ISOLATION_FLAG",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "video",
        kind: GroupKind::Flags,
        name: "SDL_GLContextReleaseFlag",
        short_name: "GLContextReleaseFlag",
        doc: Some("Possible values to be set for the [`SDL_GL_CONTEXT_RELEASE_BEHAVIOR`]\nattribute.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE",
                short_name: "NONE",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH",
                short_name: "FLUSH",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "video",
        kind: GroupKind::Flags,
        name: "SDL_GLContextResetNotification",
        short_name: "GLContextResetNotification",
        doc: Some("Possible values to be set [`SDL_GL_CONTEXT_RESET_NOTIFICATION`] attribute.\n\n## Availability\nThis datatype is available since SDL 3.2.0.\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_GL_CONTEXT_RESET_NO_NOTIFICATION",
                short_name: "NO_NOTIFICATION",
                doc: None,
                available_since: None,
            },
            GroupValue {
                name: "SDL_GL_CONTEXT_RESET_LOSE_CONTEXT",
                short_name: "LOSE_CONTEXT",
                doc: None,
                available_since: None,
            },
        ],
    },
    Group {
        module: "video",
        kind: GroupKind::Enum,
        name: "SDL_HitTestResult",
        short_name: "HitTestResult",
        doc: Some("Possible return values from the [`SDL_HitTest`] callback.\n\n## Thread safety\nThis function should only be called on the main thread.\n\n## Availability\nThis enum is available since SDL 3.2.0.\n\n## See also\n- [`SDL_HitTest`]\n"),
        available_since: Some(SDL_VERSIONNUM(3, 2, 0)),
        values: &[
            GroupValue {
                name: "SDL_HITTEST_NORMAL",
                short_name: "NORMAL",
                doc: Some("Region is normal. No special properties.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_HITTEST_DRAGGABLE",
                short_name: "DRAGGABLE",
                doc: Some("Region can drag entire window.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_HITTEST_RESIZE_TOPLEFT",
                short_name: "RESIZE_TOPLEFT",
                doc: Some("Region is the resizable top-left corner border.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_HITTEST_RESIZE_TOP",
                short_name: "RESIZE_TOP",
                doc: Some("Region is the resizable top border.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_HITTEST_RESIZE_TOPRIGHT",
                short_name: "RESIZE_TOPRIGHT",
                doc: Some("Region is the resizable top-right corner border.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_HITTEST_RESIZE_RIGHT",
                short_name: "RESIZE_RIGHT",
                doc: Some("Region is the resizable right border.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_HITTEST_RESIZE_BOTTOMRIGHT",
                short_name: "RESIZE_BOTTOMRIGHT",
                doc: Some("Region is the resizable bottom-right corner border.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_HITTEST_RESIZE_BOTTOM",
                short_name: "RESIZE_BOTTOM",
                doc: Some("Region is the resizable bottom border.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_HITTEST_RESIZE_BOTTOMLEFT",
                short_name: "RESIZE_BOTTOMLEFT",
                doc: Some("Region is the resizable bottom-left corner border.\n"),
                available_since: None,
            },
            GroupValue {
                name: "SDL_HITTEST_RESIZE_LEFT",
                short_name: "RESIZE_LEFT",
                doc: Some("Region is the resizable left border.\n"),
                available_since: None,
            },
        ],
    },
];

pub(crate) const GROUP_OFFSET_assert: usize = 0;
pub(crate) const GROUP_OFFSET_asyncio: usize = 1;
pub(crate) const GROUP_OFFSET_atomic: usize = 3;
pub(crate) const GROUP_OFFSET_audio: usize = 4;
pub(crate) const GROUP_OFFSET_bits: usize = 6;
pub(crate) const GROUP_OFFSET_blendmode: usize = 6;
pub(crate) const GROUP_OFFSET_camera: usize = 9;
pub(crate) const GROUP_OFFSET_clipboard: usize = 11;
pub(crate) const GROUP_OFFSET_cpuinfo: usize = 11;
pub(crate) const GROUP_OFFSET_dialog: usize = 11;
pub(crate) const GROUP_OFFSET_error: usize = 12;
pub(crate) const GROUP_OFFSET_events: usize = 12;
pub(crate) const GROUP_OFFSET_filesystem: usize = 14;
pub(crate) const GROUP_OFFSET_gamepad: usize = 18;
pub(crate) const GROUP_OFFSET_gpu: usize = 23;
pub(crate) const GROUP_OFFSET_guid: usize = 51;
pub(crate) const GROUP_OFFSET_haptic: usize = 51;
pub(crate) const GROUP_OFFSET_hidapi: usize = 52;
pub(crate) const GROUP_OFFSET_hints: usize = 53;
pub(crate) const GROUP_OFFSET_init: usize = 54;
pub(crate) const GROUP_OFFSET_iostream: usize = 56;
pub(crate) const GROUP_OFFSET_joystick: usize = 58;
pub(crate) const GROUP_OFFSET_keyboard: usize = 61;
pub(crate) const GROUP_OFFSET_keycode: usize = 64;
pub(crate) const GROUP_OFFSET_loadso: usize = 66;
pub(crate) const GROUP_OFFSET_locale: usize = 66;
pub(crate) const GROUP_OFFSET_log: usize = 66;
pub(crate) const GROUP_OFFSET_main: usize = 68;
pub(crate) const GROUP_OFFSET_messagebox: usize = 68;
pub(crate) const GROUP_OFFSET_metal: usize = 71;
pub(crate) const GROUP_OFFSET_misc: usize = 71;
pub(crate) const GROUP_OFFSET_mouse: usize = 71;
pub(crate) const GROUP_OFFSET_mutex: usize = 75;
pub(crate) const GROUP_OFFSET_pen: usize = 76;
pub(crate) const GROUP_OFFSET_pixels: usize = 79;
pub(crate) const GROUP_OFFSET_platform: usize = 92;
pub(crate) const GROUP_OFFSET_power: usize = 92;
pub(crate) const GROUP_OFFSET_process: usize = 93;
pub(crate) const GROUP_OFFSET_properties: usize = 94;
pub(crate) const GROUP_OFFSET_rect: usize = 96;
pub(crate) const GROUP_OFFSET_render: usize = 96;
pub(crate) const GROUP_OFFSET_revision: usize = 98;
pub(crate) const GROUP_OFFSET_scancode: usize = 98;
pub(crate) const GROUP_OFFSET_sensor: usize = 99;
pub(crate) const GROUP_OFFSET_stdinc: usize = 101;
pub(crate) const GROUP_OFFSET_storage: usize = 101;
pub(crate) const GROUP_OFFSET_surface: usize = 101;
pub(crate) const GROUP_OFFSET_system: usize = 104;
pub(crate) const GROUP_OFFSET_thread: usize = 105;
pub(crate) const GROUP_OFFSET_time: usize = 109;
pub(crate) const GROUP_OFFSET_timer: usize = 111;
pub(crate) const GROUP_OFFSET_touch: usize = 112;
pub(crate) const GROUP_OFFSET_tray: usize = 115;
pub(crate) const GROUP_OFFSET_version: usize = 116;
pub(crate) const GROUP_OFFSET_video: usize = 116;
pub(crate) const GROUP_OFFSET_vulkan: usize = 128;
